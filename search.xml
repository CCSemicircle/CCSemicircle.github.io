<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pyhton_TensorFlow</title>
      <link href="/2022/python-tensorflow/"/>
      <url>/2022/python-tensorflow/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Linux安装Tensorflow"><a href="#0-Linux安装Tensorflow" class="headerlink" title="0 Linux安装Tensorflow"></a>0 Linux安装Tensorflow</h1><h2 id="0-1-基于Anaconda环境"><a href="#0-1-基于Anaconda环境" class="headerlink" title="0.1 基于Anaconda环境"></a>0.1 基于Anaconda环境</h2><ul><li>创建新的虚拟环境</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda creat -n env_name tensorflow&#x3D;&#x3D;1.14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS：1.14是版本号，1.x需要额外安装tensorflow-gpu</p><ul><li>验证tensorflow是否安装成功</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 窗口输入如下命令conda activate env_namepython  # 进入python环境# python环境下输入import tensorflow as tfprint(tf.__version__)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1.x版本tensorflow安装tensorflow-gpu</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda install tensorflow-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证tensorflow-gpu是否安装成功</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python  # 进入python环境# python环境下输入import tensorflow as tfprint(&#39;GPU&#39;,tf.test.is_gpu_available())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_常见用法</title>
      <link href="/2022/python-ji-ben-yong-fa/"/>
      <url>/2022/python-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="0-安装环境"><a href="#0-安装环境" class="headerlink" title="0 安装环境"></a>0 安装环境</h1><ol><li>使用PyCharm打开项目时，默认是base环境，如果自定义了环境，需要修改Python Interpreter。</li></ol><h1 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1 文件操作"></a>1 文件操作</h1><h2 id="1-1-创建文件和文件夹"><a href="#1-1-创建文件和文件夹" class="headerlink" title="1.1 创建文件和文件夹"></a>1.1 创建文件和文件夹</h2><h3 id="1-1-1-创建文件夹"><a href="#1-1-1-创建文件夹" class="headerlink" title="1.1.1 创建文件夹"></a>1.1.1 创建文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### 创建文件夹</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#判断是否存在文件夹如果不存在则创建为文件夹</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token comment">#makedirs 创建文件时如果路径不存在会创建这个路径</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---  new folder...  ---"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---  OK  ---"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"---  There is this folder!  ---"</span>file_path <span class="token operator">=</span> <span class="token string">"G:\\xxoo\\test"</span>mkdir<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>             <span class="token comment">#调用函数</span><span class="token keyword">import</span> os folder <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'new_folder\\test\\'</span><span class="token comment">#获取此py文件路径，在此路径选创建在new_folder文件夹中的test文件夹</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\Administrator\\Desktop\\'</span> <span class="token operator">+</span> <span class="token string">'new'</span> <span class="token operator">+</span> <span class="token string">'.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-获取文件路径"><a href="#1-2-获取文件路径" class="headerlink" title="1.2 获取文件路径"></a>1.2 获取文件路径</h2><h3 id="1-2-1-获取-py文件路径"><a href="#1-2-1-获取-py文件路径" class="headerlink" title="1.2.1 获取.py文件路径"></a>1.2.1 获取.py文件路径</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-2-获取文件绝对路径"><a href="#1-2-2-获取文件绝对路径" class="headerlink" title="1.2.2 获取文件绝对路径"></a>1.2.2 获取文件绝对路径</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-装饰器"><a href="#4-装饰器" class="headerlink" title="4 装饰器"></a>4 装饰器</h1><h2 id="4-1-staticmethod或-classmetho"><a href="#4-1-staticmethod或-classmetho" class="headerlink" title="4.1 @staticmethod或@classmetho"></a>4.1 @staticmethod或@classmetho</h2><ul><li>通常来说，我们使用一个类的方法时，首先要实例化这个类，再用实例化的类来调用其方法</li><li>使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</li></ul><h1 id="5-matplotlib"><a href="#5-matplotlib" class="headerlink" title="5 matplotlib"></a>5 matplotlib</h1><h2 id="5-1-散点图-matplotlib-pyplot-scatter"><a href="#5-1-散点图-matplotlib-pyplot-scatter" class="headerlink" title="5.1 散点图 matplotlib.pyplot.scatter"></a>5.1 散点图 <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html">matplotlib.pyplot.scatter</a></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">matplotlib<span class="token punctuation">.</span>pyplot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> linewidths<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> plotnonfinite<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参数说明：</li></ul><p><strong>x, y</strong>: float or array-like, shape (n, )</p><p>The data positions.</p><p><strong>s</strong>: float or array-like, shape (n, ), optional</p><p>The marker size in points**2. Default is <code>rcParams[&#39;lines.markersize&#39;] ** 2</code>.</p><p><strong>c</strong>: array-like or list of colors or color, optional</p><p>The marker colors. </p><p><strong>marker</strong>: <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.markers.MarkerStyle.html#matplotlib.markers.MarkerStyle"><code>MarkerStyle</code></a>86)</p><p>The marker style. <em>marker</em> can be either an instance of the class or the text shorthand for a particular marker. See <a href="https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers"><code>matplotlib.markers</code></a> for more information about marker styles.</p><p><strong>alpha</strong>: float, default: None</p><p>The alpha blending value, between 0 (transparent) and 1 (opaque).</p><h1 id="6-错误和异常"><a href="#6-错误和异常" class="headerlink" title="6 错误和异常"></a>6 错误和异常</h1><h2 id="6-1-assert断言"><a href="#6-1-assert断言" class="headerlink" title="6.1 assert断言"></a>6.1 assert断言</h2><ul><li>语法格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">assert expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-none"><code class="language-none">if not expression:    raise AssertionError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>assert 后面也可以紧跟参数:</li></ul><pre class="line-numbers language-none"><code class="language-none">assert expression [, arguments]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-none"><code class="language-none">if not expression:    raise AssertionError(arguments)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="7-时间与日期"><a href="#7-时间与日期" class="headerlink" title="7 时间与日期"></a>7 时间与日期</h1><h2 id="7-1-计算Python的代码块或程序的运行时间"><a href="#7-1-计算Python的代码块或程序的运行时间" class="headerlink" title="7.1 计算Python的代码块或程序的运行时间"></a>7.1 计算Python的代码块或程序的运行时间</h2><ul><li>方法一</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimestart <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>run_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># do something</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>run_function<span class="token punctuation">(</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法三，推荐使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>run_function<span class="token punctuation">(</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token comment"># Python3.8不再支持time.clock，但在调用时依然包含该方法；需要用用time.perf_counter()替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-格式化时间，time-strftime-‘-m-d’-time-localtime"><a href="#7-2-格式化时间，time-strftime-‘-m-d’-time-localtime" class="headerlink" title="7.2 格式化时间，time.strftime(‘%m-%d’, time.localtime())"></a>7.2 格式化时间，time.strftime(‘%m-%d’, time.localtime())</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time <span class="token comment"># 格式化成2016-03-20 11:45:39形式</span><span class="token keyword">print</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span><span class="token keyword">print</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将格式字符串转换为时间戳</span>a <span class="token operator">=</span> <span class="token string">"Sat Mar 28 22:24:24 2016"</span><span class="token keyword">print</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-PyMySQL"><a href="#8-PyMySQL" class="headerlink" title="8 PyMySQL"></a>8 PyMySQL</h1><h2 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1 安装"></a>8.1 安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install PyMySQLpython3 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-2-数据库连接"><a href="#8-2-数据库连接" class="headerlink" title="8.2 数据库连接"></a>8.2 数据库连接</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"testuser"</span><span class="token punctuation">,</span><span class="token string">"test123"</span><span class="token punctuation">,</span><span class="token string">"TESTDB"</span> <span class="token punctuation">)</span> <span class="token comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用 execute()  方法执行 SQL 查询 </span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT VERSION()"</span><span class="token punctuation">)</span> <span class="token comment"># 使用 fetchone() 方法获取单条数据.</span>data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Database version : %s "</span> <span class="token operator">%</span> data<span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-增删改查操作"><a href="#8-3-增删改查操作" class="headerlink" title="8.3 增删改查操作"></a>8.3 增删改查操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"testuser"</span><span class="token punctuation">,</span><span class="token string">"test123"</span><span class="token punctuation">,</span><span class="token string">"TESTDB"</span> <span class="token punctuation">)</span> <span class="token comment"># 使用cursor()方法获取操作游标 </span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">### 具体执行语句放在此处 ###</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SQL 插入语句</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""INSERT INTO EMPLOYEE(FIRST_NAME,         LAST_NAME, AGE, SEX, INCOME)         VALUES ('Mac', 'Mohan', 20, 'M', 2000)"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行sql语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交到数据库执行</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 如果发生错误则回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SQL 删除语句</span>sql <span class="token operator">=</span> <span class="token string">"DELETE FROM EMPLOYEE WHERE AGE > %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交修改</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 发生错误时回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SQL 更新语句</span>sql <span class="token operator">=</span> <span class="token string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交到数据库执行</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 发生错误时回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询<ul><li><strong>fetchone():</strong> 该方法获取下一个查询结果集。结果集是一个对象</li><li><strong>fetchall():</strong> 接收全部的返回结果行.</li><li><strong>rowcount:</strong> 这是一个只读属性，并返回执行execute()方法后影响的行数。</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SQL 查询语句</span>sql <span class="token operator">=</span> "SELECT <span class="token operator">*</span> FROM EMPLOYEE \       WHERE INCOME <span class="token operator">></span> <span class="token operator">%</span>s" <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 获取所有记录列表</span>   results <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>      fname <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      lname <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      age <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      sex <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>      income <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment"># 打印结果</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"fname=%s,lname=%s,age=%s,sex=%s,income=%s"</span> <span class="token operator">%</span> \             <span class="token punctuation">(</span>fname<span class="token punctuation">,</span> lname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> income <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: unable to fetch data"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-字符串"><a href="#9-字符串" class="headerlink" title="9 字符串"></a>9 字符串</h1><h2 id="9-1-其他类型转为字符串"><a href="#9-1-其他类型转为字符串" class="headerlink" title="9.1 其他类型转为字符串"></a>9.1 其他类型转为字符串</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="10-pickle数据持久存储"><a href="#10-pickle数据持久存储" class="headerlink" title="10 pickle数据持久存储"></a>10 pickle数据持久存储</h1><p>python的pickle模块实现了基本的数据序列和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p><h2 id="10-1-读取-写入-文件"><a href="#10-1-读取-写入-文件" class="headerlink" title="10.1 读取\写入 文件"></a>10.1 读取\写入 文件</h2><ul><li><p>pickle.dump(obj, file, [,protocol])</p><p>注解：将对象obj保存到文件file中去。<br>参数：</p><ul><li>protocol为序列化使用的协议版本。0：ASCII协议，所序列化的对象使用可打印的ASCII码表示；1：老式的二进制协议；2：2.3版本引入的新二进制协议，较以前的更高效。其中协议0和1兼容老版本的python。protocol默认值为0。</li><li>file：对象保存到的类文件对象。file必须有write()接口， file可以是一个以’w’方式打开的文件或者一个StringIO对象或者其他任何实现write()接口的对象。如果protocol&gt;&#x3D;1，文件对象需要是二进制模式打开的。</li></ul></li><li><p>pickle.load(file)<br>注解：从file中读取一个字符串，并将它重构为原来的python对象。<br>参数：</p><ul><li>file:类文件对象，有read()和readline()接口。</li></ul></li></ul><h1 id="11-tqdm"><a href="#11-tqdm" class="headerlink" title="11 tqdm"></a>11 tqdm</h1><p>Tqdm 是一个快速，可扩展的Python进度条，可以在 Python 长循环中添加一个进度提示信息，用户只需要封装任意的迭代器 tqdm(iterator)。</p><h1 id="12-字典dict"><a href="#12-字典dict" class="headerlink" title="12 字典dict"></a>12 字典dict</h1><h2 id="12-1-update"><a href="#12-1-update" class="headerlink" title="12.1 update()"></a>12.1 update()</h2><p>把字典dict2的键&#x2F;值对更新到dict里。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-2-get"><a href="#12-2-get" class="headerlink" title="12.2 get()"></a>12.2 get()</h2><p>返回指定键的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数：</strong></p><ul><li>key – 字典中要查找的键。</li><li>default – 如果指定键的值不存在时，返回该默认值。</li></ul><h1 id="13-字符串str"><a href="#13-字符串str" class="headerlink" title="13 字符串str"></a>13 字符串str</h1><h2 id="13-1-strip"><a href="#13-1-strip" class="headerlink" title="13.1 strip()"></a>13.1 strip()</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p><h2 id="13-2-eval"><a href="#13-2-eval" class="headerlink" title="13.2 eval()"></a>13.2 eval()</h2><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">eval</span><span class="token punctuation">(</span> <span class="token string">'3 * x'</span> <span class="token punctuation">)</span><span class="token number">21</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'pow(2,2)'</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'2 + 2'</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> n<span class="token operator">=</span><span class="token number">81</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"n + 4"</span><span class="token punctuation">)</span><span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14-列表List"><a href="#14-列表List" class="headerlink" title="14 列表List"></a>14 列表List</h1><h2 id="14-1-extend"><a href="#14-1-extend" class="headerlink" title="14.1 extend()"></a>14.1 extend()</h2><p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</p><h2 id="14-2-pop"><a href="#14-2-pop" class="headerlink" title="14.2 pop()"></a>14.2 pop()</h2><p>去掉列表中的一个元素（默认最后一个元素）</p><h2 id="14-3-将list与元组放置在一个list中"><a href="#14-3-将list与元组放置在一个list中" class="headerlink" title="14.3 将list与元组放置在一个list中"></a>14.3 将list与元组放置在一个list中</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">each_data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>data0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> each_data<span class="token punctuation">:</span>    data0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>  <span class="token comment"># 正确用法 [(0, 1), 4, 5]</span>    data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>each_data  <span class="token comment"># 正确用法 [(0, 1), 4, 5] ，但是要求each_data要为list，不能为ndarray等</span>data2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>each_data<span class="token punctuation">]</span>  <span class="token comment"># 错误用法，[(0, 1), [2, 3, 4]]</span>data3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>each_data<span class="token punctuation">]</span> <span class="token comment"># 错误用法 [[0, 1], [2, 3, 4]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-4-生成tuple必须从其他序列转为tuple"><a href="#14-4-生成tuple必须从其他序列转为tuple" class="headerlink" title="14.4 生成tuple必须从其他序列转为tuple"></a>14.4 生成tuple必须从其他序列转为tuple</h2><h2 id="14-5-list包含数字，不能直接转化成字符串"><a href="#14-5-list包含数字，不能直接转化成字符串" class="headerlink" title="14.5 list包含数字，不能直接转化成字符串"></a>14.5 list包含数字，不能直接转化成字符串</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%s'</span> <span class="token operator">%</span><span class="token builtin">id</span> <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="14-6-负数索引，从后往前索引"><a href="#14-6-负数索引，从后往前索引" class="headerlink" title="14.6 负数索引，从后往前索引"></a>14.6 负数索引，从后往前索引</h2><h2 id="14-7-zip-同时遍历两个list"><a href="#14-7-zip-同时遍历两个list" class="headerlink" title="14.7 zip() 同时遍历两个list"></a>14.7 zip() 同时遍历两个list</h2><h1 id="15-数字Number"><a href="#15-数字Number" class="headerlink" title="15 数字Number"></a>15 数字Number</h1><h2 id="15-1-round"><a href="#15-1-round" class="headerlink" title="15.1 round()"></a>15.1 round()</h2><p><strong>round()</strong> 方法返回浮点数x的四舍五入值。</p><h1 id="16-基本语法"><a href="#16-基本语法" class="headerlink" title="16 基本语法"></a>16 基本语法</h1><h2 id="16-1-查看变量类型，type"><a href="#16-1-查看变量类型，type" class="headerlink" title="16.1 查看变量类型，type()"></a>16.1 查看变量类型，type()</h2><h1 id="17-内存管理"><a href="#17-内存管理" class="headerlink" title="17 内存管理"></a>17 内存管理</h1><h2 id="17-1-手动释放内存，del-gc-collect"><a href="#17-1-手动释放内存，del-gc-collect" class="headerlink" title="17.1 手动释放内存，del + gc.collect()"></a>17.1 手动释放内存，del + gc.collect()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gc<span class="token keyword">del</span> agc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI_深度学习项目搭建与训练技巧</title>
      <link href="/2022/ai-shen-du-xue-xi-xiang-mu-da-jian-yu-xun-lian-ji-qiao/"/>
      <url>/2022/ai-shen-du-xue-xi-xiang-mu-da-jian-yu-xun-lian-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="0-核心思想"><a href="#0-核心思想" class="headerlink" title="0 核心思想"></a>0 核心思想</h1><h2 id="0-1-尽可能地用计算机代替人工完成任务"><a href="#0-1-尽可能地用计算机代替人工完成任务" class="headerlink" title="0.1 尽可能地用计算机代替人工完成任务"></a>0.1 尽可能地用计算机代替人工完成任务</h2><p>虽然在短期需要一些额外的工作，但是长远开看可以节省很多的时间和成本。</p><h2 id="0-2-当出现问题时，不用凑合的办法修正，去找到出现问题的原因，或许会有意外的收获"><a href="#0-2-当出现问题时，不用凑合的办法修正，去找到出现问题的原因，或许会有意外的收获" class="headerlink" title="0.2 当出现问题时，不用凑合的办法修正，去找到出现问题的原因，或许会有意外的收获"></a>0.2 当出现问题时，不用凑合的办法修正，去找到出现问题的原因，或许会有意外的收获</h2><h2 id="0-3-在工程上，先解决80-的问题，在慢慢解决剩下20-的文图"><a href="#0-3-在工程上，先解决80-的问题，在慢慢解决剩下20-的文图" class="headerlink" title="0.3 在工程上，先解决80%的问题，在慢慢解决剩下20%的文图"></a>0.3 在工程上，先解决80%的问题，在慢慢解决剩下20%的文图</h2><h1 id="1-Pytorch使用技巧"><a href="#1-Pytorch使用技巧" class="headerlink" title="1 Pytorch使用技巧"></a>1 Pytorch使用技巧</h1><h2 id="1-1-torch-sparse-mm-无法反向传播"><a href="#1-1-torch-sparse-mm-无法反向传播" class="headerlink" title="1.1 torch.sparse.mm 无法反向传播"></a>1.1 torch.sparse.mm 无法反向传播</h2><h2 id="1-2-drpout一般发生在training阶段，Pytorch模型可通过self-training获取状态"><a href="#1-2-drpout一般发生在training阶段，Pytorch模型可通过self-training获取状态" class="headerlink" title="1.2 drpout一般发生在training阶段，Pytorch模型可通过self.training获取状态"></a>1.2 drpout一般发生在training阶段，Pytorch模型可通过self.training获取状态</h2><ul><li>self.training通过model.train() &#x2F; model.eval() 设置值</li></ul><h2 id="1-3-Pytorch的tensor数值与一般的int等基本数据类型不同，注意用-item-统一类型"><a href="#1-3-Pytorch的tensor数值与一般的int等基本数据类型不同，注意用-item-统一类型" class="headerlink" title="1.3 Pytorch的tensor数值与一般的int等基本数据类型不同，注意用.item()统一类型"></a>1.3 Pytorch的tensor数值与一般的int等基本数据类型不同，注意用.item()统一类型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### train_label 为 doK_matrix (0,0) 1.0</span><span class="token comment">### users=tensor([0,0,0])</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> train_label <span class="token comment"># True</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> train_label  <span class="token comment"># False</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> train_label  <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-调参技巧"><a href="#2-调参技巧" class="headerlink" title="2 调参技巧"></a>2 调参技巧</h1><h2 id="2-1-模型第一次完整运行注意打印关键信息，否则可能长时间无响应"><a href="#2-1-模型第一次完整运行注意打印关键信息，否则可能长时间无响应" class="headerlink" title="2.1 模型第一次完整运行注意打印关键信息，否则可能长时间无响应"></a>2.1 模型第一次完整运行注意打印关键信息，否则可能长时间无响应</h2><h2 id="2-2-为节省时间，避免用循环，尽量用矩阵操作"><a href="#2-2-为节省时间，避免用循环，尽量用矩阵操作" class="headerlink" title="2.2 为节省时间，避免用循环，尽量用矩阵操作"></a>2.2 为节省时间，避免用循环，尽量用矩阵操作</h2><p>循环操作虽然只增加2-3秒，但是在大数据集下，会显得尤为突出，2-3秒在很多个batch下会被放大</p><h2 id="2-3-模型的内容尽量写在forward里，避免不断地调用函数"><a href="#2-3-模型的内容尽量写在forward里，避免不断地调用函数" class="headerlink" title="2.3 模型的内容尽量写在forward里，避免不断地调用函数"></a>2.3 模型的内容尽量写在forward里，避免不断地调用函数</h2><p>当数据集大时会非常损耗时间，本来1秒的运行时间可能会因为循环调用函数变成10+秒，甚至重复操作也比重复调用函数来得快</p><h2 id="2-6-train-data一定要shuffle，使得loss更新"><a href="#2-6-train-data一定要shuffle，使得loss更新" class="headerlink" title="2.6 train data一定要shuffle，使得loss更新"></a>2.6 train data一定要shuffle，使得loss更新</h2><h2 id="2-7-报错-WARNING-root-NaN-or-Inf-found-in-input-tensor"><a href="#2-7-报错-WARNING-root-NaN-or-Inf-found-in-input-tensor" class="headerlink" title="2.7 报错 WARNING:root:NaN or Inf found in input tensor."></a>2.7 报错 WARNING:root:NaN or Inf found in input tensor.</h2><p>目前可能的原因有多种：</p><ul><li><strong>梯度消失或梯度爆炸</strong></li></ul><ol><li>调小或调大学习率</li><li>增大正则惩罚，如L1&#x2F;L2正则化</li></ol><ul><li><strong>显存或内存不够</strong></li></ul><ol><li>调小batch_size（训练与测试的batch size过大都有可能导致报错）</li></ol><ul><li><strong>代码错误</strong>：可以通过将loss设置为0检查</li></ul><ol><li>检查有无除法，将可能除0的地方，替换成1e-8</li></ol><ul><li><strong>数据集有问题</strong>：可以通过将loss设置为0检查</li></ul><ol><li>检查是否有越界数据或者Nan、Inf的数据</li></ol><h1 id="3-权重初始化"><a href="#3-权重初始化" class="headerlink" title="3 权重初始化"></a>3 权重初始化</h1><h2 id="3-1-Xavier"><a href="#3-1-Xavier" class="headerlink" title="3.1 Xavier"></a>3.1 Xavier</h2><p>对于每个经过的层，我们希望方差保持相同，这有助于防止梯度爆炸或消失。换句话说，我们需要以使 x 和 y  的方差保持相同的方式来初始化权重，此初始化过程称为Xavier初始化（Xavier initialization）。（Xavier 读音 zeivier）</p><h1 id="4-多分类问题的评价指标"><a href="#4-多分类问题的评价指标" class="headerlink" title="4 多分类问题的评价指标"></a>4 多分类问题的评价指标</h1><h2 id="4-1-准确率、召回率与F1分数"><a href="#4-1-准确率、召回率与F1分数" class="headerlink" title="4.1 准确率、召回率与F1分数"></a>4.1 准确率、召回率与F1分数</h2><p>把每个类别单独视为”正“，所有其它类型视为”负“，考虑使用混淆矩阵，分别计算各个类别的精确率与召回率。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Numpy</title>
      <link href="/2022/python-numpy/"/>
      <url>/2022/python-numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本矩阵操作"><a href="#1-基本矩阵操作" class="headerlink" title="1 基本矩阵操作"></a>1 基本矩阵操作</h1><h2 id="1-1-纵向连接矩阵，np-r-a-b"><a href="#1-1-纵向连接矩阵，np-r-a-b" class="headerlink" title="1.1  纵向连接矩阵，np.r_([a,b])"></a>1.1  纵向连接矩阵，np.r_([a,b])</h2><p>纵向连接两个矩阵，就是把两矩阵上下相连，要求列数相等，类似于pandas中的concat()。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>r_<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">## answer ##</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-横向连接矩阵，np-c-a-b"><a href="#1-2-横向连接矩阵，np-c-a-b" class="headerlink" title="1.2 横向连接矩阵，np.c_([a, b])"></a>1.2 横向连接矩阵，np.c_([a, b])</h2><p>横向连接两个矩阵，就是把两矩阵左右相连，要求行数相等，类似于pandas中的merge()。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">## answer ##</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-随机数"><a href="#2-随机数" class="headerlink" title="2 随机数"></a>2 随机数</h1><h2 id="2-0-设置随机数种子"><a href="#2-0-设置随机数种子" class="headerlink" title="2.0 设置随机数种子"></a>2.0 设置随机数种子</h2><ul><li>有时候我们想每次生成的随机数矩阵都一样，这时只需在前面加一句np.random.seed(0)即可，数字可随意指定</li></ul><h2 id="2-1-生成随机浮点数，np-random-random"><a href="#2-1-生成随机浮点数，np-random-random" class="headerlink" title="2.1 生成随机浮点数，np.random.random()"></a>2.1 生成随机浮点数，np.random.random()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.7954041994194649</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-2-生成随机数组，np-random-rand-100-1"><a href="#2-2-生成随机数组，np-random-rand-100-1" class="headerlink" title="2.2 生成随机数组，np.random.rand(100,1)"></a>2.2 生成随机数组，np.random.rand(100,1)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 数组大小为 100*1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-线性代数-linalg"><a href="#3-线性代数-linalg" class="headerlink" title="3 线性代数 linalg"></a>3 线性代数 linalg</h1><h2 id="3-1-计算矩阵的逆，np-linalg-inv-matrix"><a href="#3-1-计算矩阵的逆，np-linalg-inv-matrix" class="headerlink" title="3.1 计算矩阵的逆，np.linalg.inv(matrix)"></a>3.1 计算矩阵的逆，np.linalg.inv(matrix)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-数组操作"><a href="#4-数组操作" class="headerlink" title="4 数组操作"></a>4 数组操作</h1><h2 id="4-1-计算数组的内积与矩阵积，np-dot-a-b"><a href="#4-1-计算数组的内积与矩阵积，np-dot-a-b" class="headerlink" title="4.1 计算数组的内积与矩阵积，np.dot(a, b)"></a>4.1 计算数组的内积与矩阵积，np.dot(a, b)</h2><ul><li><p>如果处理的是一维数组，则得到的是两数组的內积</p></li><li><p>如果是二维数组（矩阵）之间的运算，则得到的是矩阵积（matrix product），即列数与行数相同两矩阵相乘</p></li><li><p>dot()函数可以通过numpy库调用，也可以由数组实例对象进行调用。a.dot(b) 与 np.dot(a,b)效果相同</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment"># Out[28]: 4</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">## answer ##</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-重组数组，np-reshape-a-newshepe"><a href="#4-2-重组数组，np-reshape-a-newshepe" class="headerlink" title="4.2 重组数组，np.reshape(a, newshepe)"></a>4.2 重组数组，np.reshape(a, newshepe)</h2><ul><li>在不更改数据的情况下为数组赋予新的形状</li><li>可以通过numpy库调用，也可以由数组实例对象进行调用。a.reshape((4,4)) 与 np.reshape(a,(4,4))效果相同</li><li>其他用法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不知道z的shape属性是多少，让z变成一列</span>z <span class="token operator">=</span> z<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 只给定行数，列数等于-1，让z变成指定行数</span>z <span class="token operator">=</span> z<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>rows<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PS：产生新的数组，需要赋值给原来数组才能完成修改</li></ul><h2 id="4-3-创建数组，np-array"><a href="#4-3-创建数组，np-array" class="headerlink" title="4.3 创建数组，np.array()"></a>4.3 创建数组，np.array()</h2><ul><li>例子</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>向上转型：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一个以上的维度：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>最小尺寸2：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ndmin<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> 原本是一维数组array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>提供的类型：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">complex</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token operator">+</span><span class="token number">0.j</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token operator">+</span><span class="token number">0.j</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token operator">+</span><span class="token number">0.j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>数据类型包含多个元素：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># int8, int16, int32, int64 四种数据类型可以使用字符串 'i1', 'i2','i4','i8' 代替</span><span class="token comment"># 'a', 'b'分别代表元组两个元素的名称</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从子类创建数组：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'1 2; 3 4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># subok: bool，可选,如果为True，则将传递子类，否则返回的数组将被强制为基类数组（默认）。</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'1 2; 3 4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-按数值范围创建数组，numpy-arange-start-stop-step-dtype"><a href="#4-4-按数值范围创建数组，numpy-arange-start-stop-step-dtype" class="headerlink" title="4.4 按数值范围创建数组，numpy.arange(start, stop, step, dtype)"></a>4.4 按数值范围创建数组，numpy.arange(start, stop, step, dtype)</h2><h2 id="4-5-比较数组的相同个数，numpy-sum-arr1-x3D-x3D-arr2"><a href="#4-5-比较数组的相同个数，numpy-sum-arr1-x3D-x3D-arr2" class="headerlink" title="4.5 比较数组的相同个数，numpy.sum(arr1 &#x3D;&#x3D; arr2)"></a>4.5 比较数组的相同个数，numpy.sum(arr1 &#x3D;&#x3D; arr2)</h2><h2 id="4-6-从数组中随机抽样，np-randon-choice-与-np-random-sample"><a href="#4-6-从数组中随机抽样，np-randon-choice-与-np-random-sample" class="headerlink" title="4.6 从数组中随机抽样，np.randon.choice() 与 np.random.sample()"></a>4.6 从数组中随机抽样，np.randon.choice() 与 np.random.sample()</h2><p><strong>numpy.random.choice()抽样方法的时间几乎不会随着抽样数量的变化而变化，而random.sample() 会随着抽样数量的增加而增加。</strong></p><p>所以当数量较少的时候，random.sample() 用时非常少，而numpy.random.choice()则很长；</p><p>当抽样数量很大的时候，numpy.random.choice()几乎不变，而random.sample() 用时变长。</p><h2 id="4-7-去除多维数组的轴，np-squeeze-a-axis-x3D-None"><a href="#4-7-去除多维数组的轴，np-squeeze-a-axis-x3D-None" class="headerlink" title="4.7 去除多维数组的轴，np.squeeze(a, axis&#x3D;None)"></a>4.7 去除多维数组的轴，np.squeeze(a, axis&#x3D;None)</h2><ul><li><p>注意只能去除<strong>长度为1</strong>的轴</p></li><li><p>示例</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shapeTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> cannot select an axis to squeeze out which has size <span class="token keyword">not</span> equal to one<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-7-返回非0数组元组的索引，numpy-argwhere-condition"><a href="#4-7-返回非0数组元组的索引，numpy-argwhere-condition" class="headerlink" title="4.7 返回非0数组元组的索引，numpy.argwhere(condition)"></a>4.7 返回非0数组元组的索引，numpy.argwhere(condition)</h2><ul><li>condition表示索引数组的条件</li></ul><h2 id="4-8-获取非0元素值，np-nonzero"><a href="#4-8-获取非0元素值，np-nonzero" class="headerlink" title="4.8 获取非0元素值，np.nonzero()"></a>4.8 获取非0元素值，np.nonzero()</h2><h2 id="4-9-数组维数，ndarray-ndim"><a href="#4-9-数组维数，ndarray-ndim" class="headerlink" title="4.9 数组维数，ndarray.ndim"></a>4.9 数组维数，ndarray.ndim</h2><ul><li>例子</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>ndim<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">.</span>ndim<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-10-按元素点乘-arr-a-arr-b"><a href="#4-10-按元素点乘-arr-a-arr-b" class="headerlink" title="4.10 按元素点乘 arr_a * arr_b"></a>4.10 按元素点乘 arr_a * arr_b</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">*</span> b<span class="token comment"># Out[38]: array([2, 2])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-数学运算"><a href="#5-数学运算" class="headerlink" title="5 数学运算"></a>5 数学运算</h1><h2 id="5-1-求倒数-1-x2F-x，np-reciprocal"><a href="#5-1-求倒数-1-x2F-x，np-reciprocal" class="headerlink" title="5.1 求倒数 1&#x2F;x，np.reciprocal()"></a>5.1 求倒数 1&#x2F;x，np.reciprocal()</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_SprinBoot_Debug</title>
      <link href="/2022/java-springboot-debug/"/>
      <url>/2022/java-springboot-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring-Boot项目如何独立运行-springboot项目打包"><a href="#1-Spring-Boot项目如何独立运行-springboot项目打包" class="headerlink" title="1. Spring Boot项目如何独立运行(springboot项目打包)"></a>1. Spring Boot项目如何独立运行(springboot项目打包)</h3><ul><li>详见博客：<a href="https://blog.csdn.net/weixin_45764765/article/details/106830869">https://blog.csdn.net/weixin_45764765/article/details/106830869</a></li><li>一般情况下可以直接点击idea的运行按钮测试运行，最终再打包</li></ul><h3 id="2-idea报错-No-valid-Maven-installation-found-maven不能用"><a href="#2-idea报错-No-valid-Maven-installation-found-maven不能用" class="headerlink" title="2. idea报错 No valid Maven installation found.maven不能用"></a>2. idea报错 No valid Maven installation found.maven不能用</h3><ul><li>详见博客：<a href="https://blog.csdn.net/qq_40846086/article/details/81252736">https://blog.csdn.net/qq_40846086/article/details/81252736</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debug </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库_MySQL使用</title>
      <link href="/2022/shu-ju-ku-mysql/"/>
      <url>/2022/shu-ju-ku-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装配置MySQL-Navicat"><a href="#1-安装配置MySQL-Navicat" class="headerlink" title="1.安装配置MySQL+Navicat"></a>1.安装配置MySQL+Navicat</h3><ul><li><p>详见博客：<a href="https://www.runoob.com/mysql/mysql-install.html">MySQL 安装</a> （简单版，无可视化界面）</p><ul><li>修改root用户临时密码：<a href="https://blog.csdn.net/Exception_sir/article/details/82111014">mysql 修改密码报错解决</a></li></ul></li><li><p>详见博客：<a href="https://blog.csdn.net/chic_data/article/details/72286329">Windows上本地安装MySQL数据库</a></p></li></ul><blockquote><p>本机MYSQL服务名：MySQL80</p><p>root密码：XXXXXX</p></blockquote><ul><li>查看MySQL服务名，“管理工具”  –&gt; “服务”</li><li>破解版Navicat，详见博客：<a href="https://www.jianshu.com/p/3af7fccc22c7">Navicat Premium v15 中文最新破解版（附：激活工具）</a></li></ul><h3 id="2-登录时报错Access-denied-for-user-‘root‘-‘localhost‘-using-password-YES"><a href="#2-登录时报错Access-denied-for-user-‘root‘-‘localhost‘-using-password-YES" class="headerlink" title="2.登录时报错Access denied for user ‘root‘@‘localhost‘ (using password: YES)"></a>2.登录时报错Access denied for user ‘root‘@‘localhost‘ (using password: YES)</h3><ul><li>详见博客：<a href="https://blog.csdn.net/qq_36675754/article/details/81381341">在MySQL登录时出现Access denied for user ‘root‘@‘localhost‘ (using password: YES) 拒绝访问，并可修改MySQL密码</a></li></ul><h3 id="3-发生系统错误5"><a href="#3-发生系统错误5" class="headerlink" title="3.发生系统错误5"></a>3.发生系统错误5</h3><ul><li>详见博客：<a href="https://blog.csdn.net/aaa333qwe/article/details/75195938">net stop mysql 发生系统错误 5。</a></li></ul><h3 id="4-报错-Duplicate-foreign-key-constraint-name-‘idXXXX’"><a href="#4-报错-Duplicate-foreign-key-constraint-name-‘idXXXX’" class="headerlink" title="4.报错 Duplicate foreign key constraint name ‘idXXXX’"></a>4.报错 Duplicate foreign key constraint name ‘idXXXX’</h3><ul><li>因为在之前已经加过一个名称为idmanagetype外键索引了 ，如果重复则报错，在名称后面加一个1成功了。</li></ul><h3 id="5-Navicat连接远程主机数据库报错"><a href="#5-Navicat连接远程主机数据库报错" class="headerlink" title="5.Navicat连接远程主机数据库报错"></a>5.Navicat连接远程主机数据库报错</h3><ul><li>详见博客：<a href="https://blog.csdn.net/MTbaby/article/details/56836986">解决Navicat无法连接到MySQL的问题</a></li></ul><h3 id="6-workbench-执行语句"><a href="#6-workbench-执行语句" class="headerlink" title="6. workbench 执行语句"></a>6. workbench 执行语句</h3><ul><li>新建tab(new tab) ctrl+t</li><li>执行当前语句(execute current statement) ctrl+enter</li><li>执行全部或选中的语句(execute all or selection) ctrl+shift+enter</li><li>查看执行计划(explain current statement) ctrl+alt+x</li></ul><h3 id="7-text数据类型"><a href="#7-text数据类型" class="headerlink" title="7. text数据类型"></a>7. text数据类型</h3><ul><li><code>TEXT</code>可用于存储可以从<code>1</code>字节到<code>4GB</code>长度的文本字符串。</li><li>TINYTEXT - 1个字节(255个字符)</li><li>TEXT - 64KB(65,535个字符)</li><li>MEDIUMTEXT - 16MB(16,777,215个字符)</li><li>LONGTEXT - 4GB(4,294,967,295个字符)</li></ul><h3 id="8-命令行登录Mysql"><a href="#8-命令行登录Mysql" class="headerlink" title="8. 命令行登录Mysql"></a>8. 命令行登录Mysql</h3><ul><li>详见博客：<a href="https://blog.csdn.net/helloxiaozhe/article/details/76229074">命令行登录Mysql，远程登录Mysql的方法</a></li></ul><h3 id="9-连接-mysql-出现Client-does-not-support-authentication-protocol-requested-by-server"><a href="#9-连接-mysql-出现Client-does-not-support-authentication-protocol-requested-by-server" class="headerlink" title="9. 连接 mysql 出现Client does not support authentication protocol requested by server"></a>9. 连接 mysql 出现Client does not support authentication protocol requested by server</h3><ul><li>详见博客：<a href="https://blog.csdn.net/u013700358/article/details/80306560">navicat 连接 mysql 出现Client does not support authentication protocol requested by server解决方案</a></li></ul><h3 id="10-windows下MySQL-my-ini文件位置"><a href="#10-windows下MySQL-my-ini文件位置" class="headerlink" title="10. windows下MySQL my.ini文件位置"></a>10. windows下MySQL my.ini文件位置</h3><ul><li>C:\ProgramData\MySQL\MySQL Server 8.0</li></ul><h3 id="11-centOS-7-安装MySQL"><a href="#11-centOS-7-安装MySQL" class="headerlink" title="11. centOS 7 安装MySQL"></a>11. centOS 7 安装MySQL</h3><ul><li>详见博客：<a href="https://blog.csdn.net/a774630093/article/details/79270080">CentOS7 64位安装mysql教程，亲测完美</a></li></ul><h3 id="12-centOS-7-执行sql文件"><a href="#12-centOS-7-执行sql文件" class="headerlink" title="12. centOS 7 执行sql文件"></a>12. centOS 7 执行sql文件</h3><ul><li>详见博客：<a href="https://www.cnblogs.com/kaishi/p/7575301.html">Centos 执行sql文件</a></li></ul><h3 id="13-JDBC数据库驱动的下载、安装与连接"><a href="#13-JDBC数据库驱动的下载、安装与连接" class="headerlink" title="13. JDBC数据库驱动的下载、安装与连接"></a>13. JDBC数据库驱动的下载、安装与连接</h3><ul><li>详见博客：<a href="https://blog.csdn.net/pan_junbiao/article/details/86626741">JDBC数据库驱动的下载、安装与连接</a></li></ul><h3 id="14-IDEA-Database报红色下划线"><a href="#14-IDEA-Database报红色下划线" class="headerlink" title="14. IDEA Database报红色下划线"></a>14. IDEA Database报红色下划线</h3><ul><li><p>详见博客：<a href="https://blog.csdn.net/a328062954/article/details/105312090">IDEA Database报红色下划线</a></p></li><li><p><strong>注意使用Test conection，一般可以按照提示解决问题</strong></p></li><li><p>修改了这里的文件，也要注意修改application.yml&#x2F;application-dev.yml里关于数据库的设置，特别是password</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debug </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Pandas</title>
      <link href="/2022/python-pandas/"/>
      <url>/2022/python-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DataFrame"><a href="#1-DataFrame" class="headerlink" title="1 DataFrame"></a>1 DataFrame</h1><h2 id="1-1-修改某一列数据"><a href="#1-1-修改某一列数据" class="headerlink" title="1.1 修改某一列数据"></a>1.1 修改某一列数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'col'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'col'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2-比较两列是否相等"><a href="#1-2-比较两列是否相等" class="headerlink" title="1.2 比较两列是否相等"></a>1.2 比较两列是否相等</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">]</span> <span class="token operator">==</span> df<span class="token punctuation">[</span><span class="token string">'col2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'no change'</span><span class="token punctuation">,</span> <span class="token string">'changed'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>df<span class="token punctuation">)</span>   col1  col2     result<span class="token number">0</span>  audi  audi  no change<span class="token number">1</span>  cars  bike    changed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-按某列条件检索行数据"><a href="#1-3-按某列条件检索行数据" class="headerlink" title="1.3 按某列条件检索行数据"></a>1.3 按某列条件检索行数据</h2><pre class="line-numbers language-pyth" data-language="pyth"><code class="language-pyth">lc.loc[lc[&quot;grade&quot;] &#x3D;&#x3D; &quot;B&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-4-检查某列是否存在"><a href="#1-4-检查某列是否存在" class="headerlink" title="1.4 检查某列是否存在"></a>1.4 检查某列是否存在</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">'A'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-5-索引与列互相转化"><a href="#1-5-索引与列互相转化" class="headerlink" title="1.5 索引与列互相转化"></a>1.5 索引与列互相转化</h2><ul><li>列 –&gt; 索引</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># column 改为 index</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>索引 –&gt; 列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-6-修改列顺序"><a href="#1-6-修改列顺序" class="headerlink" title="1.6 修改列顺序"></a>1.6 修改列顺序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token comment"># 0代表插入位置，'id'代表列名，df_id代表列数据</span>df<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span>df_id<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-7-采样随机样本"><a href="#1-7-采样随机样本" class="headerlink" title="1.7 采样随机样本"></a>1.7 采样随机样本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">DataFrame<span class="token punctuation">.</span>sample<span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> frac <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> replace <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token punctuation">,</span> weights <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> ignore_index <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token punctuation">)</span><span class="token comment"># 从目标轴采样随机样本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-8-loc按照名称选取，iloc按照索引选取"><a href="#1-8-loc按照名称选取，iloc按照索引选取" class="headerlink" title="1.8 loc按照名称选取，iloc按照索引选取"></a>1.8 loc按照名称选取，iloc按照索引选取</h2><h1 id="2-操作csv文件"><a href="#2-操作csv文件" class="headerlink" title="2 操作csv文件"></a>2 操作csv文件</h1><h2 id="2-1-读取csv"><a href="#2-1-读取csv" class="headerlink" title="2.1 读取csv"></a>2.1 读取csv</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data_df.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>index_col：将第一列变为index</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'1.csv'</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2-写入csv"><a href="#2-2-写入csv" class="headerlink" title="2.2 写入csv"></a>2.2 写入csv</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#index表示设定是否需要行索引，设定为FALSE表明不需要，就不会生成新的行索引</span><span class="token comment">#header表明是否需要列索引，设定为True（默认设置）表明需要，那么之前df的列标签就会保存。</span>data_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'data_df.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_PyTorch</title>
      <link href="/2022/python-pytorch/"/>
      <url>/2022/python-pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Pytorch教程"><a href="#0-Pytorch教程" class="headerlink" title="0 Pytorch教程"></a>0 Pytorch教程</h1><ul><li>视频教程：<a href="https://www.bilibili.com/video/BV1hE411t7RN?p=1">PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】</a></li></ul><h1 id="1-安装相关安装包"><a href="#1-安装相关安装包" class="headerlink" title="1 安装相关安装包"></a>1 安装相关安装包</h1><h2 id="1-1-安装NVIDA"><a href="#1-1-安装NVIDA" class="headerlink" title="1.1 安装NVIDA"></a>1.1 安装NVIDA</h2><ul><li>详见博客：<a href="https://blog.csdn.net/weixin_44493841/article/details/103827326">Windows10 NVIDIA 驱动程序安装</a></li></ul><h2 id="1-2-Linux安装Anaconda"><a href="#1-2-Linux安装Anaconda" class="headerlink" title="1.2 Linux安装Anaconda"></a>1.2 Linux安装Anaconda</h2><ul><li>详见博客：<a href="https://zhuanlan.zhihu.com/p/349345180">Linux安装anaconda</a></li></ul><h2 id="1-3-在conda环境中安装Pytorch"><a href="#1-3-在conda环境中安装Pytorch" class="headerlink" title="1.3 在conda环境中安装Pytorch"></a>1.3 在conda环境中安装Pytorch</h2><p>从官网选择对应的版本，复制下载指令即可，官网链接：</p><p><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p><h1 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2 常用指令"></a>2 常用指令</h1><h2 id="2-1-一般指令"><a href="#2-1-一般指令" class="headerlink" title="2.1 一般指令"></a>2.1 一般指令</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#矩阵乘法</span>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> mat2<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> → Tensor<span class="token comment">#矩阵转置</span>torch<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span> → Tensortensor<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#生成单元矩阵，对角线为1，其余为0的矩阵</span>torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> → Tensor<span class="token comment">#设置和运行 CUDA 操作</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>tensor<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#把tensor_1扩展成size的形状</span>tensor_1<span class="token punctuation">.</span>expand<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token comment">#把tensor_1扩展成和tensor_2一样的形状</span>tensor_1<span class="token punctuation">.</span>expand_as<span class="token punctuation">(</span>tensor_2<span class="token punctuation">)</span><span class="token comment">#修改tensor形状</span><span class="token comment">#view不会改变自身数据，返回的新的tensor与源tensor共享内存，即更改其中一个，另外一个也会跟着改变。</span>tensor<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>tensor<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 把tensor变为一维结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-查看GPU信息"><a href="#2-2-查看GPU信息" class="headerlink" title="2.2 查看GPU信息"></a>2.2 查看GPU信息</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#cuda是否可用；</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回gpu数量；</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>get_device_name<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#返回gpu名字，设备索引默认从0开始；</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>current_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回当前设备索引；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-保存-x2F-加载模型，torch-save-x2F-load"><a href="#2-3-保存-x2F-加载模型，torch-save-x2F-load" class="headerlink" title="2.3 保存&#x2F;加载模型，torch.save()&#x2F;load()"></a>2.3 保存&#x2F;加载模型，torch.save()&#x2F;load()</h2><p>将优化器参数、损失值等一同保存下来，然后在恢复模型的时候连同其它参数一起恢复，示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">,</span> <span class="token string">'model.pt'</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">'epoch'</span><span class="token punctuation">:</span> epoch<span class="token punctuation">,</span>            <span class="token string">'model_state_dict'</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'optimizer_state_dict'</span><span class="token punctuation">:</span> optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'loss'</span><span class="token punctuation">:</span> loss<span class="token punctuation">,</span>    <span class="token string">'metrics'</span><span class="token punctuation">:</span> metrics            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> model_save_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>加载模型</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">checkpoint <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_save_path<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'model_state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'optimizer_state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>epoch <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span>loss <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span>metrics <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'metrics'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-模型加速，torch-backends-cudnn-benchmark-x3D-True"><a href="#2-4-模型加速，torch-backends-cudnn-benchmark-x3D-True" class="headerlink" title="2.4 模型加速，torch.backends.cudnn.benchmark&#x3D;True"></a>2.4 模型加速，torch.backends.cudnn.benchmark&#x3D;True</h2><p>让程序在开始时花费一点额外时间，为整个网络的每个卷积层搜索最适合它的卷积实现算法，进而实现网络的加速。适用场景是网络结构固定（不是动态变化的），网络的输入形状（包括 batch size，图片大小，输入的通道）是不变的，其实也就是一般情况下都比较适用。反之，如果卷积层的设置一直变化，将会导致程序不停地做优化，反而会耗费更多的时间。</p><ul><li>具体详情见博客：<a href="https://zhuanlan.zhihu.com/p/73711222">torch.backends.cudnn.benchmark ?!</a></li></ul><h1 id="3-重要函数"><a href="#3-重要函数" class="headerlink" title="3 重要函数"></a>3 重要函数</h1><h2 id="3-1-torch-svd-A"><a href="#3-1-torch-svd-A" class="headerlink" title="3.1 torch.svd(A)"></a>3.1 torch.svd(A)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算矩阵或矩阵批次的奇异值分解input，奇异值按降序返回</span>torch<span class="token punctuation">.</span>svd<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> some<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>Tensor<span class="token punctuation">,</span> Tensor<span class="token punctuation">,</span> Tensor<span class="token punctuation">)</span>U<span class="token punctuation">,</span>S<span class="token punctuation">,</span>V<span class="token operator">=</span>torch<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>A<span class="token punctuation">)</span>。 <span class="token comment">#返回对形如 n×m的实矩阵 A 进行奇异值分解的结果，使得 A=USV^T。 U 为左奇异向量，形状为 n×n，S 为特征值矩阵，形状为 n×m ，V 为右奇异向量，形状为 m×m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>基于SVD的主成分分析代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### PCA降维 ###</span><span class="token keyword">def</span> <span class="token function">PCA_svd</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># X为输入数，n*m n维m个样本</span>    <span class="token comment"># k为目标维度数</span>    X_mean <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">.</span>double<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    A <span class="token operator">=</span> X <span class="token operator">-</span> X_mean<span class="token punctuation">.</span>expand_as<span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token comment"># 对所有样本中心化</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    U<span class="token punctuation">,</span>S<span class="token punctuation">,</span>V <span class="token operator">=</span> torch<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>t<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 对矩阵A做特征值分解（奇异值分解），注意此处的A进行的转置</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span>V<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">)</span>  <span class="token comment"># 返回新的特征矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-torch-mean-input-dim-keepdim-x3D-false"><a href="#3-2-torch-mean-input-dim-keepdim-x3D-false" class="headerlink" title="3.2 torch.mean(input, dim, keepdim&#x3D;false)"></a>3.2 torch.mean(input, dim, keepdim&#x3D;false)</h2><ul><li><strong>输入</strong>( <a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor"><em>Tensor</em></a> ) – 输入张量。</li><li><strong>dim</strong> ( <a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <em>tuple of python:ints</em> ) – 要减少的一个或多个维度。</li><li><strong>keepdim</strong> ( <a href="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a> ) – 输出张量是否<code>dim</code>保留。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0163</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.5085</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.4599</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.1807</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-unsqueeze-与squeeze"><a href="#3-3-unsqueeze-与squeeze" class="headerlink" title="3.3 unsqueeze()与squeeze()"></a>3.3 unsqueeze()与squeeze()</h2><p>unsqueeze()：    在指定位置增加一个维度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a的size为(2，3)</span>a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># a.unsqueeze(-2)</span><span class="token comment"># a的size为(2,1,3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>squeeze()：在指定位置删除一个长度为1的维度，注意长度一定要为1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a的size为(1, 2，3)</span>a<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 下标从0开始</span><span class="token comment"># a的size为(2,3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-4-arange-start-end-step"><a href="#3-4-arange-start-end-step" class="headerlink" title="3.4 arange(start, end, step)"></a>3.4 arange(start, end, step)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.5000</span><span class="token punctuation">,</span>  <span class="token number">2.0000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-tensor乘法广播机制"><a href="#3-5-tensor乘法广播机制" class="headerlink" title="3.5 tensor乘法广播机制"></a>3.5 tensor乘法广播机制</h2><p><strong>广播的执行过程：</strong></p><p>1.如果维度个数不同，则在维度较少的左边补1，使得维度的个数相同。</p><p>2.各维度的维度大小不同时，如果有维度为1的，直接将该维拉伸至维度相同。</p><h2 id="3-6-enisum"><a href="#3-6-enisum" class="headerlink" title="3.6 enisum"></a>3.6 enisum</h2><p><img src="http://img.fdchen.host//enisum.png" alt="image-20210626003645988"></p><p><img src="http://img.fdchen.host//enisum_%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.png" alt="image-20210626003925510"></p><h2 id="3-7-randint-low-x3D-0-high-size"><a href="#3-7-randint-low-x3D-0-high-size" class="headerlink" title="3.7 randint(low&#x3D;0,high, size)"></a>3.7 randint(low&#x3D;0,high, size)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-8-torch-backends-cudnn-deterministic"><a href="#3-8-torch-backends-cudnn-deterministic" class="headerlink" title="3.8 torch.backends.cudnn.deterministic"></a>3.8 torch.backends.cudnn.deterministic</h2><p>torch.backends.cudnn.deterministic是啥？顾名思义，将这个 flag 置为True的话，每次返回的卷积算法将是确定的，即默认算法。如果配合上设置 Torch 的随机种子为固定值的话，应该可以保证每次运行网络的时候相同输入的输出是固定的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置随机数种子</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 保证每次结果一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-9-torch-optim"><a href="#3-9-torch-optim" class="headerlink" title="3.9 torch.optim"></a>3.9 torch.optim</h2><p>torch.optim是一个实现各种优化算法的包，实质就是更新权重。</p><ul><li><p>如何使用优化器</p><p>要使用，torch.optim您必须构造一个优化器对象，该对象将保存当前状态并根据计算出的梯度更新参数。</p></li><li><p>构建它<br>要构造一个ptimizer你必须给它一个包含Variable要优化的参数（都应该是s）的迭代。然后，您可以指定特定于优化器的选项，例如学习率、权重衰减等。示</p></li></ul><h2 id="3-10-tensor拒绝计算整数的平均数，需要用到double-函数"><a href="#3-10-tensor拒绝计算整数的平均数，需要用到double-函数" class="headerlink" title="3.10 tensor拒绝计算整数的平均数，需要用到double()函数"></a>3.10 tensor拒绝计算整数的平均数，需要用到double()函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">.</span>double<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-11-可以作为占位符接收函数不需要的返回值"><a href="#3-11-可以作为占位符接收函数不需要的返回值" class="headerlink" title="3.11 _可以作为占位符接收函数不需要的返回值"></a>3.11 _可以作为占位符接收函数不需要的返回值</h2><h1 id="4-nn的相关使用"><a href="#4-nn的相关使用" class="headerlink" title="4 nn的相关使用"></a>4 nn的相关使用</h1><h2 id="4-1-item"><a href="#4-1-item" class="headerlink" title="4.1 item()"></a>4.1 item()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># item()返回单个值（标量）</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获得loss的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-detach"><a href="#4-2-detach" class="headerlink" title="4.2 detach()"></a>4.2 detach()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># detach()阻断反向传播，返回值仍为tensor</span>gpu_info<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#返回tensor，仍在gpu上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-3-cpu"><a href="#4-3-cpu" class="headerlink" title="4.3 cpu()"></a>4.3 cpu()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># cpu()将变量放在cpu上，仍为tensor</span>gpu_info<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>gpu_info<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-4-设置提前停止"><a href="#4-4-设置提前停止" class="headerlink" title="4.4 设置提前停止"></a>4.4 设置提前停止</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置提前停止，patience代表忍受该指标多少个step不变化，当忍无可忍时，调整学习率。注，可以不是连续的n次。</span>early_stopping <span class="token operator">=</span> EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span>self<span class="token punctuation">.</span>args<span class="token punctuation">.</span>patience<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-5-checkpoints"><a href="#4-5-checkpoints" class="headerlink" title="4.5 checkpoints"></a>4.5 checkpoints</h2><p>保存和加载用于推理或恢复训练的通用检查点模型有助于从上次停止的地方开始。保存一般检查点时，您必须保存的不仅仅是模型的 state_dict。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>args<span class="token punctuation">.</span>checkpoints<span class="token punctuation">,</span> setting<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-6-AMP"><a href="#4-6-AMP" class="headerlink" title="4.6 AMP"></a>4.6 AMP</h2><p>自动混合精度训练，预示着Tensor的dtype类型会自动变化，也就是框架按需自动调整tensor的dtype（其实不是完全自动，有些地方还是需要手工干预）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在训练最开始之前实例化一个GradScaler对象</span>scaler <span class="token operator">=</span> GradScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> epochs<span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">input</span><span class="token punctuation">,</span> target <span class="token keyword">in</span> data<span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 前向过程(model + loss)开启 autocast</span>        <span class="token keyword">with</span> autocast<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token comment"># Scales loss. 为了梯度放大.</span>        scaler<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># scaler.step() 首先把梯度的值unscale回来.</span>        <span class="token comment"># 如果梯度的值不是 infs 或者 NaNs, 那么调用optimizer.step()来更新权重,</span>        <span class="token comment"># 否则，忽略step调用，从而保证权重不更新（不被破坏）</span>        scaler<span class="token punctuation">.</span>step<span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span>        <span class="token comment"># 准备着，看是否要增大scaler</span>        scaler<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-7-permute"><a href="#4-7-permute" class="headerlink" title="4.7 permute()"></a>4.7 permute()</h2><p>**Tensor.permute(a,b,c,d, …)**：permute函数可以对任意高维矩阵进行转置&#x2F;换位，但没有 torch.permute() 这个调用方式， 只能 Tensor.permute()：</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">&gt;&gt;&gt; torch.randn(2,3,4,5).permute(3,2,0,1).shapetorch.Size([5, 4, 2, 3])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-8-transpose-input-dim0-dim1"><a href="#4-8-transpose-input-dim0-dim1" class="headerlink" title="4.8 transpose(input, dim0, dim1)"></a>4.8 transpose(input, dim0, dim1)</h2><p>转置&#x2F;换位tensor中指定两个维度dim0 和 dim1的数据</p><h2 id="4-9-nn-Conv1d"><a href="#4-9-nn-Conv1d" class="headerlink" title="4.9 nn.Conv1d()"></a>4.9 nn.Conv1d()</h2><p>卷积操作起源于图像处理，图像处理的数据一般为[batch_size, num_channel, height, width]</p><p>因此，通道数需要放在第二个维度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义</span>self<span class="token punctuation">.</span>tokenConv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv1d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>c_in<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>d_model<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span>padding<span class="token punctuation">,</span> padding_mode<span class="token operator">=</span><span class="token string">'circular'</span><span class="token punctuation">)</span><span class="token comment"># 使用</span><span class="token comment"># x的结构为 [batch_size, len, dims]</span><span class="token comment"># 此处需要获取feed_de的序列，因而先转置，以实现对len序列进行一维卷积，最后恢复原始数据维度排布</span>x <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenConv<span class="token punctuation">(</span>x<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-10-nn-init-kaiming-normal"><a href="#4-10-nn-init-kaiming-normal" class="headerlink" title="4.10 nn.init.kaiming_normal_"></a>4.10 nn.init.kaiming_normal_</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用正态分布数据初始化模型参数</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_in'</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">'leaky_relu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-11-nn-embedding"><a href="#4-11-nn-embedding" class="headerlink" title="4.11 nn.embedding()"></a>4.11 nn.embedding()</h2><p>一个简单的查找表，用于存储固定字典和大小的embedding。</p><p>参数：</p><ul><li>**num_ embedding ** ( <a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> ) –embedding字典的大小</li><li><strong>embedding _dim</strong> (<a href="https://docs.python.org/3/library/functions.html#int"> <em>int</em></a> ) – 每个embedding向量的大小</li><li><strong>padding_idx</strong> ( <a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>,</em> <em>optional</em> ) – 如果指定，则条目<code>padding_idx</code>不影响梯度；因此，嵌入向量 at<code>padding_idx</code>在训练期间不会更新，即它保持为固定的“垫”。对于新构造的Embedding，嵌入向量 at<code>padding_idx</code>将默认为全零，但可以更新为另一个值以用作填充向量。</li><li><strong>max_norm</strong> ( <a href="https://docs.python.org/3/library/functions.html#float"><em>float</em></a> <em>,</em> <em>optional</em> ) – 如果给定，则范数大于的每个嵌入向量都<code>max_norm</code> 被重新归一<strong>化为</strong>范数<code>max_norm</code>。</li><li><strong>norm_type</strong> ( <a href="https://docs.python.org/3/library/functions.html#float"><em>float</em></a> <em>,</em> <em>optional</em> ) – 要为<code>max_norm</code>选项计算的 p 范数的 p 。默认<code>2</code>.</li><li><strong>scale_grad_by_freq</strong> ( <em>boolean</em> <em>,</em> <em>optional</em> ) – 如果给定，这将按小批量中单词频率的倒数来缩放梯度。默认<code>False</code>.</li><li><strong>sparse</strong> ( <a href="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a> <em>,</em> <em>optional</em> ) – 如果<code>True</code>，梯度 wrt<code>weight</code>矩阵将是一个稀疏张量。有关稀疏梯度的更多详细信息，请参阅注释。</li></ul><p>变量：</p><p><strong>~Embedding.weight</strong> (<a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor"><em>Tensor</em></a>) – 可学习权重模块的大小</p><h2 id="4-12-nn-parameter-Parameter"><a href="#4-12-nn-parameter-Parameter" class="headerlink" title="4.12 nn.parameter.Parameter()"></a>4.12 nn.parameter.Parameter()</h2><p>一种被视为模块参数的tensor。</p><p>参数：</p><ul><li><strong>data</strong>( <a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor"><em>Tensor</em></a> ) –参数张量。</li><li><strong>requires_grad</strong> ( <a href="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a> <em>,</em> <em>optional</em> ) – 如果参数需要梯度。</li></ul><h2 id="4-13-self-register-buffer-‘pe’-pe"><a href="#4-13-self-register-buffer-‘pe’-pe" class="headerlink" title="4.13 self.register_buffer(‘pe’, pe)"></a>4.13 self.register_buffer(‘pe’, pe)</h2><p>1.定义parameter和buffer都只需要传入Tensor即可。也不需要将其转成gpu,这是因为，当网络进行.cuda时候，会自动将里面的层的参数，buffer等转换成相应的GPU上。</p><p>2.self.register_buffer可以将tensor注册成buffer,在forward中使用self.mybuffer,而不是self.mybuffer_tmp</p><p>3.<strong>网络存储时也会将buffer存下，当网络load模型时，会将存储的模型的buffer也进行赋值。</strong></p><p><strong>4.buffer的更新在forward中，optim.step只能更新nn.parameter类型的参数。</strong></p><h2 id="4-14-dropout"><a href="#4-14-dropout" class="headerlink" title="4.14 dropout"></a>4.14 dropout</h2><p>在训练期间，使用来自伯努利分布的样本，在概率为<code>p</code>下随机将输入tensor的某些元素归零。每个通道将在每次前转呼叫中独立归零。</p><p>一种用于正则化和防止神经元协同适应的有效技术，用于抑制过拟合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义</span>self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token comment"># 使用</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-15-embedding"><a href="#4-15-embedding" class="headerlink" title="4.15 embedding()"></a>4.15 embedding()</h2><p>词嵌入在 pytorch 中非常简单，只需要调用 <code>torch.nn.Embedding(m, n)</code> 就可以了，m 表示单词的总数目，n 表示词嵌入的维度，其实词嵌入就相当于是一个大矩阵，矩阵的每一行表示一个单词.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token comment"># 定义词嵌入</span>embeds <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 2 个单词，维度 5</span><span class="token comment"># 得到词嵌入矩阵</span>embeds<span class="token punctuation">.</span>weightParameter containing<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1.3426</span>  <span class="token number">0.7316</span> <span class="token operator">-</span><span class="token number">0.2437</span>  <span class="token number">0.4925</span> <span class="token operator">-</span><span class="token number">0.0191</span><span class="token operator">-</span><span class="token number">0.8326</span>  <span class="token number">0.3367</span>  <span class="token number">0.2135</span>  <span class="token number">0.5059</span>  <span class="token number">0.8326</span><span class="token punctuation">[</span>torch<span class="token punctuation">.</span>FloatTensor of size 2x5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过 <code>weight</code> 得到了整个词嵌入的矩阵，注意，</p><ol><li><strong>这个矩阵是一个可以改变的 parameter，在网络的训练中会不断更新；</strong></li><li><strong>同时词嵌入的数值可以直接进行修改，比如我们可以读入一个预训练好的词嵌入等等。</strong></li></ol><p>通俗来说，如果是不读入预训练的词嵌入，nn.embedding()相当于把one-hot编码转换为低维向量，这个向量就称为嵌入，就是仅仅根据one-hot编码信息得出，包含的是顺序&#x2F;位置信息，以方便用表示每个元素(one-hot维度太大)。</p><h2 id="4-16-自然指数为底的对数，-log"><a href="#4-16-自然指数为底的对数，-log" class="headerlink" title="4.16 自然指数为底的对数，.log()"></a>4.16 自然指数为底的对数，.log()</h2><h2 id="4-17-获取Parameter的tesnor，Parameter-data"><a href="#4-17-获取Parameter的tesnor，Parameter-data" class="headerlink" title="4.17 获取Parameter的tesnor，Parameter.data"></a>4.17 获取Parameter的tesnor，Parameter.data</h2><h1 id="5-torch-tensor"><a href="#5-torch-tensor" class="headerlink" title="5 torch.tensor"></a>5 torch.tensor</h1><h2 id="5-1-转置-tensor-t"><a href="#5-1-转置-tensor-t" class="headerlink" title="5.1 转置 tensor.t()"></a>5.1 转置 tensor.t()</h2><h2 id="5-2-基于列向量生成对角矩阵-torch-diag-embed-tensor"><a href="#5-2-基于列向量生成对角矩阵-torch-diag-embed-tensor" class="headerlink" title="5.2 基于列向量生成对角矩阵 torch.diag_embed(tensor)"></a>5.2 基于列向量生成对角矩阵 torch.diag_embed(tensor)</h2><h2 id="5-3-求范数-torch-norm"><a href="#5-3-求范数-torch-norm" class="headerlink" title="5.3 求范数 torch.norm()"></a>5.3 求范数 torch.norm()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>tensor <span class="token keyword">as</span> tensor a <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#建立tensor</span>a2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment">#默认求2范数</span>a1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">#指定求1范数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔_服创总结</title>
      <link href="/2021/sui-bi-fu-chuang-zong-jie/"/>
      <url>/2021/sui-bi-fu-chuang-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>纪念人生中唯一一次服创</p><p>结果：全国三等奖</p></blockquote><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>服创（大学生服务外包创新创业大赛），应该是第一次作为队长带领伙伴们参加比赛，可以说压力还是有点大——怕没能担好这个责任，没能带大家拿下好成绩。最后还确实出现了失误，而且队内气氛也没有调节好，即便到了最后还是感觉交流有点少（也可能是这个原因，导致我自己也没有太多难忘的回忆，更多是内疚和自责），等等问题。下面重点还是以反思为主。</p><span id="more"></span><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p>服创准备的话，还真不好说，毕竟是“命题作文”，只能说平时多积累一些技能罢了。</p><p>如果是做应用，队内成员就应该提前了解一下前端(React, Vue等)或者后端框架(SpringBoot, Django等)，避免需要花时间去学习框架，这个时间还挺长的。</p><p>而且，最好是去认识一下艺术学院的设计高手，注意，一定是要设计高手，不是每个艺术学院的都可以设计一个很好的UI。</p><h1 id="2-选题"><a href="#2-选题" class="headerlink" title="2. 选题"></a>2. 选题</h1><p>服创是“命题作文”，所以涉及到自己选题，选题这个大体方向是不要选太简单也不要选太难。太简单的上限低，不能冲击很高的奖项。太难的可能做不出来。除此之外，可以参考团队成员的兴趣，也建议选择可创新点多的，便于发挥。</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><h2 id="3-1-小组讨论"><a href="#3-1-小组讨论" class="headerlink" title="3.1 小组讨论"></a>3.1 小组讨论</h2><ol><li>思想交流不够</li><li>队员主人翁意识不够，过于个人掌控</li><li>方向性方案应该集体讨论决定</li><li>以尽量打开讨论的氛围的目的，方法不唯一，或是分为三三两两讨论，或者自由讨论</li><li>作为组长，应该真心对待每一个组员，多发现优点，多用赞美，少用批评</li></ol><h2 id="3-2-系统设计"><a href="#3-2-系统设计" class="headerlink" title="3.2 系统设计"></a>3.2 系统设计</h2><ol><li>系统界面注意语言统一，不要中英文混杂</li><li>系统功能的设计应该从赛题出发，从目的出发，目的导向型。以数据分析为例，应该从可以提供什么帮助的角度出发，探索可以对哪些数据进行分析。而不是有哪些数据就分析哪些。</li></ol><h1 id="4-实施"><a href="#4-实施" class="headerlink" title="4. 实施"></a>4. 实施</h1><ol><li>解决方案迭代慢</li><li>进度管理失效</li><li>成员沟通不够</li></ol><h1 id="5-文档材料"><a href="#5-文档材料" class="headerlink" title="5. 文档材料"></a>5. 文档材料</h1><ol><li>重要概要性材料应该集思广益</li><li>不管什么文档，一定要借鉴其他人文档，去其糟粕，取其精华</li><li>注意用图表，增加可读性与理解</li><li>先写企业要求的材料，再写组委会要求的材料，原因是组委会要求的材料可以从企业材料中提炼</li></ol><h2 id="5-1-概要介绍文档"><a href="#5-1-概要介绍文档" class="headerlink" title="5.1 概要介绍文档"></a>5.1 概要介绍文档</h2><ol><li>尤为重要，应当包含所有的亮点，注意多用图展示，总括的图包括技术图，功能结构图等。</li><li>内容上包括项目背景、研究现状、技术方案等。</li><li>创新点和亮点注意用语高级，如智能协同、信息同步等，尽量避免使用朴实无华的亮点描述。</li></ol><h1 id="6-整体而言"><a href="#6-整体而言" class="headerlink" title="6. 整体而言"></a>6. 整体而言</h1><ol><li>注意会议记录</li><li>注重时间管理</li></ol><h1 id="7-区域赛决赛答辩"><a href="#7-区域赛决赛答辩" class="headerlink" title="7. 区域赛决赛答辩"></a>7. 区域赛决赛答辩</h1><h2 id="7-1-PPT"><a href="#7-1-PPT" class="headerlink" title="7.1 PPT"></a>7.1 PPT</h2><ol><li>演示视频最好缩短至3分钟左右</li><li>区域赛答辩，重点是查看项目是否真的完成。对于算法类，核心关注点是核心技术，对于项目类，核心关注点是项目是否完成。所以，算法类注意熟悉技术的各个细节，项目类最好是将系统部署至服务器，并且发布。</li><li>最后一定要总结实现的功能、创新点、价值等关键信息，</li></ol><h2 id="7-2-答辩"><a href="#7-2-答辩" class="headerlink" title="7.2 答辩"></a>7.2 答辩</h2><ol><li>答辩第一遍讲稿可以是提纲，也可以是讲稿，总之不能直接背记，应该反复模拟答辩，然后逐步修改讲稿</li><li>深入理解自己的创新，哪些地方超越了赛题，在答辩或者回答的过程中，可以不断有意无意地提到</li><li>回答的套路：你好老师，这个问题由我回答，·······(就问题回答的同时适当延展)，感谢评委老师的提问，我的回答不知道是否让您满意。注意每个问题至少20-40秒。</li><li>不要逞强，承认不足，感谢指点，不反问评委老师，可以说后续深入思考</li><li>答辩时站直，注意精气神</li><li>每个问题都注意展示自己的亮点和努力</li><li>项目的算法、数据、设计等部分，可以分人准备，要相信队友</li><li>多用数据和图标展示内容</li><li>可以用设问引起听众注意</li><li>团队成员简单介绍即可，可以放在开始部分</li><li>答辩看重个人魅力，一定要自信向上，以及整个团队成员的魅力</li></ol><h2 id="7-3-讲稿"><a href="#7-3-讲稿" class="headerlink" title="7.3 讲稿"></a>7.3 讲稿</h2><p>各位评委老师，各位志愿者同学，下午好，我们是来自XX大学的XXXXX团队，指导老师是XXX老师，很高兴在这里给各位评委老师展示我们的项目成果——速寻智能救援系统，我们的理念是用最短的时间找到TA。<br>首先请允许我介绍我们的团队成员，我是XXX，我们的团队成员还有：<br>XXX<br>(半鞠躬+老师们好)</p><p>以下我将从五个方面介绍我们的项目。</p><p>据统计，每年都有众多的走失事件发生，而成功找回的概率不尽如人意，往往时间越长找到的希望越小。</p><p>我们项目的目的是搭建一个智能救援的公益平台，辅助救援走失者，把握救援的黄金72小时。</p><p>首先我们先研究目前救援行动存在哪些痛点，主要的问题在于救援队员大多都是兼职志愿者，并且缺少专业的智能化平台，导致了以上高 难 少 低的四个痛点。那我们如何能解决这四个问题？</p><p>在提出我们的解决方案之前，我想通过一个视频让各位老师了解速寻系统的概貌。</p><p>接下来，我将对我们的解决方案进行详细解释。依据四大痛点，我们团队设计并研发了速寻智能救援系统，通过三大步骤和五大功能，助力救援行动的开展。后面，我将对这五个功能进行详细介绍。</p><p>第一点，救援启动快，我们通过公众号给家属提供快捷报案的途径，从事件申报到任务启动与级别判定，再到通过短信和APP通知附近队员，整个过程不到2分钟。我们还建立了易走失人员信息库即事件预申报，进一步加速救援启动。</p><p>第二点，信息协同高，我们提供统一的数据管理平台，通过APP、公众号、网页，供不同角色共享信息，而且，我们还提供将走失者信息网页通过二维码的方式向周围群众传播，群众可以使用人脸识别功能提交疑似目标线索。</p><p>第三点，智能辅助多，其一，我们提供集成了多种准确率高的人脸比对算法，并支持快速配置，其二，我们支持各类救援资源自动调取，供队员使用，其三，我们集成了高德地图接口组件，支持位置标记与地图导航。</p><p>第四点，过程跟踪细，从行动开始到结束，整个过程中的信息都详细记录，并支持一键导出，特别是当救援队报警求助时，可以将信息提交给警方，帮助警方寻找。</p><p>第五点，数据分析全，首先，我们支持依据事件发生特征，如走失时间、走失地点等，分析之后，帮助在事件高发期和高发地点进行宣传教育，预防事件发生。其二就是任务统计，加以案例分析可以帮助指挥员决策提高救援效率与成功率。</p><p>接下来，我将从业务架构，技术架构，实施路径三个方面阐述我们速寻智能救援系统的实现过程。</p><p>如图，是整个系统的业务架构，分为服务层、核心应用层、和功能模块层三层架构。</p><p>停2秒</p><p>其二，技术架构，包括前端，应用服务层和数据层，前端主要使用React与React-Native框架，后端使用Django框架。</p><p>其三，我们严格按照软件工程的流程进行项目研发，最后还进行了情景模拟以对系统功能和性能进行实际检验。</p><p>最后，我想用速寻系统研发的初衷来总结我们的关键创新点。当了解到走失事件频发的严峻状况时，我们不禁思考，科技发展至此，社会进步至此，我们该建立怎样的救助体系，为那些易走失的老人孩子构建一个安全的社会，一个走到哪里都能走回家的社会？</p><p>我们的回答是，第一，集腋成裘，聚沙成塔，汇聚社会每一份力量；第二，注重信息收集，分类汇总所有可能有用的信息，不放过任何一个机会；第三，借助智能工具，尽可能地减少不必要的时间成本；第四，不断总结反思，提供可视化数据分析，辅助指挥员决策。</p><p>以上就是我们的展示内容，感谢各位老师的倾听。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
            <tag> 服创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Debug</title>
      <link href="/2021/python-debug/"/>
      <url>/2021/python-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="1-JSON读取大量数据错误：JSONDecodeError-Extra-data-line-2-column-1或者ValueError-Extra-data"><a href="#1-JSON读取大量数据错误：JSONDecodeError-Extra-data-line-2-column-1或者ValueError-Extra-data" class="headerlink" title="1. JSON读取大量数据错误：JSONDecodeError: Extra data: line 2 column 1或者ValueError: Extra data"></a>1. JSON读取大量数据错误：JSONDecodeError: Extra data: line 2 column 1或者ValueError: Extra data</h3><ul><li>可以逐行读取，然后再处理成列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># 由于文件中有多行，直接读取会出现错误，因此一行一行读取</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"papers.json"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>papers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    papers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>papers<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-‘gbk’-codec-can’t-decode-byte-0xbf-in-position-2-illegal-multibyte-sequence"><a href="#2-‘gbk’-codec-can’t-decode-byte-0xbf-in-position-2-illegal-multibyte-sequence" class="headerlink" title="2. ‘gbk’ codec can’t decode byte 0xbf in position 2: illegal multibyte sequence"></a>2. ‘gbk’ codec can’t decode byte 0xbf in position 2: illegal multibyte sequence</h3><ul><li>在打开文本时候，可以指明打开方式：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-连接mysql数据库报错-init-takes-1-positional-argument-but-5-were-given"><a href="#3-连接mysql数据库报错-init-takes-1-positional-argument-but-5-were-given" class="headerlink" title="3. 连接mysql数据库报错__init__() takes 1 positional argument but 5 were given"></a>3. 连接mysql数据库报错__init__() takes 1 positional argument but 5 were given</h3><ul><li>把连接语句修改成如下</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">db<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>dbhost<span class="token punctuation">,</span>user<span class="token operator">=</span>dbuser<span class="token punctuation">,</span>password<span class="token operator">=</span>dbpass<span class="token punctuation">,</span>database<span class="token operator">=</span>dbname<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-PyTorch错误：The-“freeze-support-”-line-can-be-omitted-if-the-program-is-not-going-to-be-frozen-to-produce-an-executable"><a href="#4-PyTorch错误：The-“freeze-support-”-line-can-be-omitted-if-the-program-is-not-going-to-be-frozen-to-produce-an-executable" class="headerlink" title="4. PyTorch错误：The “freeze_support()” line can be omitted if the program is not going to be frozen to produce an executable."></a>4. PyTorch错误：The “freeze_support()” line can be omitted if the program is not going to be frozen to produce an executable.</h3><ul><li>将你要运行的代码块放到main函数中运行即可</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># your code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语_常用单词</title>
      <link href="/2021/ying-yu-chang-yong-dan-ci/"/>
      <url>/2021/ying-yu-chang-yong-dan-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="1-论文常用单词"><a href="#1-论文常用单词" class="headerlink" title="1. 论文常用单词"></a>1. 论文常用单词</h1><ol><li>investigate：v. 调查，研究</li><li>conversational：adj. 会话的</li><li>dialogue：n. 对话</li><li>corpora：n. 语料库</li><li>produce：v. 生产</li><li>response：v. 响应</li><li>autonomous：adj. 自主的</li><li>realistic：adj. 现实的</li><li>interaction：n. 交互</li><li>extend：v. 扩展<span id="more"></span></li><li>propose：v. 提出，建议</li><li>hierarchical：adj. 分层的；等级体系的</li><li>recurrent：adj. 复发的；周期性的，循环的</li><li>neural：adj. 神经的</li><li>demonstrate：vt. 证明；论证</li><li>state-of-the-art：adj. 最先进的；达到最高水准的</li><li>back-off：n. 退下；回退</li><li>embedding：v. 把（物体）嵌入</li><li>chatterbot：聊天机器人</li><li>process：n. 过程</li><li>deploy：vt. 配置；展开</li><li>hand-crafted：adj. 手工制作的</li><li>annotated：adj. 有注释的；带注解的</li><li>horde：n. 一大群，群</li><li>simulated：adj. 模拟的</li><li>utterance：n. 表达；说话</li><li>carry out：vt. 实行；实现</li><li>replicate：vt. 复制</li><li>emulate：vt. 仿真；模仿</li><li>off-line：adj. 离线的</li><li>inference：n. 推理</li><li>stochastically：adv. 随机地</li><li>in the long run&#x2F;term：从长远来看</li><li>yield：v. 出产；产出</li><li>adopt：vt. 采取；采用</li><li>substantially：adv. 大幅度</li><li>plausible：adj. 看似可信的；似是而非的</li><li>consecutive：adj. 连贯的</li><li>to the best of our knowledge：据我们所知</li><li>retrieve：vt. [计] 检索</li><li>subtitle：n. 副标题；说明或对白的字幕</li><li>interlocutor：n. 对话者</li><li>distribution：n. 分布；分配</li><li>arbitrary：adj. [数] 任意的</li><li>decompose：vt. 分解</li><li>analogous：adj. 类似的</li><li>preceding：adj. 在前的</li><li>token：n. 令牌</li><li>curse：n. 诅咒</li><li>curse of dimensionality：维数灾难</li><li>dimensionality：n. 维度</li><li>intractable：adj. 棘手的；难治的</li><li>dense：adj. 稠密的</li><li>means：n. 手段；方法</li><li>sparsity：n. 稀疏</li><li>a variety of：种种；各种各样的</li><li>compact：adj. 袖珍的</li><li>low-rank：低秩</li><li>corresponding：adj. 相应的；一致的</li><li>project：v. 设计；计划；预测</li><li>gradient：n. 梯度</li><li>track：n. 轨道；踪迹；vt. 追踪</li><li>iteratively：adv. 迭代地</li><li>interpret：v. 理解；解释</li><li>hyperbolic tangent：双曲正切</li><li>bidirectional：adj. 双向的；双向作用的</li><li>syntactic：adj. 句法的；语法的</li><li>reversing：v. 颠倒； 撤销</li><li>i.e.：abbr. 也就是，亦即（源自拉丁文id est），换而言之。</li><li>concatenation：n. 连结</li><li>temporal：adj. 暂时的</li><li>pool over：v. 池化</li><li>commonsense：adj. 常识的</li><li>infer：vt. 推断</li><li>variant：n. 变体；adj. 不同的</li><li>sheer：adj. 绝对的</li><li>semantic：adj. 语义的</li><li>tokenization：n. 令牌化；标记化；词语划分</li><li>co-dependencies：adj. 相互依存的</li><li>metrics：n. 度量；指标</li><li>perplexity：n. 困惑度</li><li>empirical：adj. 经验主义的</li><li>punctuation：n. 标点；标点符号</li><li>explicitly：adv. 明确地</li><li>turn-taking：轮流说话</li><li>multi-modal：adj. 多模式的</li><li>fine-grained：adj. 细粒度的</li><li>ultimately：adv. 最后</li><li>optimizing：v. 最佳化；优化</li><li>promising：adj. 有希望的</li><li>discriminate：vt. 区别；辨别</li><li>qualitative：adj. 定性的；性质上的</li><li>hyperparameter：超参</li><li>matric(es)：矩阵</li><li>orthogonal：adj. [数] 正交的</li><li>preliminary：adj. 初步的</li><li>fine-tuned：调整</li><li>deviation：n. 偏差</li><li>w.r.t. ： with respect to 的缩写。是关于；谈及，谈到的意思</li><li>convergence：n. [数] 收敛</li><li>gains：n. 收益</li><li>regime：n. 体制；制度</li><li>relatively：adv. 相当地；相对地</li><li>beam-search：n. [计] 定向搜索</li><li>approximate：adj. 近似的</li><li>generic：adj. 通用的</li><li>mutual：adj. 共同的</li><li>inherently：adv. 内在地；固有地</li><li>pronouns：n. 代词</li><li>implication：n. 含义；暗示</li><li>primarily favor model：主要支持模型</li><li>opposed：adj. 相反的</li><li>biased：adj. 有偏见的，片面的</li><li>correlate：vi. 关联</li><li>justify：vi. 证明</li><li>novel：adj. 新奇的；n. 小说</li><li>crucial：adj. 重要的</li><li>ingredient：n. 原料；要素；组成部分</li><li>monologue：n. 独白</li><li>empirical performance：实证性能</li><li>overwhelmed：adj. 被压倒的，被淹没的；不知所措的</li><li>colloquial：adj. 口语的</li><li>fruitful：adj. 富有成效的</li><li>modality：n. 形式，形态；模式</li><li>trick：n. 技巧； 诡计；恶作剧；窍门；花招</li><li>generalization：n. 泛化</li><li>minimize：vt. 使减到最少；vi. 最小化</li><li>by either：任何一方</li><li>sparsity：n. 稀疏</li><li>Residual Network：残差神经网络</li><li>shortcut connection：快捷连接</li><li>determiner：限定词</li><li>NP：名词性短语</li><li>context-free：上下文无关</li><li>dependant：n. 受扶养者</li><li>prepositional：adj. 介词的；前置词的</li><li>shuttle：n. 航天飞机</li><li>veteran：n. 老兵；老手</li><li>apposition：n. 并置，同格；同位语</li><li>new-fangled：adj. 新奇的</li><li>modifier：n. [助剂] 改性剂；[语] 修饰语</li><li>mutilated：adj. 残疾的</li><li>granular：adj. 颗粒的；细粒度的</li><li>derivative：n.导数</li><li>perplexity：n. 困惑度</li><li>benchmark：n. 基准</li><li>eigenvalue：n. [数] 特征值</li><li>magnitude：n. 大小；量级</li><li>recency：n. 新近；近因</li><li>clip：vt. 剪；剪掉</li><li>cliff：n. 悬崖</li><li>element-wise product：元素方式乘积（点乘）</li><li>fuzzy：adj. 模糊的</li><li>residual：adj. （数量）剩余的</li><li>recap：vt. 扼要重述</li><li>volatile：adj. [化学] 挥发性的；不稳定的</li><li>corrupted word：损坏的词</li><li>slope：n. 斜坡；斜率</li><li>by osmosis：潜移默化的</li><li>leaky：adj. 漏的</li><li>fidelity：n. 保真度；真实度</li><li>fertile：adj. 富饶的</li><li>versatile：adj. 通用的，多功能的</li><li>beam search：[计][电子]定向搜索</li><li>understudy：n. 候补演员；替补</li><li>flagship：n. 旗舰；（作定语）一流；佼佼者</li><li>prune：vt. 修剪</li><li>noise-contrastive estimation：噪音对比估计</li><li>unigram：n. 一元模型</li><li>Part-of-Speech tagging&#x2F;POS tagging：词性标注</li><li>dilated：adj. 扩大的；膨胀的；加宽的</li><li>weird：adj. 奇怪的</li><li>halve：v.减半（half的动词形式）</li><li>ResNet：Deep residual network，残差网络</li><li>hybrid：n. 杂种</li><li>morpheme：n. [语] 词素</li><li>suffix：n. 后缀</li><li>Hyphenated：adj. 带有连字符号的</li><li>state-of-the-art：adj. 最先进的</li><li>scratch：n. 擦伤；vt. 抓</li><li>premise：n. 前提</li><li>empiricists：n. 经验主义者</li><li>landscape：n. 风景</li><li>skew：adj. 偏的，歪斜的</li><li>truncate：v. 截断</li><li>uniform：n. 制服；校服；adj. 统一的</li><li>spiky：adj. 大钉一般的；尖刻的</li><li>explicit：adj. 明确的；显式的</li><li>collapse：v. （突然）倒塌</li><li>prompt：v. 提示，鼓励；促进；激起</li><li>engaging：adj. 迷人的；吸引人的</li><li>coreference resolution：指代消解</li><li>pronouns：n. 代词；[语] 代名词</li><li>spectre：n. 幽灵</li><li>constituency parsing：成分分析</li><li>donut：n. 炸面圈</li><li>anaphora：n. （语法）指代，前指</li><li>stuff：n. 东西；材料</li><li>pitcher：n. 投手；大水罐</li><li>contiguous：adj. 连续的</li><li>convergence：n. [数] 收敛</li><li>neat：adj. 灵巧的</li><li>recursive：adj. [数] 递归的</li><li>untie：vt. 解开</li><li>blink：vt. 眨眼</li><li>laundering：n. 洗烫</li><li>toxic：adj. 有毒的</li><li>annotate：vi. 注释</li><li>adversarial：adj. 对抗的</li><li>scramble：v. 扰乱</li><li>diagnostic：adj. 诊断的</li><li>discrete：adj. 离散的，不连续的</li><li>diploma：n. 毕业证书</li></ol><h1 id="2-刷题常用单词"><a href="#2-刷题常用单词" class="headerlink" title="2. 刷题常用单词"></a>2. 刷题常用单词</h1><ol><li>factor: 因子</li><li>bracket: 括号</li><li>odd: 奇数</li><li>even: 偶数</li><li>operator: 运算符</li><li>divide: 除</li><li>remainder: 余数</li><li>multiple: 乘</li><li>Greatest Common Divisor: 最大公约数</li><li>Least Common Multiple: 最小公倍数</li><li>prime number: 质数</li><li>factorial: 阶乘</li><li>archipelago: 群岛</li><li>permutation: 排列</li><li>fugitive: 逃犯，逃亡的</li><li>teleporting: 传送</li><li>decimal: 十进制</li><li>hexadecimal: 十六进制</li><li>octal: 八进制</li><li>volume: 体积</li><li>plural: 复数</li><li>gang: 帮派，群组</li><li>threshold: 阈值</li><li>ascending: 升序</li><li>descending: 降序</li><li>prentice: n. 徒弟，学徒</li><li>polynomials：n. [数] 多项式</li><li>coefficients：n. [数] 系数</li><li>exponents：n. 范例；n. [数] 指数</li><li>denote：vt. 表示，指示</li><li>seniority：n. 年长；级别</li><li>indices：n. 指数；目录（index的复数）</li><li>specified：adj. 规定的</li><li>radix：n. 根；[数] 基数</li><li>eulerian cycle：欧拉回路</li><li>traversal：n. [计] 遍历</li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_Shell编程</title>
      <link href="/2021/linux-shell-bian-cheng/"/>
      <url>/2021/linux-shell-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-教程"><a href="#1-教程" class="headerlink" title="1 教程"></a>1 教程</h1><ol><li>视频教程：<a href="https://www.bilibili.com/video/BV1dW411M7xL?p=58">尚硅谷Linux教程</a></li><li>文字教程：<a href="https://www.runoob.com/linux/linux-shell.html">Shell教程|菜鸟教程</a></li></ol><span id="more"></span><h1 id="2-补充"><a href="#2-补充" class="headerlink" title="2 补充"></a>2 补充</h1><h2 id="2-1-指令补充"><a href="#2-1-指令补充" class="headerlink" title="2.1 指令补充"></a>2.1 指令补充</h2><h3 id="2-1-1-条件测试："><a href="#2-1-1-条件测试：" class="headerlink" title="2.1.1 条件测试："></a>2.1.1 条件测试：</h3><ol><li><p>用途：测试特定的表达式是否成立，<strong>当条件成立时，命令执行后返回值为0</strong>，否则为其他值。</p></li><li><p>格式：</p><ul><li><p>test 条件表达式</p></li><li><p>[ 条件表达式 ]   <font color="red">注意，表达式左右有空格，方括号是必须有。</font></p></li></ul></li><li><p>常见的测试类型：</p><ul><li>测试文件状态</li><li>字符串比较</li><li>整数值比较</li><li>逻辑测试：<ul><li>格式：[ 表达式1 ] 逻辑符 [ 表达式2 ]</li><li>&amp;&amp;  <strong>表达式1正确，表达式2执行</strong></li><li>||   <strong>表达式1错误，表达式2执行</strong></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP_经典模型</title>
      <link href="/2021/nlp-jing-dian-mo-xing/"/>
      <url>/2021/nlp-jing-dian-mo-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下模型由CQU 高旻老师挑选，内容由本人总结，部分内容来源网络，侵删</p><p>模型实现项目github地址：<a href="https://github.com/CQU-MinGao-NLP/NLP-learning">https://github.com/CQU-MinGao-NLP/NLP-learning</a></p></blockquote><h1 id="1-N-gram模型"><a href="#1-N-gram模型" class="headerlink" title="1 N-gram模型"></a>1 N-gram模型</h1><ul><li><strong>基本思想</strong></li></ul><p>N-gram模型引入了马尔可夫假设，这是一种独立性假设，在这里说的是<strong>某一个词语出现的的概率只由其前面的n-1个词语所决定</strong>，这被称为<strong>n元语言模型</strong> ，即<strong>n-gram</strong>，当<strong>n&#x3D;2</strong>时，相应的语言模型就被称为是<strong>二元模型</strong>。</p><ul><li><strong>概率模型</strong></li></ul><p><strong>传统语言模型（无法计算）：</strong></p><p><img src="https://img-service.csdnimg.cn/img_convert/b3a7a64560e2566de32f98c059e96436.png" alt="传统语言模型"></p><p><strong>N-gram通用模型：</strong></p><p><img src="https://img-service.csdnimg.cn/img_convert/4280e3f82f4d36a83bc1848e2429a3b0.png" alt="N-gram概率模型"></p><p><strong>Bi-gram：</strong></p><p><img src="https://img-service.csdnimg.cn/img_convert/65f503d308aad5b996b4ad50791959e3.png" alt="Bi-gram概率模型"></p><p><strong>Tri-gram:</strong></p><p><img src="https://img-service.csdnimg.cn/img_convert/a29d37d4787bc6b6a3928cf9a9fd227e.png" alt="Tri-gram概率模型"></p><ul><li><p>详见博客<a href="https://blog.csdn.net/rongsenmeng2835/article/details/108565323?spm=1001.2014.3001.5501">语言模型（一）—— 统计语言模型n-gram语言模型</a></p></li><li><p><a href="https://blog.csdn.net/rongsenmeng2835/article/details/108656674?spm=1001.2014.3001.5501">https://blog.csdn.net/rongsenmeng2835/article/details/108656674?spm=1001.2014.3001.5501</a>)</p></li></ul><h1 id="2-NNLM"><a href="#2-NNLM" class="headerlink" title="2 NNLM"></a>2 NNLM</h1><ul><li>论文链接：<a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf">Nerual Network Language Model</a></li></ul><h2 id="2-1-FFNNLM"><a href="#2-1-FFNNLM" class="headerlink" title="2.1 FFNNLM"></a>2.1 FFNNLM</h2><ul><li>全称：Feedforward neural network model language model，前馈神经网络模语言模型</li></ul><p>以下内容来自博客：<a href="https://www.jiqizhixin.com/articles/2019-07-23-6">从经典结构到改进方法，神经网络语言模型综述</a></p><ul><li><strong>基本思想</strong></li></ul><p>Bengio 等人于 2003 年提出了原始 FFNNLM 的架构。这个 FFNNLM 可以写作：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/e7e35985-cbc0-4a06-a288-56c4b915cbab/640.png" alt="img"></p><p>其中，H、U 和 W 是层与层之间连接的权重矩阵；d 和 b 是隐藏层和输出层的偏置。</p><p>受到 N 元语言模型的启发，FFNNLM 将前 n-1 个单词作为了预测下一个单词的上下文。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/fa95ce37-9539-4667-945e-b2ec157ef3fb/640.jpeg" alt="img"></p><ul><li><strong>优点</strong></li></ul><p>FFNNLM 通过<strong>为每个单词学习一个分布式表征</strong>来实现在连续空间上的建模。单词表征是语言模型的副产品，它往往被用于改进其它的 NLP 任务。基于 FFNNLM，Mikolov 等人于 2013 提出了两种词表征模型：「CBOW」和「Skip-gram」。FFNNLM 通过将单词转换为低维向量克服了维数诅咒。FFNNLM 引领了 NNLM 研究的潮流。</p><ul><li><strong>缺点</strong></li></ul><p>（1）在训练前指定的上下文大小是有限的，这与人类可以使用大量的上下文信息进行预测的事实是严重不符的。</p><p>（2）序列中的单词是时序相关的。而 FFNNLM 没有使用时序信息进行建模。</p><p>（3）此外，全连接 NN 需要学习许多可训练的参数，即使这些参数的数量比 N 元 少，但是仍然具有很大的计算开销，十分低效。</p><h1 id="3-Word-Embedding"><a href="#3-Word-Embedding" class="headerlink" title="3 Word Embedding"></a>3 Word Embedding</h1><h2 id="3-0-one-hot"><a href="#3-0-one-hot" class="headerlink" title="3.0 one-hot"></a>3.0 one-hot</h2><p>以下内容来自博客：<a href="https://blog.csdn.net/qq_30057549/article/details/103342841?utm_source=app&app_version=4.9.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">词嵌入基础及其使用</a></p><ul><li><strong>基本思想</strong></li></ul><p>one-hot，简单来说就是单词编号是多少，哪个位置就为1，其余为0。这种词表示方法的特点就是，没有保留句子中的上下文关系（任何词之间的内积为0）。</p><p><img src="https://img-blog.csdnimg.cn/20191202151029593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMDU3NTQ5,size_16,color_FFFFFF,t_70" alt="one-hot"></p><h2 id="3-1-TF-IDF-与-BOW"><a href="#3-1-TF-IDF-与-BOW" class="headerlink" title="3.1 TF-IDF 与 BOW"></a>3.1 TF-IDF 与 BOW</h2><h3 id="3-1-1-TF-IDF"><a href="#3-1-1-TF-IDF" class="headerlink" title="3.1.1 TF-IDF"></a>3.1.1 TF-IDF</h3><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/94446764">TF-IDF算法原理及其使用详解</a></p><ul><li><strong>基本思想</strong></li></ul><p>TF-IDF（Term Frequency-inverse Document Frequency）是一种针对关键词的统计分析方法，<strong>用于评估一个词对一个文件集或者一个语料库的重要程度。一个词的重要程度跟它在文章中出现的次数成正比，跟它在语料库出现的次数成反比。这种计算方式能有效避免常用词对关键词的影响，提高了关键词与文章之间的相关性。</strong></p><p>其中TF指的是某词在文章中出现的总次数，该指标通常会被归一化定义为<strong>TF&#x3D;（某词在文档中出现的次数&#x2F;文档的总词量）</strong>，这样可以防止结果偏向过长的文档（同一个词语在长文档里通常会具有比短文档更高的词频）。IDF逆向文档频率，包含某词语的文档越少，IDF值越大，说明该词语具有很强的区分能力，<strong>IDF&#x3D;log（语料库中文档总数&#x2F;包含该词的文档数+1），+1的原因是避免分母为0。TF-IDF&#x3D;TFxIDF，TF-IDF值越大表示该特征词对这个文本的重要性越大。</strong></p><ul><li><strong>具体实现</strong></li></ul><p>可以在Sklearn中调用TF-IDFVectorizer库实现TF-IDF算法，并且可以通过stopwords参数来设置文档中的停用词（没有具体意义的词，如助词，语气词等），使得停用词不纳入计算范围，提高算法的精确性。</p><h3 id="3-1-2-BOW"><a href="#3-1-2-BOW" class="headerlink" title="3.1.2 BOW"></a>3.1.2 BOW</h3><p>以下内容来自博客：<a href="https://blog.csdn.net/Elenstone/article/details/105134863">词向量之词袋模型(BOW)详解</a></p><ul><li><strong>基本思想</strong></li></ul><p>词袋模型（Bag-of-Words model，BOW）BoW(Bag of Words)词袋模型最初被用在文本分类中，将文档表示成特征矢量。它的<strong>基本思想是假定对于一个文本，忽略其词序和语法、句法，仅仅将其看做是一些词汇的集合，而文本中的每个词汇都是独立的。</strong>简单说就是讲每篇文档都看成一个袋子（因为里面装的都是词汇，所以称为词袋，Bag of words即因此而来），然后看这个袋子里装的都是些什么词汇，将其分类。如果文档中猪、马、牛、羊、山谷、土地、拖拉机这样的词汇多些，而银行、大厦、汽车、公园这样的词汇少些，我们就倾向于判断它是一篇描绘乡村的文档，而不是描述城镇的。</p><ul><li><strong>具体实现</strong></li></ul><ol><li>首先根据<strong>语料</strong>中出现的句子分词，然后构建<strong>词袋</strong>（每一个出现的词都加进来）。计算机不认识字，只认识数字，那在计算机中怎么表示词袋模型呢？其实很简单，给每个词一个位置索引就可以了。小孩放在第一个位置，喜欢放在第二个位置，以此类推。</li><li>其中key为词，value为词的索引，语料中共有9个单词， 那么每个句子我们就可以使用一个9维的向量来表示。如果句子中含有的一个词出现了一次，就让那个词的位置置为1，词出现几次就置为几，（<strong>本质是one-hot模型</strong>）</li><li>将两篇文本通过词袋模型变为向量模型，通过计算向量的余弦距离来计算两个文本间的相似度。</li></ol><ul><li><strong>缺点</strong>：基本同one-hot编码的缺点，没有上下文信息和向量稀疏。</li></ul><h2 id="3-2-Word-Embedding"><a href="#3-2-Word-Embedding" class="headerlink" title="3.2 Word Embedding"></a>3.2 Word Embedding</h2><ul><li><strong>基本思想</strong></li></ul><p>embedding是数学领域的有名词，是指某个对象 X 被嵌入到另外一个对象 Y 中，映射 f : X → Y ，例如有理数嵌入实数。word embedding，就是找到一个映射或者函数，生成在一个新的空间上的表达，该表达就是word representation。</p><p>Word Embedding 是NLP中一组语言模型和特征学习技术的总称，**把词汇表中的单词或者短语映射成由实数构成的向量上(映射)**。</p><ul><li><strong>具体实现</strong></li></ul><p>以下内容来自博客：<a href="https://blog.csdn.net/qq_30057549/article/details/103342841?utm_source=app&app_version=4.9.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">词嵌入基础及其使用</a></p><p>一种表示如下图所示，在左侧一栏是维度，表格中的值是每个词在这个维度（特征）上的取值（-1，+1），越相关，绝对值越大。</p><p><img src="https://img-blog.csdnimg.cn/20191202151033329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMDU3NTQ5,size_16,color_FFFFFF,t_70" alt="WordEmbedding"></p><h2 id="3-2-Word2Vec"><a href="#3-2-Word2Vec" class="headerlink" title="3.2 Word2Vec"></a>3.2 Word2Vec</h2><ul><li><p>全称：Word to vector</p></li><li><p>论文链接：</p><ol><li><a href="http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf">skip-gra</a><a href="http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf">m</a></li><li><a href="https://arxiv.org/pdf/1301.3781.pdf">CBOW</a></li></ol></li><li><p><strong>语言模型种类</strong></p></li></ul><p>（1）如果是用一个词语作为输入，来预测它周围的上下文，那这个模型叫做『Skip-gram 模型』</p><p>（2）而如果是拿一个词语的上下文作为输入，来预测这个词语本身，则是 『CBOW 模型』</p><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/61635013">Word2Vec详解</a></p><ul><li><strong>基本思想</strong></li></ul><p><strong>word2vec是用一个一层的神经网络把one-hot形式的稀疏词向量映射称为一个n维(n一般为几百)的稠密向量的过程。</strong>为了加快模型训练速度，其中的tricks包括Hierarchical softmax，negative sampling, Huffman Tree等。</p><p>模型框架：</p><p><img src="https://pic2.zhimg.com/v2-0d3bbbe2ab92b36d40ff0acb9170f311_r.jpg" alt="Word2Vec"></p><h3 id="3-2-1-CBOW"><a href="#3-2-1-CBOW" class="headerlink" title="3.2.1 CBOW"></a>3.2.1 CBOW</h3><p>全称：Continuous Bag of Words（连续词袋模型）</p><p><img src="https://pic4.zhimg.com/80/v2-8fcd03fa3dad0cf4d0af1a890ace5193_720w.jpg" alt="img"></p><p>1、输入层：上下文单词的One-Hot编码词向量，V为词汇表单词个数，C为上下文单词个数。以上文那句话为例，这里C&#x3D;4，所以模型的输入是（is,an,on,the）4个单词的One-Hot编码词向量。</p><p>2、初始化一个权重矩阵 <img src="https://www.zhihu.com/equation?tex=W_%7BV%C3%97N%7D" alt="[公式]"> ，然后用所有输入的One-Hot编码词向量左乘该矩阵,得到维数为N的向量 <img src="https://www.zhihu.com/equation?tex=%CF%89_1+%CF%89_2,%E2%80%A6,%CF%89_c" alt="[公式]"> ，这里的N由自己根据任务需要设置。</p><p>3、将所得的向量 <img src="https://www.zhihu.com/equation?tex=%CF%89_1+%CF%89_2,%E2%80%A6,%CF%89_c" alt="[公式]"> 相加求平均作为隐藏层向量h。</p><p>4、初始化另一个权重矩阵 <img src="https://www.zhihu.com/equation?tex=W_%7BN%C3%97V%7D%5E%7B%27%7D" alt="[公式]"> ,用隐藏层向量h左乘 <img src="https://www.zhihu.com/equation?tex=W_%7BN%C3%97V%7D%5E%7B%27%7D" alt="[公式]"> ，再经激活函数处理得到V维的向量y，<strong>y的每一个元素代表相对应的每个单词的概率分布</strong>。</p><p>5、<strong>y中概率最大的元素所指示的单词为预测出的中间词（target word）与true label的One-Hot编码词向量做比较，误差越小越好（根据误差更新两个权重矩阵）</strong></p><p>在训练前需要定义好<strong>损失函数（一般为交叉熵代价函数）</strong>，采用梯度下降算法更新W和W’。训练完毕后，<strong>输入层的每个单词与矩阵W（左侧的权重矩阵）相乘得到的向量的就是我们想要的Distributed Representation表示的词向量，也叫做word embedding。</strong>因为<strong>One-Hot编码词向量中只有一个元素为1，其他都为0，所以第i个词向量乘以矩阵W得到的就是矩阵的第i行</strong>，所以<strong>这个矩阵也叫做look up table，有了look up table就可以免去训练过程，直接查表得到单词的词向量了</strong>。</p><h3 id="3-2-2-Skip-gram"><a href="#3-2-2-Skip-gram" class="headerlink" title="3.2.2 Skip-gram"></a>3.2.2 Skip-gram</h3><p><img src="https://pic2.zhimg.com/80/v2-a04dca66f5e8456f50b4b43fb87b98dd_720w.jpg" alt="img"></p><p>通过在一个大的语料库训练，得到一个从输入层到隐含层的权重模型。“apple”的上下文词是（’there’，’is’，’an’，’on’,’the’,’table’）。<strong>那么以apple的One-Hot词向量作为输入，输出则是（’there’，’is’，’an’，’on’,’the’,’table’）的One-Hot词向量。训练完成后，就得到了每个词到隐含层的每个维度的权重，就是每个词的向量（和CBOW中一样）。</strong></p><ul><li><strong>如何训练神经网络模型</strong></li></ul><p>假如我们有一个句子“There is an apple on the table”。</p><p>1、首先我们选句子中间的一个词作为我们的输入词，例如我们选取“apple”作为input word；</p><p>2、有了input word以后，我们再<strong>定义一个叫做skip_window的参数，它代表着我们从当前input word的一侧（左边或右边）选取词的数量。</strong>如果我们设置skip_window&#x3D;2，那么我们最终获得窗口中的词（包括input word在内）就是[‘is’,’an’,’apple’,’on’,’the’ ]。<strong>skip_window&#x3D;2代表着选取左input word左侧2个词和右侧2个词进入我们的窗口</strong>，所以整个窗口大小span&#x3D;2x2&#x3D;4。<strong>另一个参数叫num_skips，它代表着我们从整个窗口中随机选取多少个不同的词作为我们的output word</strong>，当skip_window&#x3D;2，num_skips&#x3D;2时，我们将会得到两组 (input word, output word) 形式的训练数据，即 (‘apple’, ‘an’)，(‘apple’, ‘on’)。</p><p>3、<strong>神经网络基于这些训练数据中每对单词出现的次数习得统计结果，并输出一个概率分布，这个概率分布代表着到我们词典中每个词有多大可能性跟input word同时出现。</strong>举个例子，如果我们向神经网络模型中输入一个单词“中国“，那么最终模型的输出概率中，像“英国”， ”俄罗斯“这种相关词的概率将远高于像”苹果“，”蝈蝈“非相关词的概率。<strong>因为”英国“，”俄罗斯“在文本中更大可能在”中国“的窗口（Skip_window）中出现。</strong>我们将通过给神经网络输入文本中成对的单词来训练它完成上面所说的概率计算。</p><p>4、<strong>通过梯度下降和反向传播更新矩阵W</strong></p><p>5、W中的行向量即为每个单词的Word embedding表示</p><ul><li><strong>skip_window和num_skips</strong></li></ul><p>简单来说，<strong>skip_window和num_skips用来生成标注(label)的训练数据集，可以理解为是监督学习中的标注数据。每个(input_word, output_word)表示在模型中每个input_word 所对应的 output_word应该是什么</strong>。</p><p>skip_window代表窗口大小，num_skips &#x3D; 2 表示input用于产生label的次数限制，就是对于一个中心词 在window范围 随机选取num_skips个词，产生一系列(input_id, output_id) 。</p><p>在生成单词对时，会在<strong>语料库中先取出一个长度为skip_window*2+1连续单词列表</strong>，这个连续的单词列表是上面程序中的变量buffer。buffer中最中间的那个单词是Skip-Gram方法中“出现的单词”，其余skip_window*2个单词是它的“上下文”。<strong>会在skip_window*2个单词中随机选取num_skips个单词，放入的标签labels</strong>。</p><p>如skip_window&#x3D;1 , num_skips&#x3D;2的情况。会首先选取一个长度为3的buffer，假设它是[‘anarchism’, ‘originated’,’as’]，此时originated为中心单词，剩下的两个单词为它的上下文。再在这两个单词中选择num_skips形成标签。由于num_skips&#x3D;2，所以实际只能将这两个单词都选上（标签不能重复），最后生成的训练数据为originated -&gt;anarchism和originated -&gt; as。</p><h3 id="3-2-3-Tricks"><a href="#3-2-3-Tricks" class="headerlink" title="3.2.3 Tricks"></a>3.2.3 Tricks</h3><ul><li><strong>Hierarchical Softmax</strong></li></ul><p>Hierarchical Softmax对原模型的改进主要有两点，<strong>第一点是从输入层到隐藏层的映射，没有采用原先的与矩阵W相乘然后相加求平均的方法，而是直接对所有输入的词向量求和。</strong>假设输入的词向量为（0，1，0，0）和（0,0,0,1），那么隐藏层的向量为（0,1,0,1）。</p><p>Hierarchical Softmax的<strong>第二点改进是采用哈夫曼树来替换了原先的从隐藏层到输出层的矩阵W’。</strong>哈夫曼树的叶节点个数为词汇表的单词个数V，一个叶节点代表一个单词，而从根节点到该叶节点的路径确定了这个单词最终输出的词向量。</p><p>哈夫曼树的所有内部节点就类似之前神经网络隐藏层的神经，其中，<strong>根节点的词向量对应投影后的词向量</strong>，而<strong>所有叶子节点就类似于之前神经网络softmax输出层的神经元，叶子节点的个数就是词汇表的大小</strong>。在哈夫曼树中，隐藏层到输出层的softmax映射不是一下子完成的，而是沿着哈夫曼树一步步完成的，因此这种softmax取名为”Hierarchical Softmax”。</p><p><img src="https://images2017.cnblogs.com/blog/1042406/201707/1042406-20170727105752968-819608237.png" alt="HierarchicalSoftmax-Huffuman"></p><ul><li><strong>Negative Sampling（负采样）</strong></li></ul><p>比如我们有一个训练样本，中心词是w，它周围上下文共有2c个词，记为context(w)。由于这个中心词w，的确和context(w)相关，因此它是一个真实的正例。<strong>通过Negative Sampling采样，我们得到n个和w不同的中心词wi, i&#x3D;1,2,..n，这样context(w)和wi就组成了n个并不真实存在的负例。利用这一个正例和n个负例，我们进行二元逻辑回归，得到负采样对应每个词wi对应的模型参数θi，和每个词的词向量</strong>。</p><h2 id="3-3-GloVe"><a href="#3-3-GloVe" class="headerlink" title="3.3 GloVe"></a>3.3 GloVe</h2><ul><li>论文链接：<a href="https://www.aclweb.org/anthology/D14-1162.pdf">Global vectors for word representation</a></li></ul><p>以下内容来自博客：<a href="http://www.fanyeong.com/2018/02/19/glove-in-detail/">GloVe详解</a></p><ul><li><strong>基本思想</strong></li></ul><p><strong>GloVe的全称叫Global Vectors for Word Representation，它是一个基于全局词频统计（count-based &amp; overall statistics）的词表征（word representation）工具，它可以把一个单词表达成一个由实数组成的向量，这些向量捕捉到了单词之间一些语义特性，比如相似性（similarity）、类比性（analogy）等。</strong>我们通过对向量的运算，比如欧几里得距离或者cosine相似度，可以计算出两个单词之间的语义相似性。</p><ul><li><strong>主要模型</strong></li></ul><p><strong>构建词向量（Word Vector）和共现矩阵（Co-ocurrence Matrix）之间的近似关系</strong>，论文的作者提出以下的公式可以近似地表达两者之间的关系：</p><p><img src="http://img.fdchen.host/Glove-%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9E%8B.png" alt="image-20210806192653851"></p><p>其中，<strong>wi^T和wj是我们最终要求解的词向量；</strong>bi和bj分别是两个词向量的bias term。</p><ul><li><strong>损失函数</strong></li></ul><p><img src="http://img.fdchen.host/Glove-%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt="image-20210806192630927"></p><p>这个loss function的基本形式就是最简单的mean square loss，只不过在此基础上加了一个权重函数f(Xij)。</p><p><img src="http://img.fdchen.host/Glove-%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E6%9D%83%E5%80%BC%E5%87%BD%E6%95%B0.png" alt="image-20210806193111470"></p><h1 id="4-Fasttext"><a href="#4-Fasttext" class="headerlink" title="4 Fasttext"></a>4 Fasttext</h1><ul><li><p>全称：Facebook开发的一款快速文本分类器</p></li><li><p>论文链接：</p><ul><li><a href="https://arxiv.org/pdf/1607.01759.pdf">Bag of Tricks for Efficient Text Classification</a>   关于文本分类</li><li><a href="https://arxiv.org/pdf/1607.04606.pdf">Enriching Word Vectors with Subword Information</a>  关于文本嵌入</li></ul></li><li><p>以下内容来自博客：<strong>fastText原理及实践</strong></p></li><li><p><strong>基本思想</strong></p></li></ul><p>fastText模型也只有三层：输入层、隐含层、输出层（Hierarchical Softmax）<strong>，输入都是多个经向量表示的单词，输出都是一个特定的target，隐含层都是对多个词向量的叠加平均。</strong>不同的是，CBOW的输入是目标单词的上下文，<strong>fastText的输入是多个单词及其n-gram特征，这些特征用来表示单个文档</strong>；CBOW的输入单词被onehot编码过，<strong>fastText的输入特征是被embedding过</strong>；CBOW的输出是目标词汇，<strong>fastText的输出是文档对应的类标。</strong></p><p>值得注意的是，fastText<strong>在输入时，将单词的字符级别的n-gram向量作为额外的特征；在输出时，fastText采用了分层Softmax</strong>，大大降低了模型训练时间。</p><ul><li><strong>主要优点：</strong>fastText是一个快速文本分类算法</li></ul><ol><li>fastText在保持高精度的情况下加快了训练速度和测试速度</li><li>fastText不需要预训练好的词向量，fastText会自己训练词向量</li><li>fastText两个重要的优化：Hierarchical Softmax、N-gram</li></ol><h1 id="5-textCNN"><a href="#5-textCNN" class="headerlink" title="5 textCNN"></a>5 textCNN</h1><ul><li>全称+论文链接：<a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1408.5882">Convolutional Neural Networks for Sentence Classification</a></li></ul><h2 id="5-1-CNN"><a href="#5-1-CNN" class="headerlink" title="5.1 CNN"></a>5.1 CNN</h2><ul><li>基本思想：</li></ul><p>卷积神经网络主要由这几类层构成：<strong>输入层、卷积层，ReLU层、池化（Pooling）层和全连接层（全连接层和常规神经网络中的一样）</strong>。通过将这些层叠加起来，就可以构建一个完整的卷积神经网络。在实际应用中往往将卷积层与ReLU层共同称之为卷积层，<strong>所以卷积层经过卷积操作也是要经过激活函数的</strong>。具体说来，卷积层和全连接层（CONV&#x2F;FC）对输入执行变换操作的时候，不仅会用到激活函数，还会用到很多参数，即神经元的权值w和偏差b；而ReLU层和池化层则是进行一个固定不变的函数操作。卷积层和全连接层中的参数会随着梯度下降被训练，这样卷积神经网络计算出的分类评分就能和训练集中的每个图像的标签吻合了。</p><p>详细解读见博客：<a href="https://zhuanlan.zhihu.com/p/47184529">卷积神经网络（CNN）详解</a></p><ul><li><strong>卷积层</strong></li></ul><p><img src="https://easy-ai.oss-cn-shanghai.aliyuncs.com/2019-06-19-juanji.gif" alt="卷积层"></p><ul><li><strong>池化层</strong></li></ul><p><img src="https://easy-ai.oss-cn-shanghai.aliyuncs.com/2019-06-19-chihua.gif" alt="池化层"></p><ul><li><strong>全连接层（Fully Connected Layer）</strong></li></ul><p>连接所有的特征，将输出值送给分类器（如softmax分类器）。</p><p><img src="http://img.fdchen.host/CNN-%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82.png" alt="image-20210730100057238"></p><ul><li><strong>感受野（receptive filed）</strong></li></ul><p>每个神经元只与输入数据的一个局部区域连接，该连接的<strong>空间大小</strong>叫做神经元的感受野（receptive field），它的尺寸是一个超参数（<strong>其实就是滤波器的空间尺寸</strong>，注意仅仅是大小相同，但是概念不一样）</p><ul><li><strong>滤波器（filter）</strong></li></ul><p>如果在一个深度切片中的所有权重都使用同一个权重向量，那么卷积层的前向传播在每个深度切片中可以看做是在计算神经元权重和输入数据体的卷积（这就是“卷积层”名字由来）。这也是为什么总是将这些权重集合称为滤波器（filter）（或卷积核（kernel）），因为它们和输入进行了卷积。</p><p><strong>卷积核：</strong>二维的矩阵<br><strong>滤波器：</strong>多个卷积核组成的三维矩阵，多出的一维是通道数目。</p><ul><li><strong>权值共享</strong></li></ul><p>卷积核内每一个元素值不同，但是同一深度切片使用相同卷积核，这就是权值共享。也就是说每一层（深度切片）使用同一个卷积核（一个滤波器有也多个卷积核，且一定与输入数据深度相同）。</p><ul><li><strong>深度depth（与通道类似）</strong></li></ul><p>分为输入数据的深度和输出数据的深度，输入数据深度由输入数据决定。</p><p><img src="https://img-blog.csdnimg.cn/20190523160541489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rob3JLaW5nMDE=,size_16,color_FFFFFF,t_70" alt="CNN-depth"></p><p><strong>输出数据的深度，取决于滤波器的个数，就是有滤波器有几个，深度就是多少。</strong></p><ul><li><strong>通道channel</strong></li></ul><p><img src="http://img.fdchen.host/CNN-channel.png" alt="image-20210730092433430"></p><p>可以把channels 分为三种：</p><ol><li>最初输入的图片样本的 channels ，取决于图片类型，比如RGB；</li><li>卷积操作完成后输出的 out_channels ，取决于卷积核的数量。此时的out_channels 也会作为下一次卷积时的卷积核的 in_channels；</li><li>卷积核中的 in_channels ，刚刚2中已经说了，就是上一次卷积的 out_channels ，如果是第一次做卷积，就是1中样本图片的 channels</li></ol><p>（详见博客：<a href="https://blog.csdn.net/sscc_learning/article/details/79814146">【CNN】理解卷积神经网络中的通道 channel</a>）</p><ul><li><strong>特征图</strong></li></ul><p>卷积层之后的输出结果就是特征图。</p><h2 id="5-2-textCNN"><a href="#5-2-textCNN" class="headerlink" title="5.2 textCNN"></a>5.2 textCNN</h2><ul><li><strong>基本思想</strong></li></ul><p>卷积神经网络的核心思想是<strong>捕捉局部特征</strong>，对于文本来说，局部特征就是<strong>由若干单词组成的滑动窗口</strong>，类似于N-gram。卷积神经网络的<strong>优势在于能够自动地对N-gram特征进行组合和筛选，获得不同抽象层次的语义信息</strong>。</p><p>详细解读见博客：<a href="https://zhuanlan.zhihu.com/p/77634533">深入TextCNN（一）详述CNN及TextCNN原理</a></p><p><img src="https://pic3.zhimg.com/80/v2-2ea1f0b8b166f31273b26bca3ba8e8b2_720w.jpg" alt="textCNN结构"></p><h1 id="6-textRNN"><a href="#6-textRNN" class="headerlink" title="6 textRNN"></a>6 textRNN</h1><h2 id="6-1-RNN"><a href="#6-1-RNN" class="headerlink" title="6.1 RNN"></a>6.1 RNN</h2><ul><li>基本思想</li></ul><ol><li>RNN 的输入和输出可以是不定长且不等长的</li><li>RNN 有多种结构，如下图：</li></ol><p><img src="https://image.jiqizhixin.com/uploads/editor/06aefcee-6e74-4dde-bee1-5f82a5b85c9e/1544760758227.png" alt="img"></p><ol start="3"><li>RNN网络和其他网络最大的不同就在于<strong>RNN能够实现某种“记忆功能”，对所处理过的信息留存有一定的记忆</strong>，具体而言就是<strong>上一个时刻的网络状态会应影响下一个时刻的网络状态。</strong></li></ol><p>详细解读见博客：<a href="https://www.jiqizhixin.com/articles/2018-12-14-4">RNN 结构详解</a></p><ul><li><strong>隐状态</strong></li></ul><p>隐状态h（hidden state）可以对序列形的数据提取特征，接着再转换为输出。</p><ul><li><strong>RNN经典n-to-n结构示例</strong></li></ul><p>先从h1的计算开始看：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/c672edc7-0502-4034-b555-c5cccdde8704/1544760757932.png" alt="img"></p><p>h2的计算和h1类似。要注意的是，在计算时，<strong>每一步使用的参数U、W、b都是一样的，也就是说每个步骤的参数都是共享的，这是RNN的重要特点。</strong></p><p><img src="https://image.jiqizhixin.com/uploads/editor/1780d8f0-3095-4523-b271-9230ca308a04/1544760758036.png" alt="img"></p><p>最终的输出如下：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/0c80f834-2047-44a1-b834-083dcd59e7b4/1544760758826.png" alt="RNN-最终输出"></p><p>剩下的输出类似进行（使用和y1同样的参数V和c）：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/b4ff8fa4-7e6d-405c-9900-d82e7c2c8504/1544760759148.png" alt="img"></p><p>这就是最经典的RNN结构，它的输入是x1, x2, …..xn，输出为y1, y2, …yn，也就是说，<strong>输入和输出序列必须要是等长的</strong>。</p><ul><li><strong>缺点：</strong>容易出现梯度消失</li></ul><h2 id="6-2-Encoder-Decoder"><a href="#6-2-Encoder-Decoder" class="headerlink" title="6.2 Encoder-Decoder"></a>6.2 Encoder-Decoder</h2><p>Encoder-Decoder是一种 <strong>n-to-m</strong> 结构，输入、输出为不等长的序列。</p><ul><li><strong>基本思想</strong></li></ul><p>（1）Encoder：将 input序列 →转成→ 固定长度的向量</p><p>（2）Decoder：将 固定长度的向量 →转成→ output序列</p><p>（3）Encoder 与 Decoder 可以彼此独立使用，实际上经常一起使用</p><p>Encoder-Decoder结构<strong>先将输入数据编码成一个上下文语义向量c</strong>，语义向量c可以有多种表达方式，最简单的方法就是把Encoder的最后一个隐状态赋值给c，还可以对最后的隐状态做一个变换得到c，也可以对所有的隐状态做变换。拿到c之后，就<strong>用另一个RNN网络对其进行解码，这部分RNN网络被称为Decoder</strong>。Decoder的RNN可以与Encoder的一样，也可以不一样。</p><p>详细解读见博客：<a href="https://www.jiqizhixin.com/articles/2018-12-14-4">RNN 结构详解</a></p><ul><li><strong>具体做法</strong></li></ul><p>具体做法就是<strong>将c当做之前的初始状态h0输入到Decoder中</strong>：</p><p><a href="https://github.com/YZHANG1270/Markdown_pic/blob/master/2018/11/RNN_01/013.jpg?raw=true"><img src="https://image.jiqizhixin.com/uploads/editor/ce3fc27e-cbf5-465d-86c1-4ffbfdac6dfa/1544760759311.png" alt="img"></a></p><p><strong>还有一种做法是将c当做每一步的输入</strong>：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/89a6896c-de8e-417e-8b87-30b9b90e68e5/1544760759641.png" alt="img"></p><ul><li><strong>缺点：</strong></li></ul><p>编码和解码之间的唯一联系是固定长度的语义向量c，<strong>编码要把整个序列的信息压缩进一个固定长度的语义向量c，语义向量c无法完全表达整个序列的信息</strong>，先输入的内容携带的信息，会被后输入的信息稀释掉，或者被覆盖掉。<br>输入序列越长，这样的现象越严重，这样使得在Decoder解码时一开始就没有获得足够的输入序列信息，解码效果会打折扣。</p><h2 id="6-3-Attention机制"><a href="#6-3-Attention机制" class="headerlink" title="6.3 Attention机制"></a>6.3 Attention机制</h2><ul><li><strong>基本思想</strong></li></ul><p>注意力机制（attention mechanism）是对基础Encoder-Decoder的改良。Attention机制通过在每个时间输入不同的c来解决问题，每一个c会自动去选取与当前所要输出的y最合适的上下文信息，仅Decoder部分与简单RNN不同，下图是带有Attention机制的Decoder：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/483f24d7-da8d-4a66-84d0-fcb6a45bdca9/1544760760610.png" alt="img"></p><p>详细解读见博客：<a href="https://www.jiqizhixin.com/articles/2018-12-14-4">RNN 结构详解</a></p><ul><li><strong>具体做法</strong></li></ul><p>具体来说，我们<strong>用aij衡量Decoder中第i阶段与Encoder中第j阶段的hj的相关性</strong>，最终Decoder中第i阶段的输入的上下文信息 ci就来自于所有 hj 对 aij 的加权和。</p><p>以机器翻译为例（将中文翻译成英文）：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/223b12fa-4da6-4a5f-8039-c043b3701ef5/1544760760445.png" alt="img"></p><ul><li><strong>计算权重aij</strong></li></ul><p>aij 同样是从模型中学出的，它实际和<strong>Decoder的第i-1阶段的隐状态</strong>、<strong>Encoder第j个阶段的隐状态</strong>有关。</p><p>同样还是拿上面的机器翻译举例， a1j 的计算（此时箭头就表示对h’和 hj 同时做变换）：</p><p><img src="https://image.jiqizhixin.com/uploads/editor/7c144c37-72dd-4aad-a093-954087edaf9b/1544760759945.png" alt="img"></p><ul><li><strong>优点</strong></li></ul><p>（1）让生词不只是关注全局的语义向量c，增加了“注意力范围”。表示接下来输出的词要重点关注输入序列的哪些部分。根据关注的区域来产生下一个输出。<br>（2）不要求编码器将所有信息全输入在一个固定长度的向量中。<br>（3）将输入编码成一个向量的序列，解码时，每一步选择性的从序列中挑一个子集进行处理。<br>（4）在每一个输出时，能够充分利用输入携带的信息，每个语义向量Ci不一样，注意力焦点不一样。</p><ul><li><strong>缺点</strong></li></ul><p>（1）需要为每个输入输出组合分别计算attention。50个单词的输出输出序列需要计算2500个attention。<br>（2）attention在决定专注于某个方面之前需要遍历一遍记忆再决定下一个输出是以什么。</p><ul><li><strong>强化学习</strong></li></ul><p>Attention的另一种替代方法是强化学习，来预测关注点的大概位置。但强化学习不能用反向传播算法端到端的训练。</p><p><strong>强化学习是一种试错方法，其目标是让软件智能体在特定环境中能够采取回报最大化的行为。强化学习在马尔可夫决策过程环境中主要使用的技术是动态规划（Dynamic Programming）。</strong>流行的强化学习方法包括自适应动态规划（ADP）、时间差分（TD）学习、状态-动作-回报-状态-动作（SARSA）算法、Q 学习、深度强化学习（DQN）；其应用包括下棋类游戏、机器人控制和工作调度等。</p><h2 id="6-4-LSTM"><a href="#6-4-LSTM" class="headerlink" title="6.4 LSTM"></a>6.4 LSTM</h2><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/32085405">人人都能看懂的LSTM</a></p><ul><li><strong>基本思想</strong></li></ul><p>长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。</p><p>LSTM结构（图右）和普通RNN的主要输入输出区别如下所示。</p><p><img src="https://pic4.zhimg.com/80/v2-e4f9851cad426dfe4ab1c76209546827_720w.jpg" alt="img"></p><p>相比RNN只有一个传递状态 <img src="https://www.zhihu.com/equation?tex=h%5Et+" alt="[公式]"> ，LSTM有两个传输状态，一个 <img src="https://www.zhihu.com/equation?tex=c%5Et" alt="[公式]"> （cell state），和一个 <img src="https://www.zhihu.com/equation?tex=h%5Et" alt="[公式]"> （hidden state）。（Tips：RNN中的 <img src="https://www.zhihu.com/equation?tex=h%5Et" alt="[公式]"> 对于LSTM中的 <img src="https://www.zhihu.com/equation?tex=c%5Et" alt="[公式]"> ）</p><p>其中对于传递下去的 <img src="https://www.zhihu.com/equation?tex=c%5Et" alt="[公式]"> 改变得很慢，通常输出的 <img src="https://www.zhihu.com/equation?tex=c%5Et" alt="[公式]"> 是上一个状态传过来的 <img src="https://www.zhihu.com/equation?tex=c%5E%7Bt-1%7D" alt="[公式]"> 加上一些数值。</p><p>而 <img src="https://www.zhihu.com/equation?tex=h%5Et" alt="[公式]"> 则在不同节点下往往会有很大的区别。</p><ul><li>具体做法</li></ul><p><img src="https://pic2.zhimg.com/80/v2-556c74f0e025a47fea05dc0f76ea775d_720w.jpg" alt="img"></p><p><img src="https://www.zhihu.com/equation?tex=%5Codot" alt="[公式]"> 是Hadamard Product，也就是操作矩阵中对应的元素相乘，因此要求两个相乘矩阵是同型的。 <img src="https://www.zhihu.com/equation?tex=%5Coplus" alt="[公式]"> 则代表进行矩阵加法。</p><p><strong>LSTM内部主要有三个阶段：</strong></p><p>1.忘记阶段。这个阶段主要是对上一个节点传进来的输入进行<strong>选择性</strong>忘记。简单来说就是会 “忘记不重要的，记住重要的”。</p><p>具体来说是通过计算得到的 <img src="https://www.zhihu.com/equation?tex=z%5Ef" alt="[公式]"> （f表示forget）来作为忘记门控，来控制上一个状态的 <img src="https://www.zhihu.com/equation?tex=c%5E%7Bt-1%7D" alt="[公式]"> 哪些需要留哪些需要忘。</p><p>2.选择记忆阶段。这个阶段将这个阶段的输入有选择性地进行“记忆”。主要是会对输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 进行选择记忆。哪些重要则着重记录下来，哪些不重要，则少记一些。当前的输入内容由前面计算得到的 <img src="https://www.zhihu.com/equation?tex=z+" alt="[公式]"> 表示。而选择的门控信号则是由 <img src="https://www.zhihu.com/equation?tex=z%5Ei" alt="[公式]"> （i代表input)来进行控制。</p><blockquote><p>将上面两步得到的结果相加，即可得到传输给下一个状态的 <img src="https://www.zhihu.com/equation?tex=c%5Et" alt="[公式]"> 。也就是上图中的第一个公式。</p></blockquote><p>3.输出阶段。这个阶段将决定哪些将会被当成当前状态的输出。主要是通过 <img src="https://www.zhihu.com/equation?tex=z%5Eo" alt="[公式]"> 来进行控制的。并且还对上一阶段得到的 <img src="https://www.zhihu.com/equation?tex=c%5Eo" alt="[公式]"> 进行了放缩（通过一个tanh激活函数进行变化)。</p><ul><li><strong>LSTM的四个状态</strong></li></ul><p>首先使用LSTM的当前输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 和上一个状态传递下来的 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 拼接训练得到四个状态。</p><p><img src="https://pic4.zhimg.com/80/v2-15c5eb554f843ec492579c6d87e1497b_720w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-d044fd0087e1df5d2a1089b441db9970_720w.jpg" alt="img"></p><p>其中， <img src="https://www.zhihu.com/equation?tex=z%5Ef+" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=z%5Ei" alt="[公式]"> ，<img src="https://www.zhihu.com/equation?tex=z%5Eo" alt="[公式]"> 是由拼接向量乘以权重矩阵之后，再通过一个 <img src="https://www.zhihu.com/equation?tex=sigmoid+" alt="[公式]"> 激活函数转换成0到1之间的数值，来作为一种门控状态。而 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 则是将结果通过一个 <img src="https://www.zhihu.com/equation?tex=tanh" alt="[公式]"> 激活函数将转换成-1到1之间的值（这里使用 <img src="https://www.zhihu.com/equation?tex=tanh" alt="[公式]"> 是因为这里是将其做为输入数据，而不是门控信号）。</p><h2 id="6-5-textRNN"><a href="#6-5-textRNN" class="headerlink" title="6.5 textRNN"></a>6.5 textRNN</h2><ul><li>论文链接：<a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=F2929368FEDF4A9A7E495DC2A3137D19?doi=10.1.1.822.3091&rep=rep1&type=pdf">Recurrent</a><a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=F2929368FEDF4A9A7E495DC2A3137D19?doi=10.1.1.822.3091&rep=rep1&type=pdf"> Neural Networks for Sentence Classification</a></li></ul><p>以下内容来自博客：<a href="https://www.pianshen.com/article/6169194182/">TextRNN</a></p><ul><li><strong>基本思想</strong></li></ul><p>自然语言处理中更常用的是循环神经网络（RNN, Recurrent Neural Network），<strong>能够更好的表达上下文信息</strong>。具体在文本分类任务中，Bi-directional RNN（实<strong>际使用的是双向LSTM</strong>）从某种意义上可以理解为可以捕获变长且双向的的 “n-gram” 信息。</p><ul><li><strong>Bi-LSTM</strong></li></ul><p>双向LSTM算是在自然语言处理领域非常一个标配网络了，在序列标注&#x2F;命名体识别&#x2F;seq2seq模型等很多场景都有应用，下图是Bi-LSTM用于分类问题的网络结构原理示意图，黄色的节点分别是前向和后向RNN的输出，<strong>示例中的是利用最后一个词的结果直接接全连接层softmax输出了</strong>。</p><p><img src="https://www.pianshen.com/images/297/b371970c5969284fd10846f6803228e9.png" alt="在这里插入图片描述"></p><h2 id="6-6-TextRNN-Attention"><a href="#6-6-TextRNN-Attention" class="headerlink" title="6.6 TextRNN + Attention"></a>6.6 TextRNN + Attention</h2><ul><li><strong>基本思想：用Attention Layer代替全连接层</strong></li></ul><p>Att-BiLSTM包含5部分：</p><p>输入层：输入句子到模型。</p><p>嵌入层：将每个词映射到低维向量。</p><p>LSTM层：使用BLSTM得到高层特征。</p><p>注意力层：通过与权重向量加权求和，将词级别的特征合并到句子级别的特征。</p><p>输出层：将句子层级的特征用于关系分类。</p><p>整个网络结构如下图：</p><p><img src="https://pic3.zhimg.com/80/v2-dece7cbd3dfab01fb599e2aae338d74a_720w.jpg" alt="img"></p><ul><li><strong>Bi-LSTM</strong></li></ul><p>使用BiLSTM，句子中第 <img src="https://www.zhihu.com/equation?tex=i" alt="[公式]"> 个词的输出为，即对前向和后向的Hidden State进行拼接：</p><p><img src="https://www.zhihu.com/equation?tex=h_%7Bi%7D=%5Cleft%5B%5Coverrightarrow%7Bh_%7Bi%7D%7D+%5Coplus+%5Coverleftarrow%7Bh_%7Bi%7D%7D%5Cright%5D" alt="[公式]"></p><ul><li><strong>Attention层</strong></li></ul><p><img src="https://www.zhihu.com/equation?tex=H=%5Bh_1,h_2,...,h_T%5D" alt="[公式]"> 为LSTM层的输出向量，T是句子长度。 <img src="https://www.zhihu.com/equation?tex=H+%5Cin+%5Cmathbb%7BR%7D%5E%7Bd%5E%7Bw%7D+%5Ctimes+T%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=d%5Ew" alt="[公式]"> 是LSTM层的输出维度。 <img src="https://www.zhihu.com/equation?tex=w" alt="[公式]"> 的维度是 <img src="https://www.zhihu.com/equation?tex=d%5Ew" alt="[公式]"> , <img src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]"> 的维度是T， <img src="https://www.zhihu.com/equation?tex=r" alt="[公式]"> 的维度是 <img src="https://www.zhihu.com/equation?tex=d%5Ew" alt="[公式]"> .</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+M+&=%5Ctanh+(H)+%5C%5C+%5Calpha+&=%5Coperatorname%7Bsoftmax%7D%5Cleft(w%5E%7BT%7D+M%5Cright)+%5C%5C+r+&=H+%5Calpha%5E%7BT%7D+%5Cend%7Baligned%7D" alt="[公式]"></p><p>然后用于最后分类的特征为 <img src="https://www.zhihu.com/equation?tex=h%5E*=tanh(r)" alt="[公式]"></p><ul><li><strong>输出层</strong></li></ul><p>最后将句子的特征 <img src="https://www.zhihu.com/equation?tex=h%5E*" alt="[公式]"> 接入softmax进行分类。</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bc%7D+%5Chat%7Bp%7D(y+%5Cmid+S)=%5Coperatorname%7Bsoftmax%7D%5Cleft(W%5E%7B(S)%7D+h%5E%7B*%7D+b%5E%7B(S)%7D%5Cright)+%5C%5C+%5Chat%7By%7D=%5Carg+%5Cmax+_%7By%7D+%5Chat%7Bp%7D(y+%5Cmid+S)+%5Cend%7Barray%7D" alt="[公式]"></p><p>然后损失函数是使用交叉熵损失，并且加入了L2正则化。</p><p><img src="https://www.zhihu.com/equation?tex=J(%5Ctheta)=-%5Cfrac%7B1%7D%7Bm%7D+%5Csum_%7Bi=1%7D%5E%7Bm%7D+t_%7Bi%7D+%5Clog+%5Cleft(y_%7Bi%7D%5Cright)+%5Clambda%5C%7C%5Ctheta%5C%7C_%7BF%7D%5E%7B2%7D+" alt="[公式]"></p><ul><li><strong>正则化</strong></li></ul><p><img src="http://img.fdchen.host/L1%E4%B8%8EL2%E6%AD%A3%E5%88%99%E5%8C%96.png" alt="image-20210730130844097"></p><h1 id="7-seq2seq"><a href="#7-seq2seq" class="headerlink" title="7 seq2seq"></a>7 seq2seq</h1><ul><li>论文链接： <a href="http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf">Sequence to Sequence Learning with Neural Networks  </a></li></ul><p>seq2seq 是一个Encoder–Decoder 结构的网络。</p><h1 id="8-Transformer"><a href="#8-Transformer" class="headerlink" title="8 Transformer"></a>8 Transformer</h1><h2 id="8-1-Transformer"><a href="#8-1-Transformer" class="headerlink" title="8.1 Transformer"></a>8.1 Transformer</h2><ul><li>论文链接：<a href="https://arxiv.org/pdf/1706.03762.pdf">Attention is All Your Need</a></li></ul><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/48508221">详解Transformer （Attention Is All You Need）</a></p><ul><li><strong>基本思想</strong></li></ul><p>Transformer中抛弃了传统的CNN和RNN，整个网络结构完全是由Attention机制组成。更准确地讲，Transformer由且仅由self-Attenion和Feed Forward Neural Network组成。</p><p><img src="https://pic1.zhimg.com/80/v2-9fb280eb2a69baf5ceafcfa3581aa580_720w.jpg" alt="Transformer结构"></p><ul><li><strong>Attention计算方法</strong></li></ul><p>Attention的计算方法，整个过程可以分成7步：</p><ol><li>将输入单词转化成嵌入向量；</li><li>根据嵌入向量得到 <img src="https://www.zhihu.com/equation?tex=q" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=k" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=v" alt="[公式]"> 三个向量；</li><li>为每个向量计算一个score： <img src="https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D+=+q+%5Ccdot+k" alt="[公式]"> ；</li><li>为了梯度的稳定，Transformer使用了score归一化，即除以 <img src="https://www.zhihu.com/equation?tex=%5Csqrt%7Bd_k%7D" alt="[公式]"> ；</li><li>对score施以softmax激活函数；</li><li>softmax点乘Value值 <img src="https://www.zhihu.com/equation?tex=v" alt="[公式]"> ，得到加权的每个输入向量的评分 <img src="https://www.zhihu.com/equation?tex=v" alt="[公式]"> ；</li><li>相加之后得到最终的输出结果 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> ： <img src="https://www.zhihu.com/equation?tex=z=%5Csum+v" alt="[公式]"> 。</li></ol><p>实际计算过程中是采用基于矩阵的计算方式，那么论文中的 <img src="https://www.zhihu.com/equation?tex=Q" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=V" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=K+" alt="[公式]"> 的计算方式如图：</p><p><img src="https://pic3.zhimg.com/80/v2-bcd0d108a5b52a991d5d5b5b74d365c6_720w.jpg" alt="img"></p><p>总结为如图所示的矩阵形式：</p><p><img src="https://pic1.zhimg.com/80/v2-be73ba876922cf52df8a00a55f770284_720w.jpg" alt="img"></p><p>在self-attention需要强调的最后一点是其采用了<a href="https://zhuanlan.zhihu.com/p/42706477">残差网络</a> 中的short-cut结构，目的当然是解决深度学习中的退化问题，得到的最终结果如图13。</p><ul><li><strong>Multi-head Attention</strong></li></ul><p>Multi-Head Attention相当于 <img src="https://www.zhihu.com/equation?tex=h" alt="[公式]"> 个不同的self-attention的集成（ensemble），在这里我们以 <img src="https://www.zhihu.com/equation?tex=h=8" alt="[公式]"> 举例说明。Multi-Head Attention的输出分成3步：</p><ol><li>将数据 <img src="https://www.zhihu.com/equation?tex=X+" alt="[公式]"> 分别输入到图13所示的8个self-attention中，得到8个加权后的特征矩阵 <img src="https://www.zhihu.com/equation?tex=Z_i,+i%5Cin%5C%7B1,2,...,8%5C%7D" alt="[公式]"> 。</li><li>将8个 <img src="https://www.zhihu.com/equation?tex=Z_i" alt="[公式]"> 按列拼成一个大的特征矩阵；</li><li>特征矩阵经过一层全连接后得到输出 <img src="https://www.zhihu.com/equation?tex=Z" alt="[公式]"> 。</li></ol><p>整个过程如图14所示：</p><p><img src="https://pic3.zhimg.com/80/v2-c2a91ac08b34e73c7f4b415ce823840e_720w.jpg" alt="img"></p><ul><li><strong>Encoder-Decoder Attention</strong></li></ul><p>在解码器中，Transformer block比编码器中多了个encoder-cecoder attention。在encoder-decoder attention中， <img src="https://www.zhihu.com/equation?tex=Q" alt="[公式]"> <strong>来自于解码器的上一个输出， <img src="https://www.zhihu.com/equation?tex=K" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=V" alt="[公式]"> 则来自于与编码器的输出。</strong>其计算方式完全和Attention的计算过程相同。</p><p>在机器翻译中，解码过程是一个顺序操作的过程，也就是当解码第 <img src="https://www.zhihu.com/equation?tex=k" alt="[公式]"> 个特征向量时，我们只能看到第 <img src="https://www.zhihu.com/equation?tex=k-1" alt="[公式]"> 及其之前的解码结果，论文中把这种情况下的multi-head attention叫做masked multi-head attention。</p><ul><li><strong>位置编码</strong></li></ul><p>论文中在编码词向量时引入了位置编码（Position Embedding）的特征。具体地说，位置编码会在词向量中加入了单词的位置信息，这样Transformer就能区分不同位置的单词了。</p><p>编码位置常见的模式有：a. 根据数据学习；b. 自己设计编码规则。</p><p>论文给出的编码公式如下：</p><p><img src="https://www.zhihu.com/equation?tex=PE(pos,+2i)+=+sin(%5Cfrac%7Bpos%7D%7B10000%5E%7B%5Cfrac%7B2i%7D%7Bd_%7Bmodel%7D%7D%7D%7D)+%5Ctag3" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=PE(pos,+2i+1)+=+cos(%5Cfrac%7Bpos%7D%7B10000%5E%7B%5Cfrac%7B2i%7D%7Bd_%7Bmodel%7D%7D%7D%7D)+%5Ctag4" alt="[公式]"></p><p>作者这么设计的原因是考虑到在NLP任务中，除了单词的绝对位置，单词的相对位置也非常重要。</p><ul><li><strong>优点</strong></li></ul><p>（1）虽然Transformer最终也没有逃脱传统学习的套路，Transformer也只是一个全连接（或者是一维卷积）加Attention的结合体。但是<strong>其设计已经足够有创新，因为其抛弃了在NLP中最根本的RNN或者CNN并且取得了非常不错的效果</strong>，算法的设计非常精彩。</p><p>（2）Transformer的设计最大的<strong>带来性能提升的关键是将任意两个单词的距离是1</strong>，这对解决NLP中棘手的长期依赖问题是非常有效的。</p><p>（3）Transformer不仅仅可以应用在NLP的机器翻译领域，甚至可以<strong>不局限于NLP领域，是非常有科研潜力的一个方向</strong>。</p><p>（4）<strong>算法的并行性非常好</strong>，符合目前的硬件（主要指GPU）环境。</p><ul><li><strong>缺点</strong></li></ul><p>（1）粗暴的抛弃RNN和CNN虽然非常炫技，但是它也使<strong>模型丧失了捕捉局部特征的能力</strong>，RNN + CNN + Transformer的结合可能会带来更好的效果。（2）Transformer失去的位置信息其实在NLP中非常重要，而<strong>论文中在特征向量中加入Position Embedding也只是一个权宜之计，并没有改变Transformer结构上的固有缺陷</strong>。</p><h2 id="8-2-Informer"><a href="#8-2-Informer" class="headerlink" title="8.2 Informer"></a>8.2 Informer</h2><ul><li><p>详细解读见博客：<a href="https://mp.weixin.qq.com/s/RRv-DVm6SguQ5GC5oruf8Q">AAAI21最佳论文Informer：效果远超Transformer的长序列预测神器！</a></p></li><li><p><strong>基本思想：基于Transformer模型的三处改进</strong></p></li></ul><p>（1）<strong>ProbSparse Self-Attention</strong></p><p>在典型的Self-Attention机制中，少数点积对主要注意有贡献，其他点积对可以忽略，所以引入Query Sparsity评估。</p><p>并且使用最大值代替复杂的对数计算，既解决了计算精度问题，也降低了计算复杂度。</p><p><img src="http://img.fdchen.host/Informer-ProSparseSelfAttention%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png" alt="image-20210731210037446"></p><p>（2）<strong>Self-attention Distilling</strong></p><p>作为ProbSparse Self-attention的自然结果，encoder的特征映射会带来V值的冗余组合，利用distilling对具有支配特征的优势特征进行特权化，使它们的输出维度对齐。</p><p>（3）<strong>Generating long sequential outputs</strong></p><p>生成式长序列输出，从长序列中采样一个小部分token，作为预测序列之前的初始token，然后将初始token+初始化为0的预测序列拼接，作为Decoder的输入序列，然后通过前向过程预测所有输出，避免耗时的动态decoding。</p><h1 id="9-ELMO"><a href="#9-ELMO" class="headerlink" title="9 ELMO"></a>9 ELMO</h1><ul><li><p>全称：<a href="https://www.aclweb.org/anthology/N18-1202.pdf">Embedding from Language Model</a></p></li><li><p><strong>基本思想</strong></p></li></ul><p>以下内容来自博客：<a href="https://blog.csdn.net/qq_22795223/article/details/105924156">ELMo详解</a></p><p>之前2013年的word2vec及2014年的GloVe的工作中，每个词对应一个vector，对于多义词无能为力。ELMo的工作对于此，提出了一个较好的解决方案。不同于以往的一个词对应一个向量，是固定的。<strong>在ELMo世界里，预训练好的模型不再只是向量对应关系，而是一个训练好的模型。使用时，将一句话或一段话输入模型，模型会根据上下文来推断每个词对应的词向量。</strong>这样做之后明显的好处之一就是对于多义词，可以结合前后语境对多义词进行理解。比如appele，可以根据前后文语境理解为公司或水果。</p><p><strong>ELMO 本身是个根据当前上下文对 Word Embedding 动态调整的思路。</strong></p><ul><li><strong>算法模型</strong></li></ul><p>ELMo用到上文提到的双向的language model，给定N个tokens (t1, t2,…,tN), language model通过<strong>给定前面的k-1个位置的token序列计算第k个token的出现的概率:</strong></p><p><img src="https://www.zhihu.com/equation?tex=p(t_1,+t_2,+...,+t_N)+=+%5Cprod_%7Bk=1%7D%5EN+p(t_k%7Ct_1,+t_2,+...,+t_%7Bk-1%7D)" alt="[公式]"></p><p><strong>后向的计算方法与前向相似</strong>:</p><p><img src="https://www.zhihu.com/equation?tex=p%5Cleft(t_%7B1%7D,+t_%7B2%7D,+%5Cldots,+t_%7BN%7D%5Cright)=%5Cprod_%7Bk=1%7D%5E%7BN%7D+p%5Cleft(t_%7Bk%7D+%7C+t_%7Bk+1%7D,+t_%7Bk+2%7D,+%5Cldots,+t_%7BN%7D%5Cright)" alt="[公式]"></p><p><strong>biLM训练过程中的目标就是最大化</strong>:</p><p><img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bk=1%7D%5E%7BN%7D%5Cleft(%5Clog+p%5Cleft(t_%7Bk%7D+%7C+t_%7B1%7D,+%5Cldots,+t_%7Bk-1%7D+;+%5CTheta_%7Bx%7D,+%5Cvec%7B%5CTheta%7D_%7BL+S+T+M%7D,+%5CTheta_%7Bs%7D%5Cright)+%5Clog+p%5Cleft(t_%7Bk%7D+%7C+t_%7Bk+1%7D,+%5Cldots,+t_%7BN%7D+;+%5CTheta_%7Bx%7D,+%5Cstackrel%7B%5Cleftarrow%7D%7B%5CTheta%7D_%7BL+S+T+M%7D,+%5CTheta_%7Bs%7D%5Cright)%5Cright)" alt="[公式]"></p><p><strong>ELMo对于每个token <img src="https://www.zhihu.com/equation?tex=t_k" alt="[公式]"> , 通过一个L层的biLM计算出2L+1个表示:</strong></p><p><img src="https://www.zhihu.com/equation?tex=R_k+=+%5C%7Bx_k%5E%7BLM%7D,+%5Coverrightarrow%7Bh%7D_%7Bk,j%7D%5E%7BLM%7D,+%5Coverleftarrow%7Bh%7D_%7Bk,+j%7D%5E%7BLM%7D+%5Cvert+j=1,+...,+L%5C%7D+=+%5C%7Bh_%7Bk,j%7D%5E%7BLM%7D+%5Cvert+j=0,...,+L%5C%7D" alt="[公式]"></p><p>其中 <img src="https://www.zhihu.com/equation?tex=x_k%5E%7BLM%7D" alt="[公式]"> 是对token进行直接编码的结果(这里是<strong>字符通过CNN编码</strong>)， <img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bh%7D_%7Bk,+0%7D%5E%7BL+M%7D" alt="[公式]"> 代表 <img src="https://www.zhihu.com/equation?tex=x_k%5E%7BLM%7D" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=h_%7Bk,j%7D%5E%7BLM%7D+=+%5B%5Coverrightarrow%7Bh%7D_%7Bk,j%7D%5E%7BLM%7D;+%5Coverleftarrow%7Bh%7D_%7Bk,+j%7D%5E%7BLM%7D%5D" alt="[公式]"> 是每个biLSTM层输出的结果。在实验中还发现不同层的biLM的输出的token表示对于不同的任务效果不同.最上面一层的输出 <img src="https://www.zhihu.com/equation?tex=%5Coverrightarrow%7B%5Cmathbf%7Bh%7D%7D_%7Bk,+L%7D%5E%7BL+M%7D" alt="[公式]"> 是用softmax来预测下面一个单词 <img src="https://www.zhihu.com/equation?tex=t_%7Bk+1%7D" alt="[公式]">。</p><p>应用中将ELMo中所有层的输出R压缩为单个向量， <img src="https://www.zhihu.com/equation?tex=ELMo_k+=+E(R_k;%5CTheta+_%5Cepsilon)" alt="[公式]">，最简单的压缩方法是取最上层的结果做为token的表示: <img src="https://www.zhihu.com/equation?tex=E(R_k)+=+h_%7Bk,L%7D%5E%7BLM%7D" alt="[公式]"> ，更通用的做法是<strong>通过一些参数来联合所有层的信息得到最终的ELMo向量:</strong></p><p><strong><img src="https://www.zhihu.com/equation?tex=E+L+M+o_%7Bk%7D%5E%7Bt+a+s+k%7D=E%5Cleft(R_%7Bk%7D+;+%5CTheta%5E%7Bt+a+s+k%7D%5Cright)=%5Cgamma%5E%7Bt+a+s+k%7D+%5Csum_%7Bj=0%7D%5E%7BL%7D+s_%7Bj%7D%5E%7Bt+a+s+k%7D+h_%7Bk,+j%7D%5E%7BL+M%7D" alt="[公式]"></strong></p><p>其中 <img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bs%7D%5E%7B%5Coperatorname%7Btas%7D+k%7D" alt="[公式]"> 是一个softmax出来的结果, γ是一个任务相关的scale参数，我试了平均每个层的信息和学出来 <img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bs%7D%5E%7B%5Coperatorname+%7Btask%7D%7D" alt="[公式]"> 发现学习出来的效果会好很多。 文中提到γ在不同任务中取不同的值效果会有较大的差异， 需要注意， 在SQuAD中设置为0.01取得的效果要好于设置为1时。</p><p>文章中提到的Pre-trained的language model是用了两层的biLM， <strong>对token进行上下文无关的编码是通过CNN对字符级进行编码，</strong> 然后将三层的输出scale到1024维， 最后对每个token输出3个1024维的向量表示。 这里之所以将3层的输出都作为token的embedding表示是因为实验已经证实不同层的LM输出的信息对于不同的任务作用是不同的， 也就是所不同层的输出捕捉到的token的信息是不相同的。</p><ul><li><strong>具体实现</strong></li></ul><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/63115885">NAACL2018:高级词向量(ELMo)详解(超详细) 经典</a></p><p>ELMO 采用了典型的两阶段过程，<strong>第一个阶段是利用语言模型进行预训练；第二个阶段是在做下游任务时，从预训练网络中提取对应单词的网络各层的 Word Embedding 作为新特征补充到下游任务中。</strong></p><p><img src="https://pic2.zhimg.com/80/v2-945ea2c964e548cb9a9128864b5f6d49_720w.jpg" alt="img"></p><p>上图展示的是其预训练过程，它的网络结构采用了双层双向 LSTM，目前语言模型训练的任务目标是根<strong>据单词 <img src="https://www.zhihu.com/equation?tex=W_%7Bi%7D" alt="[公式]"> 的上下文去正确预测单词 <img src="https://www.zhihu.com/equation?tex=W_%7Bi%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=W_%7Bi%7D" alt="[公式]"> 之前的单词序列 Context-before 称为上文，之后的单词序列 Context-after 称为下文</strong>。图中左端的前向双层LSTM代表正方向编码器，输入的是从左到右顺序的除了预测单词外 <img src="https://www.zhihu.com/equation?tex=W_%7Bi%7D" alt="[公式]"> 的上文 Context-before；右端的逆向双层 LSTM 代表反方向编码器，输入的是从右到左的逆序的句子下文 Context-after；<strong>每个编码器的深度都是两层 LSTM 叠加。这个网络结构其实在 NLP 中是很常用的</strong>。</p><p>使用这个网络结构利用大量语料做语言模型任务就能预先训练好这个网络，如果训练好这个网络后，输入一个新句子Snew，<strong>句子中每个单词都能得到对应的三个Embedding</strong>:<strong>最底层是单词的 Word Embedding，往上走是第一层双向LSTM中对应单词位置的 Embedding，这层编码单词的句法信息更多一些；再往上走是第二层LSTM中对应单词位置的 Embedding，这层编码单词的语义信息更多一些</strong>。也就是说，ELMO 的预训练过程不仅仅学会单词的 Word Embedding，还学会了一个双层双向的LSTM网络结构，而这两者后面都有用。</p><p><img src="https://pic2.zhimg.com/80/v2-e53a17ada1d510958215cc860c33efb9_720w.jpg" alt="img"></p><p>上面介绍的是 ELMO 的第一阶段：预训练阶段。那么预训练好网络结构后，如何给下游任务使用呢？上图展示了下游任务的使用过程，比如我们的下游任务仍然是 QA 问题，此时<strong>对于问句 X，我们可以先将句子 X 作为预训练好的 ELMO 网络的输入，这样句子 X 中每个单词在 ELMO 网络中都能获得对应的三个 Embedding，之后给予这三个 Embedding 中的每一个 Embedding 一个权重a，这个权重可以学习得来，根据各自权重累加求和，将三个 Embedding 整合成一个。</strong></p><p><strong>然后将整合后的这个 Embedding 作为 X 句在自己任务的那个网络结构中对应单词的输入，以此作为补充的新特征给下游任务使用。</strong>对于上图所示下游任务 QA 中的回答句子 Y 来说也是如此处理。</p><p>因为 <strong>ELMO给下游提供的是每个单词的特征形式，所以这一类预训练的方法被称为“Feature-based Pre-Training”</strong>。</p><ul><li><strong>缺点（事后看）</strong></li></ul><ol><li>LSTM抽取特征能力远弱于Transformer</li><li>拼接方式双向融合特征，融合能力偏弱</li></ol><ul><li><strong>ELMo到XLnet模型</strong></li></ul><p><img src="http://img.fdchen.host/ELMo%E5%88%B0XLnet.png" alt="ElMo到XLnet"></p><h1 id="10-Bert"><a href="#10-Bert" class="headerlink" title="10 Bert"></a>10 Bert</h1><ul><li>全称：Bidirectional Encoder Representations from Transformers    </li><li>论文链接：<a href="https://arxiv.org/pdf/1810.04805.pdf">BERT: Pre-training of Deep Bidirectional Transformers for </a><a href="https://arxiv.org/pdf/1810.04805.pdf">Language Understanding</a></li><li>相关文档：<a href="https://d94sx79yh3.feishu.cn/docs/doccnDVZtP4PCYvvR4jRWxZDDgc">Bert</a></li></ul><p>以下内容来自博客：<a href="https://zhuanlan.zhihu.com/p/46652512">【NLP】Google BERT模型原理详解</a>、<a href="https://www.cnblogs.com/zingp/p/13849679.html">BERT模型详解</a></p><ul><li><strong>基本思想</strong></li></ul><p>模型的主要创新点都在pre-train方法上，即用了<strong>Masked LM和Next Sentence Prediction两种方法分别捕捉词语和句子级别的representation。</strong></p><p>由于模型的构成元素Transformer已经解析过，就不多说了，BERT模型的结构如下图最左：</p><p><img src="https://pic1.zhimg.com/80/v2-d942b566bde7c44704b7d03a1b596c0c_720w.jpg" alt="img"></p><p><strong>对比OpenAI GPT(Generative pre-trained transformer)，BERT是双向的Transformer block连接；就像单向RNN和双向RNN的区别，直觉上来讲效果会好一些。</strong></p><p><strong>对比ELMo，虽然都是“双向”，但目标函数其实是不同的。</strong>ELMo是分别以<img src="https://www.zhihu.com/equation?tex=P(w_i%7C+w_1,+...w_%7Bi-1%7D)" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=P(w_i%7Cw_%7Bi+1%7D,+...w_n)" alt="[公式]"> 作为目标函数，独立训练处两个representation然后拼接，而BERT则是以 <img src="https://www.zhihu.com/equation?tex=P(w_i%7Cw_1,++...,w_%7Bi-1%7D,+w_%7Bi+1%7D,...,w_n)" alt="[公式]"> 作为目标函数训练LM。</p><ul><li><strong>Embedding</strong></li></ul><p><img src="https://pic2.zhimg.com/80/v2-11505b394299037e999d12997e9d1789_720w.jpg" alt="img"></p><p>其中：</p><ol><li><strong>Token Embeddings</strong>是词向量，第一个单词是CLS标志，可以用于之后的分类任务</li><li><strong>Segment Embeddings</strong>用来区别两种句子，因为预训练不光做LM还要做以两个句子为输入的分类任务</li><li><strong>Position Embeddings</strong>和之前文章中的Transformer不一样，不是三角函数而是学习出来的</li></ol><ul><li><strong>Pre-training Task 1: Masked LM</strong></li></ul><p>在将单词序列输入给 BERT 之前，每个序列中有 15％ 的单词被 [MASK] token 替换。然后<strong>模型尝试基于序列中其他未被 mask 的单词的上下文来预测被mask的原单词。最终的损失函数只计算被mask掉那个token。</strong></p><p>如果一直用标记[MASK]代替（在实际预测时是碰不到这个标记的）会影响模型，具体的MASK是有trick的：</p><ol><li>随机mask的时候10%的单词会被替代成其他单词，10%的单词不替换，剩下80%才被替换为[MASK]。作者没有说明什么原因，应该是基于实验效果？</li><li><strong>要注意的是Masked LM预训练阶段模型是不知道真正被mask的是哪个词，所以模型每个词都要关注。</strong></li><li>训练技巧：序列长度太大（512）会影响训练速度，所以90%的steps都用seq_len&#x3D;128训练，余下的10%步数训练512长度的输入。</li><li>具体实现注意:<ul><li>i) 在encoder的输出上添加一个分类层。</li><li>ii) 用嵌入矩阵乘以输出向量，将其转换为词汇的维度。</li><li>iii) 用softmax计算词汇表中每个单词的概率。</li></ul></li><li><strong>BERT的损失函数只考虑了mask的预测值，忽略了没有掩蔽的字的预测。这样的话，模型要比单向模型收敛得慢，不过结果的情境意识增加了。</strong></li></ol><ul><li><strong>Pre-training Task 2:Next Sentence Prediction</strong></li></ul><p>LM存在的问题是，缺少句子之间的关系，这对许多NLP任务很重要。<strong>为预训练句子关系模型，bert使用一个非常简单的二分类任务：将两个句子A和B链接起来，预测原始文本中句子B是否排在句子A之后。</strong></p><ol><li><p>具体训练的时候，50％的输入对在原始文档中是前后关系，另外50％中是从语料库中随机组成的，并且是与第一句断开的。</p></li><li><p>为了帮助模型区分开训练中的两个句子，输入在进入模型之前要按以下方式进行处理：在第一个句子的开头插入 [CLS] 标记，在每个句子的末尾插入 [SEP] 标记。</p></li><li><p>将表示句子 A 或句子 B 的一个句子 embedding 添加到每个 token 上，即前文说的Segment Embeddings。</p></li><li><p>给每个token添加一个位置embedding，来表示它在序列中的位置。</p></li><li><p>为了预测第二个句子是否是第一个句子的后续句子，用下面几个步骤来预测：</p><ul><li>整个输入序列输入给 Transformer 模型用一个简单的分类层将[CLS]标记的输出变换为 2×1 形状的向量。</li><li>用 softmax 计算 IsNextSequence 的概率。</li></ul></li></ol><p><strong>在训练BERT模型时，Masked LM和 Next Sentence Prediction 是一起训练的，目标就是要最小化两种策略的组合损失函数。</strong></p><p><strong>注意：作者特意说了语料的选取很关键，要选用document-level的而不是sentence-level的，这样可以具备抽象连续长序列特征的能力。</strong></p><ul><li><strong>精调（Fine-tunning）</strong></li></ul><p><strong>对于不同的下游任务，我们仅需要对BERT不同位置的输出进行处理即可，或者直接将BERT不同位置的输出直接输入到下游模型当中。</strong>具体的如下：</p><ol><li>对于情感分析等单句分类任务，可以直接输入单个句子（不需要[SEP]分隔双句），将[CLS]的输出直接输入到分类器进行分类</li><li>对于句子对任务（句子关系判断任务），需要用[SEP]分隔两个句子输入到模型中，然后同样仅须将[CLS]的输出送到分类器进行分类</li><li>对于问答任务，将问题与答案拼接输入到BERT模型中，然后将答案位置的输出向量进行二分类并在句子方向上进行softmax（只需预测开始和结束位置即可）</li><li>对于命名实体识别任务，对每个位置的输出进行分类即可，如果将每个位置的输出作为特征输入到CRF将取得更好的效果。</li><li>对于常规分类任务中，需要在 Transformer 的输出之上加一个分类层。</li></ol><ul><li><strong>优点</strong>：<strong>效果好，</strong>横扫了11项NLP任务。bert之后基本全面拥抱transformer。微调下游任务的时候，即使数据集非常小（比如小于5000个标注样本），模型性能也有不错的提升。</li><li><strong>缺点</strong>：</li></ul><p>作者在文中主要提到的就是MLM预训练时的mask问题：</p><ol><li><strong>[MASK]标记在实际预测中不会出现，训练时用过多[MASK]影响模型表现</strong></li><li><strong>每个batch只有15%的token被预测，所以BERT收敛得比left-to-right模型（单向模型）要慢（它们会预测每个token）</strong></li></ol><ul><li><strong>特殊标志</strong></li></ul><p>BERT 的输入可以包含一个句子对 (句子 A 和句子 B)，也可以是单个句子。此外还增加了一些有特殊作用的标志位：</p><ol><li><strong>[CLS] 标志放在第一个句子的首位</strong>，经过 BERT 得到的的表征向量 C 可以用于后续的分类任务。</li><li><strong>[SEP] 标志用于分开两个输入句子</strong>，例如输入句子 A 和 B，要在句子 A，B 后面增加 [SEP] 标志。</li><li><strong>[UNK]标志指的是未知字符</strong></li><li><strong>[MASK] 标志用于遮盖句子中的一些单词，将单词用 [MASK] 遮盖之后，再利用 BERT 输出的 [MASK] 向量预测单词是什么</strong>。</li></ol><h1 id="11-XLNet"><a href="#11-XLNet" class="headerlink" title="11 XLNet"></a>11 XLNet</h1><ul><li><p>全称：XLNet: Generalized Autoregressive Pretraining for Language Understanding</p></li><li><p>论文链接：<a href="https://arxiv.org/pdf/1906.08237.pdf">https://arxiv.org/pdf/1906.08237.pdf</a></p></li><li><p>相关文档：<a href="https://d94sx79yh3.feishu.cn/docs/doccnvdvaZMeTtdKVn0gMAOkVlb">XLNet</a></p></li></ul><h1 id="12-GPT（1-2-3）"><a href="#12-GPT（1-2-3）" class="headerlink" title="12 GPT（1,2, 3）"></a>12 GPT（1,2, 3）</h1><ul><li><p>全称：Generative Pre-training Transformer  </p></li><li><p>论文链接：</p><ul><li>GPT-1  <a href="https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf">Improving Language Understanding by Generative Pre-Training</a></li><li>GPT-2  <a href="https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf">Language Models are Unsupervised Multitask Learners</a></li><li>GPT-3   <a href="https://arxiv.org/pdf/2005.14165.pdf">Language Models are Few-Shot Learners </a></li></ul></li><li><p>相关文档：</p><ul><li>GPT-1+GPT-2  <a href="https://d94sx79yh3.feishu.cn/docs/doccncdn7CtRQE9bFOoIqVmj14b">GPT1+GPT2</a>  </li><li>GPT-3  <a href="https://d94sx79yh3.feishu.cn/docs/doccnt7GykiRsOnslBPVi3bdq5c">GPT-3</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 经典模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学_线性代数</title>
      <link href="/2021/shu-xue-xian-xing-dai-shu/"/>
      <url>/2021/shu-xue-xian-xing-dai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-矩阵"><a href="#1-矩阵" class="headerlink" title="1 矩阵"></a>1 矩阵</h1><h2 id="1-1-正定矩阵"><a href="#1-1-正定矩阵" class="headerlink" title="1.1 正定矩阵"></a>1.1 正定矩阵</h2><ul><li>正定矩阵是所有特征值均为正的对称矩阵。</li><li>详见<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%AE%9A%E7%9F%A9%E9%98%B5">百度百科-正定矩阵</a></li></ul><h2 id="1-2-满秩矩阵"><a href="#1-2-满秩矩阵" class="headerlink" title="1.2 满秩矩阵"></a>1.2 满秩矩阵</h2><ul><li>设A是n阶矩阵, 若r(A) &#x3D; n, 则称A为满秩矩阵。但满秩不局限于n阶矩阵。</li><li>若矩阵秩等于行数，称为行满秩；若矩阵秩等于列数，称为列满秩。</li><li>既是行满秩又是列满秩则为n阶矩阵即n阶方阵。</li><li>行满秩矩阵就是行向量线性无关，列满秩矩阵就是列向量线性无关；所以如果是方阵,行满秩矩阵与列满秩矩阵是等价的。</li></ul><h2 id="1-3-正交矩阵"><a href="#1-3-正交矩阵" class="headerlink" title="1.3 正交矩阵"></a>1.3 正交矩阵</h2><p>如果AAT&#x3D;E（E为单位矩阵，AT表示“矩阵A的转置矩阵”）或ATA&#x3D;E，则n阶实矩阵A称为正交矩阵</p><h1 id="2-矩阵运算"><a href="#2-矩阵运算" class="headerlink" title="2 矩阵运算"></a>2 矩阵运算</h1><h2 id="2-1-奇异值分解"><a href="#2-1-奇异值分解" class="headerlink" title="2.1 奇异值分解"></a>2.1 奇异值分解</h2><p><img src="http://img.fdchen.host//SVD-1.png" alt="image-20210622114034909"></p><p><img src="http://img.fdchen.host//SVD-2.png" alt="image-20210622114110735"></p><h2 id="2-2-矩阵求导"><a href="#2-2-矩阵求导" class="headerlink" title="2.2 矩阵求导"></a>2.2 矩阵求导</h2><p>详见博客：<a href="https://fei-wang.github.io/matrix.html">矩阵求导</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学_高等数学数学</title>
      <link href="/2021/shu-xue-gao-deng-shu-xue/"/>
      <url>/2021/shu-xue-gao-deng-shu-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="1-条件概率及链式法则"><a href="#1-条件概率及链式法则" class="headerlink" title="1. 条件概率及链式法则"></a>1. 条件概率及链式法则</h1><h2 id="1-1-条件概率"><a href="#1-1-条件概率" class="headerlink" title="1.1 条件概率"></a>1.1 条件概率</h2><p>条件概率是指事件A在事件B发生的条件下发生的概率。条件概率表示为：P（A|B），读作“A在B发生的条件下发生的概率”。若只有两个事件A，B，那么，x&#x3D;x 事件发生时 y&#x3D;y 事件发生的概率: P(y&#x3D;y|x&#x3D;x) &#x3D; P(x&#x3D;x,y&#x3D;y) &#x2F; P(x&#x3D;x)。</p><h2 id="1-2-条件概率的链式法则"><a href="#1-2-条件概率的链式法则" class="headerlink" title="1.2 条件概率的链式法则"></a>1.2 条件概率的链式法则</h2><p>也称为条件概率的乘法法则，P(a,b,c)&#x3D;P(a|b,c) P(b,c) &#x3D; P(a|b,c) P(b|c) P(c)。</p><h2 id="1-3-推广到一般情况"><a href="#1-3-推广到一般情况" class="headerlink" title="1.3 推广到一般情况"></a>1.3 推广到一般情况</h2><p>P(x(1),x(2),⋯,x(n))&#x3D;P(x(n)|x(n−1),⋯,x(1))P(x(1),⋯,x(n−1))&#x3D;P(x(n)|x(n−1),⋯,x(1))P(x(n−1)|x(n−2),⋯,x(1))P(x(1),⋯,x(n−2))&#x3D;P(x(n)|x(n−1),⋯,x(1))P(x(n−1)|x(n−2),⋯,x(1))⋯P(x(2)|x(1))P(x(1))&#x3D;P(x(1))∏2nP(x(i))|x(1)⋯x(i−1))</p><p>条件概率的链式法则可以如下理解：<br>以 P(x(1),x(2),⋯,x(n))P(x(1),x(2),⋯,x(n)) 为例，可以看作 P(x(1))P(x(1)) 发生后，P(x(2)|x(1))P(x(1))P(x(2)|x(1))P(x(1)) 是x(1),x(2)x(1),x(2) 同时发生的概率，P(x(3)|x(1),x(2))P(x(2)|x(1))P(x(1))P(x(3)|x(1),x(2))P(x(2)|x(1))P(x(1)) 是 x(1),x(2),x(3)x(1),x(2),x(3) 同时发生的概率，依次类推下去，便可以得到条件概率的链式法则公式。</p><blockquote><p>原文链接：<a href="https://blog.csdn.net/NXHYD/article/details/104772086">https://blog.csdn.net/NXHYD/article/details/104772086</a></p></blockquote><h1 id="2-极大似然估计"><a href="#2-极大似然估计" class="headerlink" title="2. 极大似然估计"></a>2. 极大似然估计</h1><ul><li>见<a href="https://baike.baidu.com/item/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1">百度百科-极大似然估计</a></li></ul><h1 id="3-Softmax函数-x2F-归一化指数函数"><a href="#3-Softmax函数-x2F-归一化指数函数" class="headerlink" title="3. Softmax函数&#x2F;归一化指数函数"></a>3. Softmax函数&#x2F;归一化指数函数</h1><blockquote><p>注意概率函数中分子里的W的位置应该在e的指数上</p></blockquote><p><img src="http://img.fdchen.host/softmax%E5%87%BD%E6%95%B0.png" alt="image-20210730075235880"></p><ul><li>见<a href="https://baike.baidu.com/item/%E5%BD%92%E4%B8%80%E5%8C%96%E6%8C%87%E6%95%B0%E5%87%BD%E6%95%B0/22660782?fromtitle=Softmax%E5%87%BD%E6%95%B0&fromid=22772270">百度百科-归一化指数函数</a></li></ul><h1 id="4-平均数"><a href="#4-平均数" class="headerlink" title="4. 平均数"></a>4. 平均数</h1><h2 id="4-1-调和平均"><a href="#4-1-调和平均" class="headerlink" title="4.1 调和平均"></a>4.1 调和平均</h2><ul><li>调和平均数（harmonic mean）又称倒数平均数，是总体各统计变量倒数的算术平均数的倒数。</li><li>分为<strong>普通调和平均数</strong>和<strong>加权调和平均数</strong></li><li>详见<a href="https://baike.baidu.com/item/%E8%B0%83%E5%92%8C%E5%B9%B3%E5%9D%87%E6%95%B0">百度百科-调和平均数</a></li></ul><h2 id="4-2-算数平均"><a href="#4-2-算数平均" class="headerlink" title="4.2 算数平均"></a>4.2 算数平均</h2><ul><li>avge &#x3D; ( a+b ) &#x2F; 2</li></ul><h2 id="4-3-几何平均"><a href="#4-3-几何平均" class="headerlink" title="4.3 几何平均"></a>4.3 几何平均</h2><ul><li>avge &#x3D; ( a+b )^(1&#x2F;2)   (根号下 a+b)</li></ul><h1 id="5-闭式解与数值解"><a href="#5-闭式解与数值解" class="headerlink" title="5 闭式解与数值解"></a>5 闭式解与数值解</h1><h2 id="5-1-闭式解-x2F-解析解"><a href="#5-1-闭式解-x2F-解析解" class="headerlink" title="5.1 闭式解&#x2F;解析解"></a>5.1 闭式解&#x2F;解析解</h2><ul><li>就是给出解的具体函数形式，从解的表达式中就可以算出任何对应值</li></ul><p><img src="http://img.fdchen.host//%E9%97%AD%E5%BC%8F%E8%A7%A3%E4%BE%8B%E5%AD%90.png" alt="image-20210509134130816"></p><h2 id="5-2-数值解"><a href="#5-2-数值解" class="headerlink" title="5.2 数值解"></a>5.2 数值解</h2><ul><li>就是用数值方法求出解，给出一系列对应的自变量和解。</li></ul><h1 id="6-神经网络中的激活函数"><a href="#6-神经网络中的激活函数" class="headerlink" title="6. 神经网络中的激活函数"></a>6. 神经网络中的激活函数</h1><h2 id="6-1-双曲正切函数tanh"><a href="#6-1-双曲正切函数tanh" class="headerlink" title="6.1 双曲正切函数tanh"></a>6.1 双曲正切函数tanh</h2><ul><li><p>详见博客：<a href="https://www.jianshu.com/p/7409c8f1cdca">神经网络中的激活函数-tanh</a></p></li><li><p>特点</p><ul><li>函数：y&#x3D;tanh x；</li><li>定义域：R</li><li>值域：(-1,1)。</li><li>y&#x3D;tanh x是一个奇函数，其函数图像为过原点并且穿越Ⅰ、Ⅲ象限的严格单调递增曲线，其图像被限制在两水平渐近线y&#x3D;1和y&#x3D;-1之间。</li></ul></li><li><p>图像</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1531909-3ee8d5d56395220c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp" alt="img"></p><h2 id="6-2-maxout-激活函数"><a href="#6-2-maxout-激活函数" class="headerlink" title="6.2 maxout 激活函数"></a>6.2 maxout 激活函数</h2><p><img src="http://img.fdchen.host//maxout%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" alt="image-20210615022611321"></p><p>Maxout 激活函数特点：maxout激活函数并不是一个固定的函数，不像Sigmod、Relu、Tanh等函数，是一个固定的函数方程.它是一个可学习的激活函数，因为我们 W 参数是学习变化的。它是一个分段线性函数：</p><p><strong>优点</strong>：Maxout的拟合能力非常强，可以拟合任意的凸函数。Maxout具有ReLU的所有优点，线性、不饱和性。同时没有ReLU的一些缺点。如：神经元的死亡。</p><p><strong>缺点</strong>：从上面的激活函数公式中可以看出，每个神经元中有两组(w,b)参数，那么参数量就增加了一倍，这就导致了整体参数的数量激增。</p><h2 id="6-3-ReLU-整流线性单位函数"><a href="#6-3-ReLU-整流线性单位函数" class="headerlink" title="6.3 ReLU 整流线性单位函数"></a>6.3 ReLU 整流线性单位函数</h2><p><strong>整流线性单位函数</strong>（Rectified Linear Unit, <strong>ReLU</strong>）,又称<strong>修正线性单元</strong>, 是一种<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">人工神经网络</a>中常用的激励函数（activation function），通常指代以<a href="https://zh.wikipedia.org/wiki/%E6%96%9C%E5%9D%A1%E5%87%BD%E6%95%B0">斜坡函数</a>及其变种为代表的非线性函数。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Ramp_function.svg/1920px-Ramp_function.svg.png" alt="img"></p><center>整流线性单位函数</center><h2 id="6-4-ELU"><a href="#6-4-ELU" class="headerlink" title="6.4 ELU"></a>6.4 ELU</h2><p><img src="http://img.fdchen.host//ELUpng" alt="image-20210626024139815"></p><ul><li>融合了sigmoid和ReLU，左侧具有软饱和性，右侧无饱和性。</li><li>右侧线性部分使得ELU能够缓解梯度消失，而左侧软饱能够让ELU对输入变化或噪声更鲁棒。</li><li>ELU的输出均值接近于零，所以收敛速度更快。</li><li>在 ImageNet上，不加 Batch Normalization 30 层以上的 ReLU 网络会无法收敛，PReLU网络在MSRA的Fan-in （caffe ）初始化下会发散，而 ELU 网络在Fan-in&#x2F;Fan-out下都能收敛。</li></ul><h1 id="7-Bootstrapping自助抽样法"><a href="#7-Bootstrapping自助抽样法" class="headerlink" title="7. Bootstrapping自助抽样法"></a>7. Bootstrapping自助抽样法</h1><p>在<strong>统计学</strong>中，<strong>自助法</strong>（Bootstrap Method，Bootstrapping，或<strong>自助抽样法</strong>、<strong>拔靴法</strong>）是一种从给定训练集中有放回的均匀抽样，也就是说，每当选中一个样本，它等可能地被再次选中并被再次添加到训练集中。自助法由Bradley Efron于1979年在《Annals of Statistics》上发表。当<a href="https://zh.wikipedia.org/wiki/%E6%A8%A3%E6%9C%AC_(%E7%B5%B1%E8%A8%88%E5%AD%B8)">样本</a>来自能以<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83">正态分布</a>来描述的总体，其<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E6%A8%A3%E5%88%86%E5%B8%83&action=edit&redlink=1">抽样分布</a>为正态分布；但当样本来自的总体无法以正态分布来描述，则以<a href="https://zh.wikipedia.org/w/index.php?title=%E6%BC%B8%E9%80%B2%E5%88%86%E6%9E%90%E6%B3%95&action=edit&redlink=1">渐进分析法</a>、自助法等来分析。采用随机可置换抽样（random sampling with replacement）。对于小数据集，自助法效果很好。</p><p>最常用的一种是.632自助法，假设给定的数据集包含d个样本。该数据集有放回地抽样d次，产生d个样本的训练集。这样原数据样本中的某些样本很可能在该样本集中出现多次。没有进入该训练集的样本最终形成检验集（测试集）。 显然每个样本被选中的概率是1&#x2F;d，因此未被选中的概率就是(1-1&#x2F;d)，这样一个样本在训练集中没出现的概率就是d次都未被选中的概率，即(1-1&#x2F;d)^d。当d趋于无穷大时，这一概率就将趋近于e^-1&#x3D;0.368，所以留在训练集中的样本大概就占原来数据集的63.2%。</p><h1 id="8-马尔可夫模型"><a href="#8-马尔可夫模型" class="headerlink" title="8. 马尔可夫模型"></a>8. 马尔可夫模型</h1><p>TODO</p><p>当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔可夫性质。马尔可夫假设（Markov assumption）则是用来假设描述一个模型具有马尔可夫性质，比如隐马尔可夫模型。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP_《开放域语义解析》总结</title>
      <link href="/2021/nlp-kai-fang-yu-yu-yi-jie-xi-zong-jie/"/>
      <url>/2021/nlp-kai-fang-yu-yu-yi-jie-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文章所属Github项目链接：<a href="https://github.com/casnlu/Semantic-Parsing">https://github.com/casnlu/Semantic-Parsing</a></p></blockquote><h1 id="1-语义解析简介"><a href="#1-语义解析简介" class="headerlink" title="1 语义解析简介"></a>1 语义解析简介</h1><ul><li>自然语言多样，具有歧义，其理解依赖世界知识和情境。</li><li>计算机能理解的语言时统一语义、显式结构、无歧义的。</li></ul><span id="more"></span><h2 id="1-1-研究意义"><a href="#1-1-研究意义" class="headerlink" title="1.1 研究意义"></a>1.1 研究意义</h2><p>语义解析是实现自然语言理解的关键技术之一，目的在于<strong>建立自然语言到计算机可以理解的形式化语义表示</strong>的映射。</p><h2 id="1-2-任务介绍"><a href="#1-2-任务介绍" class="headerlink" title="1.2 任务介绍"></a>1.2 任务介绍</h2><ul><li>任务定义</li></ul><p>将自然语言句子转换成计算机可识别的、可计算的、完全的语义表示，如lambda-表达式（λ演算）、SQL、语义图等。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%AF%E8%AF%86%E5%88%AB%E8%AF%AD%E8%A8%80.jpg" alt="自然语言到计算机可识别语言"></p><ul><li>自然语言的四大层次<ul><li>词法：词语的起源，以及词与词之间的关联</li><li>语法：句子的语法和结构</li><li>语义：句子表达的是什么意思</li><li>语用：句子背后的用意</li></ul></li><li>语言到语义由浅入深的表示方法<ul><li>语义角色标注（SRL）</li><li>框架语义解析（Frame-SP）</li><li>语义解析（SP）</li></ul></li><li>任务场景<ul><li>语言到结构化查询语言（language to query）</li><li>语言到代码（language to code）</li><li>语言到机器操作指令（language to instruction）</li></ul></li></ul><h2 id="1-3-重要组件"><a href="#1-3-重要组件" class="headerlink" title="1.3 重要组件"></a>1.3 重要组件</h2><ul><li>核心组件<ul><li>语义表示</li><li>解析模型</li><li>学习算法</li></ul></li></ul><h3 id="1-3-1-语义表示"><a href="#1-3-1-语义表示" class="headerlink" title="1.3.1 语义表示"></a>1.3.1 语义表示</h3><ul><li>框架语义表示：工业界常用<ul><li>优势：结构性表示，语义明确</li><li>劣势：人工定义框架，覆盖性有限</li></ul></li><li>分布式语义表示：一种文本表示的形式，指的是低维、稠密的连续向量。<ul><li>优势：应用性好，对机器友好</li><li>劣势：整体表示，细粒度区分不好</li></ul></li><li>模型理论-组合语义表示：学术界常用<ul><li>优势：表达能力强，机器可直接利用</li><li>劣势：难以生成</li></ul></li></ul><h3 id="1-3-2-解析模型"><a href="#1-3-2-解析模型" class="headerlink" title="1.3.2 解析模型"></a>1.3.2 解析模型</h3><p>句子转换为语义表示的建模</p><ul><li>基于规则的模型</li><li>基于统计的模型</li><li>基于神经网络的模型</li></ul><h3 id="1-3-3-学习算法"><a href="#1-3-3-学习算法" class="headerlink" title="1.3.3 学习算法"></a>1.3.3 学习算法</h3><p>如何学习转换过程</p><ul><li>目的</li></ul><p>让解析模型从一个句子的多种候选语义表示中选择争取的语义表示</p><ul><li>监督学习算法</li></ul><p>输入：&lt;句子，语义表示&gt; 标注对</p><p>目标：最大似然估计——p(语义表示|句子)</p><ul><li>弱监督学习算法</li></ul><p>输入：弱监督信号，如&lt;句子，知识库，答案&gt; ，&lt;句子，候选，点击&gt; 标注</p><p>目标：最大边界似然估计，语义表示当作潜变量</p><ul><li>相关资源：语义解析工具包<ul><li><a href="https://github.com/percyliang/sempre">Sempre</a></li><li><a href="https://github.com/lil-lab/spf">Cornell SPF</a></li><li><a href="https://github.com/allenai/allennlp">AllenNLP</a></li></ul></li></ul><h2 id="1-4-发展历程"><a href="#1-4-发展历程" class="headerlink" title="1.4 发展历程"></a>1.4 发展历程</h2><h3 id="1-4-1-基于规则的语义解析方法"><a href="#1-4-1-基于规则的语义解析方法" class="headerlink" title="1.4.1 基于规则的语义解析方法"></a>1.4.1 基于规则的语义解析方法</h3><ul><li>STUDENT系统 [Bobrow, 1964]：基于规则的线性代数求解</li><li>规则系统：错误可控可溯源、起步容易&#x2F;自助构建、增量式模型</li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E7%9A%84%E8%AF%AD%E4%B9%89%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.jpg" alt="基于规则的语义解析方法"></p><h3 id="1-4-2-基于统计的语义解析方法"><a href="#1-4-2-基于统计的语义解析方法" class="headerlink" title="1.4.2 基于统计的语义解析方法"></a>1.4.2 基于统计的语义解析方法</h3><ul><li>代表性方法：基于词典-组合文法的语义解析<ul><li>CCG和DCS</li><li>核心组件：词典（lexicon）、组合文法（grammar）、概率模型</li><li>核心思想：层层递进组合词典</li></ul></li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E5%9F%BA%E4%BA%8E%E7%BB%9F%E8%AE%A1%E7%9A%84%E8%AF%AD%E4%B9%89%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.jpg" alt="基于统计的语义解析方法"></p><h3 id="1-4-3-基于语义图的语义解析方法"><a href="#1-4-3-基于语义图的语义解析方法" class="headerlink" title="1.4.3 基于语义图的语义解析方法"></a>1.4.3 基于语义图的语义解析方法</h3><p>构建语义图，而后基于知识图谱进行语义解析。</p><ul><li>用语义图来表示句子的语义</li><li>语义解析转换为语义图构建&#x2F;生成的问题</li><li>优势：<ul><li>不需要提前学习词典</li><li>不需要定义组合文法</li><li>可充分利用知识库的约束</li></ul></li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E5%9F%BA%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%9B%BE%E7%9A%84%E8%AF%AD%E4%B9%89%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.jpg" alt="基于语义图的语义解析方法"></p><h3 id="1-4-4-基于神经网络的语义解析方法"><a href="#1-4-4-基于神经网络的语义解析方法" class="headerlink" title="1.4.4 基于神经网络的语义解析方法"></a>1.4.4 基于神经网络的语义解析方法</h3><ul><li>将逻辑表达式序列化</li><li>语义解析转换为<strong>词语序列到逻辑表达式序列</strong>的翻译过程（Seq2Seq）</li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E5%9F%BA%E4%BA%8E%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AF%AD%E4%B9%89%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.jpg" alt="基于神经网络的语义解析方法"></p><h1 id="2-基于词典-组合文法的语义解析"><a href="#2-基于词典-组合文法的语义解析" class="headerlink" title="2 基于词典-组合文法的语义解析"></a>2 基于词典-组合文法的语义解析</h1><h2 id="2-1-组合语义的基本准则"><a href="#2-1-组合语义的基本准则" class="headerlink" title="2.1 组合语义的基本准则"></a>2.1 组合语义的基本准则</h2><p>复杂表达式的意义由<strong>其子表达式的意义以及意义如何组合的规则</strong>共同决定。</p><ul><li>关键组件<ul><li>词典：存储自然语言词语到词语语义的映射；语义组合的基本单元</li><li>组合文法：将小语义单元组合成更大的语义单元；组合语义基本准则中的combining rule</li></ul></li></ul><h2 id="2-2-代表性方法"><a href="#2-2-代表性方法" class="headerlink" title="2.2 代表性方法"></a>2.2 代表性方法</h2><h3 id="2-2-1-基于CCG的语义解析"><a href="#2-2-1-基于CCG的语义解析" class="headerlink" title="2.2.1 基于CCG的语义解析"></a>2.2.1 基于CCG的语义解析</h3><ul><li>CCG (Combinatory Categorial Grammar，组合范畴文法)，由ACL终身成就奖获得者Steedman教授提出</li><li>早期用于句法分析，后期由Zettlemoyer &amp; Collins(05)应用于语义解析：可以捕捉句子长距离依赖</li><li>核心组件：<ul><li>词典：使用CCG Category 来表示词汇语义</li><li>组合文法：CCG组合算子（combinators）</li><li>句子语义：使用lambda表达式表示句子语义</li></ul></li><li>语义表示：Lambda表达式<ul><li>常量Constants&#x2F;变量Var</li><li>谓词Predicate</li><li>逻辑连接词：与、或、非、蕴含</li><li>量词</li><li>额外函数：Count, argmax, average</li></ul></li><li>词典Lexicon：词语到范畴（category）的映射（范畴同时包含句法信息和语义信息）</li></ul><table>   <tr>      <td rowspan="2" align="center">词语</td>      <td colspan="2" align="center">范畴（category）</td>   </tr>   <tr>      <td>句法部分</td>      <td>语义部分</td>   </tr>   <tr>      <td>Texas(德州)</td>      <td>NP</td>      <td>texas</td>   </tr>   <tr>      <td>borders</td>      <td>(S\NP)/NP</td>      <td>𝜆𝑥. 𝜆𝑦. 𝑏𝑜𝑟𝑑𝑒𝑟(𝑦, 𝑥)</td>   </tr>   <tr>      <td>Kansas(堪萨斯州)</td>      <td>NP</td>      <td>kansas</td>   </tr>   <tr>      <td>Kansas city(堪萨斯城)</td>      <td>NP</td>      <td>kansas_city_mo(密苏里州堪萨斯城)</td>   </tr></table><p>其中<em>S</em>，<em>NP</em>是CCG里面的基本类型（还有<em>N</em>） ：</p><p>（1）S 表示一个完整的句子</p><p>（2）NP 表示一个专有名词（实体词汇）</p><p>（3）N 表示一个普通名词（类型词汇）</p><p>（S\NP)&#x2F;NP是一种复合类型（二元谓词词汇）：</p><p>（1）右向的slash(&#x2F;)表示右侧可以接受一个参数（ NP ），接受之后得到左侧的类型（S\NP） </p><p>（2）左向的slash(\)表示左侧可以接收一个参数（ NP ），接受之后得到左侧的类型（<em>S</em>）</p><p>（3）在此处得出的信息是border是一个语法上的连接词</p><ul><li>组合算子combinators，连接符（前三个为核心连接符）</li></ul><p>（1）Application conbinators应用连接符（前向 &lt; 和 后向 &gt;）</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/CCG_%E5%BA%94%E7%94%A8%E8%BF%9E%E6%8E%A5%E7%AC%A6.jpg" alt="CCG-应用连接符"></p><p>举例说明：A&#x2F;B 代表 <strong>往右（后向）找一个B形成A的一种函数关系f</strong>，即得到 A: f(g)</p><p>（2）Composition combinators组合连接符（前向 &lt;B 和后向 &gt;B，前后向找B）</p><p>类似于组合两个函数，得到一个新函数同时保留函数的功能，多用于串联两个条件短语（如示例中的 the latest 和 one way）。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/CCG-%E7%BB%84%E5%90%88%E8%BF%9E%E6%8E%A5%E7%AC%A6.jpg" alt="image-20210714161445215"></p><p>举例说明：A&#x2F;B 代表 <strong>往右（后向）找到一个B形成A的一种函数关系f</strong>，B&#x2F;C 代表往右（后向）找到一个C形成B的一个函数关系g，即得到：A: f(g(x))</p><p>（3）Type-raising combinators类型提升连接符(T)（前向 &lt;T 和 后向 &gt;T，意味着前&#x2F;后向找T）</p><p>类似于参数变为函数，函数的功能取决于新增的 T。</p><p>并列：刘德华和陈奕迅的歌曲</p><p>省略：播放刘德华（需要把刘德华提升为Song类型）</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/CCG_%E7%B1%BB%E5%9E%8B%E6%8F%90%E5%8D%87%E7%AC%A6.jpg" alt="CCG-类型提升符"></p><p>举例说明：在例子中，border Texas and Idaho 所组成的是 (S\NP)&#x2F;NP NP and NP，假如不进行类型提升，即变成 (S\NP) and NP，无法表示并列关系，后续的NP无法解析。因而需要类型提升，把NP变为函数，其类型符取决于border的转换结果 (S\NP)，Texas, Idaho 的 NP类型变为函数后，即可利用并列 ^，将border与Texas 和 Idaho进行组合连接。</p><ul><li>解析过程中的歧义</li></ul><p>（1）Lexicon层（主要）</p><p>一个词语可以映射到多个的category，比如Mississippi 既可以映射为 state: Mississippi，又可以映射为river: Mississippi。</p><p>（2）组合层（可忽略）</p><p>存在多种组合的可能性，但往往会得到相同的lambda-表达式。</p><ul><li>PCCG：估计每一个lambda-表达式的概率</li></ul><p>对数线性模型：S为句子，L为lambda-表达式，T为解析的过程， θ 为模型参数，f(L,T,S)为<strong>该解析的特征函数</strong>（作为一种评价指标），一个句子为解析为L的概率为：</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/PCCG%E6%A8%A1%E5%9E%8B.jpg" alt="PCCG模型"></p><p>原理：一个句子为解析为L的概率为，所有解析过程中，解析出为同一个Lambda-表达式的概率之和。每个过程解析成表达式的概率进行了归一化。</p><p><strong>重要特征</strong>：使用词汇、使用的组合文法</p><p><strong>参数学习</strong>：基于标注好的&lt;S, L&gt;对、最大化似然</p><ul><li>松弛的CCG文法</li></ul><p><strong>原因</strong>：CCG的文法过于严格，使得模型比较脆弱，特别是当面向口语化的文本的时候，会有大量词序错乱，省略的现象。</p><p>（1）Relaxed Application（允许词序的变化，slash方向可变，使用 ^ 符号组合）</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E6%9D%BE%E5%BC%9B%E7%9A%84CCG_RelaxedApplication.jpg" alt="松弛的CCG-RelaxedApplication"></p><p>（2）Relaxed Composition（允许短语的前置或者后置，slash方向可变，使用 ^ 符号组合）</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E6%9D%BE%E5%BC%9B%E7%9A%84CCG_RelaxedComposition.jpg" alt="松弛的CCG-RelaxedComposition"></p><p>（3）Type-shifting（允许省略）</p><p>将实体名词NP变为 N\N 类型的名词，在例子中省略了from。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E6%9D%BE%E5%BC%9B%E7%9A%84CCG_Type_shifting.jpg" alt="松弛的CCG-Type-shifting"></p><ul><li>因子化词汇</li></ul><p><strong>问题</strong>：词典在CCG parsing中至关重要，而词典稀疏，难以学习</p><p><strong>现象</strong>：一个词语可以映射到多个类型，一个类型又会在多个词汇中共享</p><p><strong>方法</strong>：因子化词汇，用参数表示的式子表示类型，以表达多种词汇到类型的映射</p><h3 id="2-2-2-基于DCS的语义解析"><a href="#2-2-2-基于DCS的语义解析" class="headerlink" title="2.2.2 基于DCS的语义解析"></a>2.2.2 基于DCS的语义解析</h3><p>DCS (Dependency-based compositional semantics，依存组合语义文法)由Percy Liang于2011年提出。DCS是一种语义表示体系，同时包含了从句子到语义表示所需的词典和组合文法。与CCG类似，基于组合语义的思想，依赖于<strong>词典</strong>和<strong>组合文法</strong>。</p><ul><li>DCS的特点</li></ul><p>（1）表示能力强：需要与lambda-表达式具备等价的语义表示能力</p><p>（2）简洁：与lambda-表达式相比，DCS的表示更加简洁</p><p>（3）结构清晰：保有与自然语言类似的结构</p><ul><li>语义</li></ul><p>（1）集合论：一个语义表示的语义是符合其语义约束的所有值的集合。</p><p>-  山东省 → {山东省} (山东) </p><p>− PlaceOfBirth → {&lt;莫言，山东&gt;，&lt;秦琼，山东&gt;，&lt;居里，法国&gt;, …} </p><p>− Profession→ {&lt;莫言，作家&gt;， &lt;秦琼，武将&gt;，&lt;居里，科学家&gt;}</p><p>− PlaceOfBirth.山东→ {莫言，秦琼, …} (山东出生) </p><p>− PlaceOfBirth.山东 ^ Profession.作家 → {莫言…} (山东出生的作家)</p><ul><li>词典</li></ul><p><strong>Unary case (u)<strong>：其语义为</strong>实体集合</strong></p><p>− 实体:“Texas”→ texas {texas} </p><p>− 类型：“state”→ state {纽约州、华盛顿州、密西西比州…}</p><p><strong>Binary case (b)</strong>: 其语义为符合关系的<strong>元组集合</strong></p><p>− 二元谓词（predicate）: “born”→ PlaceOfBirth {&lt;莫言，山东&gt;， &lt;秦琼，山东&gt;，&lt;居里，法国&gt;, …}</p><ul><li>组合文法-集合和集合之间的组合和转换</li></ul><p>（1）Join（合并）</p><p>− binary (Join) unary → unary</p><p>− unary (Join) binary → unary</p><p>− 山东 出生 → 出生.山东</p><p>− {山东} (Join) {&lt;莫言，山东&gt;，&lt;秦琼，山东&gt;，&lt;居里，法国&gt;, …} → {莫言，秦琼， …}</p><p>（2）Intersection（交集）</p><p>− unary (Intersection) unary → unary</p><p>− 流行歌手 → 流行 AND 歌手</p><p>（3）Union（并集）</p><p>− unary (Union) unary → unary</p><p>− 周杰伦或刘德华 → 周杰伦 OR 刘德华</p><p>（4）高阶函数</p><p>− Count (计数)：Count unary → unary</p><p>− argmax, argmin, max, min等</p><p>− 周杰伦的歌曲 数目 → Count(周杰伦的歌曲)</p><ul><li>解析例子（从下往上组合）</li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/DCS_%E8%A7%A3%E6%9E%90%E4%BE%8B%E5%AD%90.jpg" alt="DCS-解析例子"></p><h2 id="2-3-从限定域到开放域"><a href="#2-3-从限定域到开放域" class="headerlink" title="2.3 从限定域到开放域"></a>2.3 从限定域到开放域</h2><p>关键问题：词典覆盖不足、结构不匹配、标注语料成本过高。</p><h3 id="2-3-1-词典扩充学习"><a href="#2-3-1-词典扩充学习" class="headerlink" title="2.3.1 词典扩充学习"></a>2.3.1 词典扩充学习</h3><p>词典覆盖不足。</p><ul><li>使用实体对共现（Reference），核心是知识库的建立</li></ul><p>基本假设：文本中的三元组与知识库中的三元组若<strong>有多个共同的实体对</strong>，则文本中</p><p>的关系（词语）映射到知识库中的关系（词语语义）</p><ul><li>使用标签传播算法，核心是语义相似度的度量</li></ul><p>基本假设：意思相近的词语应该映射到相同的语义</p><h3 id="2-3-2-复述-x2F-重写"><a href="#2-3-2-复述-x2F-重写" class="headerlink" title="2.3.2 复述&#x2F;重写"></a>2.3.2 复述&#x2F;重写</h3><p>由自然语言多样性引起的本体不匹配问题。</p><ul><li>复述</li></ul><p>原理：将语义解析反过来，先得到句子的语义表示，然后生成新的句子，利用复述模型判断</p><p>新句子与原句子是否构成复述关系。</p><ul><li>重写</li></ul><p>原理：一个句子存在另外一种表达，该表达与原句子具有相同的语义，并且其结构与目标语义表示的结构一致</p><h3 id="2-3-3-弱监督学习"><a href="#2-3-3-弱监督学习" class="headerlink" title="2.3.3 弱监督学习"></a>2.3.3 弱监督学习</h3><p>语义表示难以标注。</p><ul><li>利用语义表示的执行结果（如问题的答案）来监督模型的学习</li></ul><h2 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h2><ul><li><strong>核心组件</strong>：词典+组合文法+学习算法</li><li><strong>代表性方法</strong>：CCG，DCS</li><li><strong>从限定域到开放域</strong>：词典补充学习、复述&#x2F;重写、弱监督学习</li><li><strong>优点</strong>：<ul><li>基于组合语义的思想</li><li>有词典和组合规则，整个解析过程可见，可解释性强</li></ul></li><li><strong>缺点</strong>：<ul><li>太依赖词典，若有词典未覆盖的词语，就无法解析</li><li>脆弱，依赖组合文法，有些复杂的语言现象，文法也无法覆盖</li></ul></li></ul><h1 id="3-基于语义图的语义解析"><a href="#3-基于语义图的语义解析" class="headerlink" title="3 基于语义图的语义解析"></a>3 基于语义图的语义解析</h1><ul><li><p>关键组件：</p><ul><li>语义图表示</li><li>语义图构建</li></ul></li><li><p>使用语义图作为目标语义表示</p><ul><li>优点：语义图的结构与自然语言句子的结构具有类似性</li></ul></li><li><p>语义解析过程由组合文法转换为语义图构建</p><ul><li>优点：可以充分使用知识库知识的约束，，从而有效减少搜索空间</li></ul></li><li><p>语义图：</p><ul><li>可以看作知识库的一个子图</li><li>基本组成：<ul><li>节点，如实体、变量或者类型</li><li>边，表示关系</li><li>操作符，如count，argmax等</li></ul></li></ul></li><li><p>语义图构建代表性方法</p><ul><li>DepLambda [Reddy et al, 2016]：依存树到语义图转换文法</li><li>STAGG [Yih, et al., 2015]: 分步骤构建方法</li><li>Template [Bast &amp; Haussmann, 2015]: 基于模板的语义图生成</li></ul></li></ul><h2 id="3-1-DepLambda：依存树到语义图转换"><a href="#3-1-DepLambda：依存树到语义图转换" class="headerlink" title="3.1 DepLambda：依存树到语义图转换"></a>3.1 DepLambda：依存树到语义图转换</h2><ul><li>原理：依存树与目标逻辑表达式具有类似的结构。</li></ul><p>（0）预处理：依存关系解析，句子→依存树</p><p>（1）Dependencies to Logical Forms，利用依存关系组合词汇，依存树→Ungrounded lambda-表达式，<strong>类似CCG方法的解析过程</strong></p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/DepLambda_DependenciestoLogicalForms.jpg" alt="DepLambda-DependenciestoLogicalForms"></p><p>（2）Map Logical Form to Ungrounded Graph，Ungrounded lambda-表达式→Ungrounded graph</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/DepLambda_lambda_%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0UngroundedGraph.jpg" alt="DepLambda-lambda-表达式到UngroundedGraph"></p><p>（3）Map Ungrounded Graph to Semantic Graph，Ungrounded graph→Grounded graph（语义图）</p><p>−实体词 链接到知识库中的实体，如<em>Titanic</em> → TITANIC</p><p>−关系词 链接到知识库中的关系，如<em>directed</em> → film.directed_by</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/DepLambda_Grounding.jpg" alt="DepLambda-Grounding"></p><h2 id="3-2-STAGG：分步搭建语义图"><a href="#3-2-STAGG：分步搭建语义图" class="headerlink" title="3.2 STAGG：分步搭建语义图"></a>3.2 STAGG：分步搭建语义图</h2><ul><li>分步搭建语义图的好处：</li></ul><p>（1）每一步都可以使用最好的技术</p><p>（2）每进行一步都可以利用知识库的约束来减少搜索空间</p><ul><li>基本概念</li></ul><p>（1）中心链</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/STAGG_%E4%B8%AD%E5%BF%83%E9%93%BE.jpg" alt="STAGG-中心链"></p><p>（2）约束</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/STAGG_%E7%BA%A6%E6%9D%9F.jpg" alt="STAGG-约束"></p><ul><li>主要步骤：</li></ul><p>（1）中心实体链接：识别实体</p><p>识别出句子中的所有实体，特别是找到中心链上的中心实体</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/STAGG_%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5.jpg" alt="STAGG-中心实体链接"></p><p>（2）关系链匹配</p><p>要求：与中心实体连接的长度不能超过2的所有关系链作为候选。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/STAGG_%E5%85%B3%E7%B3%BB%E9%93%BE%E5%8C%B9%E9%85%8D.jpg" alt="STAGG-关系链匹配"></p><p>在求出关系链后，可以通过不同的方法，如以最大似然估计为目标函数的Deep Convolutional Neural Networks，来从知识库中找到对应的目标实体集（问题答案的集合）。</p><p>（3）添加约束条件</p><p>最后通过将约束条件作用于目标实体集，缩小或者找到对应的目标实体（最终的问题答案）。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/STAGG_%E6%B7%BB%E5%8A%A0%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6.jpg" alt="STAGG-添加约束条件"></p><ul><li>性能：具有高召回率。</li></ul><p>（1）并不需要词典，也不受限于词典的覆盖率；<br>（2）可以通过神经网络模型来建模软匹配过程，能处理模拟匹配的情况，解决OOV问题(out of vocabulary words)</p><h2 id="3-3-Template：基于模板的语义图构建"><a href="#3-3-Template：基于模板的语义图构建" class="headerlink" title="3.3 Template：基于模板的语义图构建"></a>3.3 Template：基于模板的语义图构建</h2><ul><li>出发点：查询往往都具有固定的若干模板(template)，可通过设计有限的模板来覆盖绝大部分的查询。基于template的方法可以把语义图构建转换为模板匹配问题，能够大大简化此问题。</li><li>关键：<ul><li>模板的定义</li><li>模板的匹配</li></ul></li><li>模板的定义</li></ul><p>3个模板覆盖Webquestions和Free917数据集中绝大部分查询。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Template_%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt="Template-模板的定义"></p><p>其中，m是虚实体，为了关系连接而虚构的实体，需要注意的是company, film这种表示类型的词汇也属于一种关系。</p><ul><li>模板匹配</li></ul><p>（1）实体链接，识别句子中的实体</p><p>（2）匹配模板，匹配上述的三个模板</p><p>（3）关系匹配，根据关系在知识库中进行匹配，找到目标实体</p><ul><li>性能：高召回率</li></ul><p>模板能够覆盖大部分的问题，简化了语义图构建的过程。</p><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h2><ul><li><p><strong>核心：</strong>语义图的语义表示、语义图的构建</p></li><li><p><strong>代表性方法：</strong>DepLambda、STAGG、Template </p></li><li><p><strong>优点</strong>：</p><ul><li>不需要词典和组合文法</li><li>语义图的结构与句子的依存结构具有相似性</li><li>与知识库紧密联系，可充分利用知识库知识的约束</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>往往依赖于一些启发式的方法来构建语义图</li></ul></li></ul><h1 id="4-基于神经网络的语义解析"><a href="#4-基于神经网络的语义解析" class="headerlink" title="4 基于神经网络的语义解析"></a>4 基于神经网络的语义解析</h1><ul><li><p>出发点：之前的模型都很复杂，模块很多</p></li><li><p>代表性方法：</p><ul><li><strong>Seq2Seq</strong> [Dong &amp; Lapata, 2016; Jia &amp; Liang, 2016],</li><li><strong>Seq2Tree</strong>[Dong &amp; Lapata, 2016]</li><li><strong>Seq2Act</strong> [Chen et al., 2018]</li></ul></li></ul><h2 id="4-1-Seq2Seq-AND-Seq2Tree"><a href="#4-1-Seq2Seq-AND-Seq2Tree" class="headerlink" title="4.1 Seq2Seq AND Seq2Tree"></a>4.1 Seq2Seq AND Seq2Tree</h2><ul><li><strong>Seq2Seq</strong>：把语义解析看作是机器翻译的问题。</li></ul><p>（1）将逻辑表达式序列化，看作一系列token，从而将语义解析转化为Seq2Seq问题。</p><p>（2）语义解析中的目标语言（语义表示）具有层次结构，而Seq2Seq模型仅把语义表示扁平序列化，从而忽略了层次结构信息，导致在解码过程中需要考虑更多的长距离依赖。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Seq.jpg" alt="Seq2Seq"></p><ul><li><strong>Seq2Tree</strong>：弥补Seq2Seq扁平化表示的不足</li></ul><p>（1）层次化的decoder，不生成扁平化的语义表示序列，而是生成层次结构化的语义表示（tree） ，用&lt;n&gt;来表示树结构中的非终结符</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Tree.jpg" alt="Seq2Tree"></p><p>（2）在神经网络中的表示：占位符&lt;n&gt;都存放在一个队列里，直到队列为空才终止，遇到占位符&lt;n&gt;即进入下一层。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Tree_%E5%9C%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt="Seq2Tree-在神经网络中的表示"></p><ul><li>在Seq2Seq&#x2F;Seq2Tree中可以加入注意力机制：注意力机制相当于让模型学习了词语到词语的语义表示之间的软对齐。</li><li>性能评估：</li></ul><p>（1）层次结构的decoder使得模型学习到了目标语义表示的结构，这些结构信息能够帮助生成整个语义表示</p><p>（2）Attention机制让模型学习了词语到词语的语义表示之间的软对齐，起到了类似于词典的效果</p><h2 id="4-2-Seq2Act"><a href="#4-2-Seq2Act" class="headerlink" title="4.2 Seq2Act"></a>4.2 Seq2Act</h2><ul><li>端到端的语义图生成。</li></ul><p>端到端：一端输入原始数据，一端输出期望得到的结果，只关心输入和输出，中间的步骤全部都不管，形成了一个黑箱。</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Act_%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84%E8%AF%AD%E4%B9%89%E7%94%9F%E6%88%90.jpg" alt="Seq2Act-端到端的语义生成"></p><ul><li>模型框架</li></ul><p>（1）根据Sequence-to-Action RNN Model生成动作序列</p><p><strong>动作集类型</strong>有：Add variable node,  Add entity node, Add type node, Add edge, Operation action, Argument action</p><p><strong>Encoder-Decoder model</strong>：bi-LSTM with attention（基于注意力机制的双向LSTM模型）</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Act_encoder_decoderModel.jpg" alt="Seq2Act-encoder-decoderModel"></p><p>经典模型有encoder层包含双向LSTM的bi-LSTM模型，其中，输入是Action embedding。</p><p><strong>Action embedding包含句法部分和结构部分</strong>，分别编码，一定程度上缓解动作的稀疏性（类似因子化词汇）。</p><p>（2）根据动作序列搭建语义图</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Act_%E6%A8%A1%E5%9E%8B%E6%A1%86%E6%9E%B6.jpg" alt="Seq2Act-模型框架5"></p><ul><li>性能：</li></ul><p>（1）动作编码更加的紧凑，一定程度解决长距离依赖的问题</p><p>（2）可扩展性强，更容易在解码过程中加入知识库的约束信息，来保证解码时生成符合句法、符合语义的语义表示</p><h2 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h2><ul><li><p><strong>Seq2Seq</strong>: 直接把目标语义表示序列化</p></li><li><p><strong>Seq2Tree</strong>: 考虑到目标语义表示的结构性</p></li><li><p><strong>Seq2Act</strong>: 用语义图表示语义，用动作序列编码语义图的构建</p></li></ul><h2 id="4-4-基于神经网络模型的扩展"><a href="#4-4-基于神经网络模型的扩展" class="headerlink" title="4.4 基于神经网络模型的扩展"></a>4.4 基于神经网络模型的扩展</h2><ul><li>Constrained decoder：跟知识结合</li></ul><p>（1）<strong>理由</strong>：由于<strong>目标语言是形式化语言，需符合严格的条件约束</strong>，因此对比机器翻译里面的decoder，语义解析中的decoder可以使用严格的约束条件。</p><p>（2）<strong>主要部分</strong>：句法条件和语义条件</p><p>− 句法条件：如”(λa $0 e (and (flight $0) ) from $0 “ 下一个token应该是一个参数（实体或者变量）。</p><p>− 语义条件：“(λa $0 e (and (flight $0) ) from $0 ”下一个token应该是一个城市或者机场。</p><p>（3）<strong>作用</strong>：避免生成明显错误的token，从而提高最终生成准确语义表示的概率。</p><p>（4）<strong>适用性</strong>：在所有的基于神经网络的语义解析方法中都可以使用。</p><p>（5）<strong>Constrained decoder in Seq2Act</strong>：</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/ConstrainedDecoderInSeq2Act.jpg" alt="ConstrainedDecoderInSeq2Act"></p><p>（6）<strong>Grammar constrained decoder</strong>：</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/GrammerConstrainedDecoder.jpg" alt="GrammerConstrainedDecode"></p><ul><li>Coarse-to-fine：“通用结构”+“微调”</li></ul><p>（1）<strong>理由</strong>：自然语言与语义表示之间的gap太大</p><p>（2）<strong>方案</strong>：先生成sketch，再进行grounding，简而言之，先生成大致框架，再依据句子补充实体</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Act_Corse_to_fine.jpg" alt="Seq2Act-Corse-to-fine"></p><p>（3）<strong>先生成sketch的好处</strong>：</p><p>− 相比完整的语义表示，先生成sketch要容易很多</p><p>− sketch具有一定的泛化性，很多句子具有相同的sketch</p><p>− 使用sketch之后，生成的序列长度大大缩减</p><p>− sketch可以为后面的decoding提供帮助</p><p>（4）<strong>建模Coarse-to-fine的过程</strong>：先生成sketch，在利用sketch指导输出decoding</p><p><img src="https://github.com/CCSemicircle/img/blob/main/images/Seq2Act_%E5%BB%BA%E6%A8%A1Coarse_to_fine%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="Seq2Act-建模Coarse-to-fine的过程"></p><p>（5）<strong>sketch指导后面的decoding的方法</strong>：辅助判断是否缺失实体，提示类型信息等</p><h1 id="5-总结和展望"><a href="#5-总结和展望" class="headerlink" title="5 总结和展望"></a>5 总结和展望</h1><h2 id="5-1-现有方法总结"><a href="#5-1-现有方法总结" class="headerlink" title="5.1 现有方法总结"></a>5.1 现有方法总结</h2><table><thead><tr><th>方法</th><th>核心</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>基于词典-组合文法的方法</td><td>词典<br />组合文法</td><td>基于组合语义思想，解析过程清晰可见，可解释性强</td><td>需要学习词典和语义组合文法，且容易受限于词典的覆盖度</td></tr><tr><td>基于语义图的方法</td><td>语义图表示<br />语义图的构建</td><td>语义图与自然语言句子具有类似的结构；与知识库联系紧密，可充分利用知识库的知识来指导语义图的构建</td><td>往往依赖于特定的手段来构建语义图，缺乏一定的通用性</td></tr><tr><td>基于神经网络的方法</td><td>Decoding中的token形式<br />Decoding中的constrains</td><td>端到端，充分利用神经网络模型的表示能力和拟合能力</td><td>可解释性差</td></tr></tbody></table><h2 id="5-2-展望"><a href="#5-2-展望" class="headerlink" title="5.2 展望"></a>5.2 展望</h2><h3 id="5-2-1-低成本的模型构建"><a href="#5-2-1-低成本的模型构建" class="headerlink" title="5.2.1 低成本的模型构建"></a>5.2.1 低成本的模型构建</h3><ul><li><p>思路：Transfer、弱监督&#x2F;无监督学习、预训练</p></li><li><p><strong>Transfer：领域迁移</strong></p><ul><li>关键：<strong>解耦合结构和词典</strong></li><li>假设：结构在不同领域下具有通用性</li></ul></li></ul><h3 id="5-2-2-符号与神经网络融合的语义解析"><a href="#5-2-2-符号与神经网络融合的语义解析" class="headerlink" title="5.2.2 符号与神经网络融合的语义解析"></a>5.2.2 符号与神经网络融合的语义解析</h3><ul><li>现象：两类方法各有优势，<strong>基于符号的方法长于推理和利用知识</strong>，<strong>神经网络的方法长于表示和计算</strong>，如何在语义解析中有效融合两类方法也将成为研究者探索的点。</li><li>挑战：符号在神经网络中的表示形式，以及计算方式（往往不可导）。</li><li>当前方法：<strong>Neural Symbolic Machines (NSM，神经符号机)</strong><ul><li>以memory的形式在neural network中引入symbolic representation。</li><li>利用强化学习算法来训练模型（symbolic部分不可导）</li></ul></li></ul><h3 id="5-2-3-上下文感知的语义解析"><a href="#5-2-3-上下文感知的语义解析" class="headerlink" title="5.2.3 上下文感知的语义解析"></a>5.2.3 上下文感知的语义解析</h3><ul><li>问题：当前句子解析需要利用之前句子的信息，如对话理解、代码生成等。</li><li>关键挑战：指代、省略、如何复用信息</li><li>当前解决办法：<ul><li><strong>基于CCG的方法（针对指代、省略）</strong>：增加新词汇（用!&lt;e, t&gt;表示待插入的新词汇）和文法（基于Type-shifting，同时利用!&lt;e, t&gt;表示被省略的词汇）来处理指代和省略等现象</li><li><strong>基于神经网络的方法</strong>：<ul><li>turn-level encoder：编码上下文信息</li><li>query segment copying：用copy机制来复用信息（多用于问题复用）</li></ul></li></ul></li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%84%9F%E7%9F%A5%E7%9A%84%E8%AF%AD%E4%B9%89%E8%A7%A3%E6%9E%90.jpg" alt="上下文感知的语义解析"></p><h3 id="5-2-4-与物理世界交互的语义解析"><a href="#5-2-4-与物理世界交互的语义解析" class="headerlink" title="5.2.4 与物理世界交互的语义解析"></a>5.2.4 与物理世界交互的语义解析</h3><ul><li>问题：解析执行一系列指令，状态随着指令的执行而发生变化，如机器人执行指令。</li><li>关键挑战：如何建模之前的指令（同样有指代和省略的现象），如何建模当前环境的状态变化。</li><li>当前的解决办法：<ul><li><strong>基于注意力机制的encoder-decoder模型</strong>：根据特定任务定义System Action、Encoder中建模之前命令以及当前的状态（包括当前命令、之前命令、初始状态、当前状态等）</li></ul></li></ul><h1 id="6-个人理解总结"><a href="#6-个人理解总结" class="headerlink" title="6 个人理解总结"></a>6 个人理解总结</h1><ol><li>基于词典-组合文法的语义解析从原理上看，更加适用于限定域，扩展到开放域的成本较高，主要是过于依赖词典和组合规则。</li><li>基于语义图的语义解析可以基于知识库得到较为准确的结果，但是如何构建语义图是一个比较困难的问题，而且求解必须依赖知识库，不过有向开放域扩展的可能性，而且目前各类知识库在逐步建立，或许会有较好的前景。</li><li>基于神经网络的语义解析中，虽然可解释性差，如果模型比较好，效果也应该比较好，比较适合完成非解释性的任务，像端到端的任务。</li><li>展望的四个角度事实上都是自然语义理解可以发展的方向，第二个比较偏向基于目前方法进行改进，其余三个是具体的应用场景或任务层面的发展方向。</li></ol>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 语义解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发_ReactNative</title>
      <link href="/2021/qian-duan-kai-fa-reactnative/"/>
      <url>/2021/qian-duan-kai-fa-reactnative/</url>
      
        <content type="html"><![CDATA[<h1 id="0-搭建环境"><a href="#0-搭建环境" class="headerlink" title="0 搭建环境"></a>0 搭建环境</h1><ol><li><p>安装原生Android环境，<a href="https://reactnative.cn/docs/environment-setup">官方文档</a> + <a href="https://segmentfault.com/a/1190000018323652">博客</a></p></li><li><p>下载React-Native</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g react-native-cli# 进入项目文件夹的父目录下打开cmd，输入以下命令react-native init myProjec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><a href="https://blog.csdn.net/yinxing2008/article/details/89250436">打开安卓模拟器的开发者选项</a></li></ol><h1 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1 开发工具"></a>1 开发工具</h1><ul><li>WebStorm</li></ul><h1 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2 创建项目"></a>2 创建项目</h1><h2 id="2-1-New-Project"><a href="#2-1-New-Project" class="headerlink" title="2.1 New Project"></a>2.1 New Project</h2><ul><li>注意使用电脑上已经安装的react-native包，例如：</li><li>C:\Program Files\nodejs\node_global\node_modules\react-native-cli</li></ul><h2 id="2-2-设置快捷启动"><a href="#2-2-设置快捷启动" class="headerlink" title="2.2 设置快捷启动"></a>2.2 设置快捷启动</h2><ul><li>详见博客：<a href="https://www.jianshu.com/p/85d8e5e1c22d">https://www.jianshu.com/p/85d8e5e1c22d</a></li></ul><h2 id="2-3-设置Debugger"><a href="#2-3-设置Debugger" class="headerlink" title="2.3 设置Debugger"></a>2.3 设置Debugger</h2><ul><li>下载react-native-debugger –  <a href="https://github.com/jhen0409/react-native-debugger/releases/tag/v0.11.7">https://github.com/jhen0409/react-native-debugger/releases/tag/v0.11.7</a></li><li>启动react-native-debugger.exe</li><li>在模拟器中按下CTRL+M，启用Debug，即可成功</li></ul><h2 id="2-4-启动代码补全"><a href="#2-4-启动代码补全" class="headerlink" title="2.4 启动代码补全"></a>2.4 启动代码补全</h2><ul><li>详见博客：<a href="https://blog.csdn.net/aa330233789/article/details/103134580">https://blog.csdn.net/aa330233789/article/details/103134580</a></li></ul><h2 id="2-5-启动模板"><a href="#2-5-启动模板" class="headerlink" title="2.5 启动模板"></a>2.5 启动模板</h2><ul><li>详见博客：<a href="https://blog.csdn.net/weixin_38080573/article/details/88315159">https://blog.csdn.net/weixin_38080573/article/details/88315159</a></li><li>一般来说，WebStorm自带许多模板，已经足够了，上述是自定义模板</li></ul><h2 id="2-6-WebStorm常用快捷键"><a href="#2-6-WebStorm常用快捷键" class="headerlink" title="2.6 WebStorm常用快捷键"></a>2.6 WebStorm常用快捷键</h2><ul><li>详见博客：<a href="https://www.cnblogs.com/wanglexueshilengde/p/8390730.html">https://www.cnblogs.com/wanglexueshilengde/p/8390730.html</a></li></ul><h2 id="2-7-关闭ESlint检查"><a href="#2-7-关闭ESlint检查" class="headerlink" title="2.7 关闭ESlint检查"></a>2.7 关闭ESlint检查</h2><p><img src="https://github.com/CCSemicircle/img/blob/main/images/WebStorm%E5%85%B3%E9%97%ADESlint%E6%A3%80%E6%9F%A5.jpg" alt="WebStorm关闭ESlint检查"></p><h1 id="3-编码问题汇总"><a href="#3-编码问题汇总" class="headerlink" title="3 编码问题汇总"></a>3 编码问题汇总</h1><h2 id="3-1-样式规范编写"><a href="#3-1-样式规范编写" class="headerlink" title="3.1 样式规范编写"></a>3.1 样式规范编写</h2><ul><li>详见博客：<a href="https://segmentfault.com/a/1190000013332489">https://segmentfault.com/a/1190000013332489</a></li></ul><h2 id="3-2-开源复用组件"><a href="#3-2-开源复用组件" class="headerlink" title="3.2 开源复用组件"></a>3.2 开源复用组件</h2><ul><li>UI组件库：<a href="https://reactnativeelements.com/docs/">https://reactnativeelements.com/docs/</a></li><li>icon库：<a href="https://oblador.github.io/react-native-vector-icons/">https://oblador.github.io/react-native-vector-icons/</a></li></ul><h1 id="4-常见用法"><a href="#4-常见用法" class="headerlink" title="4 常见用法"></a>4 常见用法</h1><h2 id="4-1统一获取表单输入框值"><a href="#4-1统一获取表单输入框值" class="headerlink" title="4.1统一获取表单输入框值"></a>4.1统一获取表单输入框值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">saveInputData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(dataType,"dataType");</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(event,"event");</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span> event<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-圆角按钮属性"><a href="#4-2-圆角按钮属性" class="headerlink" title="4.2 圆角按钮属性"></a>4.2 圆角按钮属性</h2> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">borderRadius<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-3-动态修改组件样式"><a href="#4-3-动态修改组件样式" class="headerlink" title="4.3 动态修改组件样式"></a>4.3 动态修改组件样式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">buttonColor</span><span class="token operator">:</span> Color<span class="token punctuation">.</span>font<span class="token punctuation">.</span>alleviate<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Button  buttonStyle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">,</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>buttonColor <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-TouchableOpacity取消点击后的透明度变化"><a href="#4-4-TouchableOpacity取消点击后的透明度变化" class="headerlink" title="4.4 TouchableOpacity取消点击后的透明度变化"></a>4.4 TouchableOpacity取消点击后的透明度变化</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// activeOpacity=&#123;1&#125;</span><span class="token comment">// 注意不是样式属性，不能写在样式里</span><span class="token operator">&lt;</span>CheckBox  center  containerStyle<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>checkBox<span class="token punctuation">&#125;</span>  activeOpacity<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>  title<span class="token operator">=</span><span class="token string">"请阅读同意"</span>  textStyle<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>tipsFont<span class="token punctuation">&#125;</span>  iconType<span class="token operator">=</span><span class="token string">"material-icons"</span>  checkedIcon<span class="token operator">=</span><span class="token string">"check-circle"</span>  checkedColor<span class="token operator">=</span><span class="token punctuation">&#123;</span>Color<span class="token punctuation">.</span>font<span class="token punctuation">.</span>alleviate<span class="token punctuation">&#125;</span>  uncheckedIcon<span class="token operator">=</span><span class="token string">"radio-button-unchecked"</span>  onPress<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkAgreement<span class="token punctuation">&#125;</span>  checked<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>agreementChecked<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-alignSelf属性值"><a href="#4-5-alignSelf属性值" class="headerlink" title="4.5 alignSelf属性值"></a>4.5 alignSelf属性值</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">auto</td><td align="left">默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</td></tr><tr><td align="left">stretch</td><td align="left">元素被拉伸以适应容器。</td></tr><tr><td align="left">center</td><td align="left">元素位于容器的中心。</td></tr><tr><td align="left">flex-start</td><td align="left">元素位于容器的开头。</td></tr><tr><td align="left">flex-end</td><td align="left">元素位于容器的结尾。</td></tr><tr><td align="left">baseline</td><td align="left">元素位于容器的基线上。</td></tr><tr><td align="left">initial</td><td align="left">设置该属性为它的默认值。请参阅 <a href="https://techbrood.com/cssref?p=css-initial"><em>initial</em></a>。</td></tr><tr><td align="left">inherit</td><td align="left">从父元素继承该属性。请参阅 <a href="https://techbrood.com/cssref?p=css-inherit"><em>inherit</em></a>。</td></tr></tbody></table><h2 id="4-6-控制Flex子元素在主轴上的比例"><a href="#4-6-控制Flex子元素在主轴上的比例" class="headerlink" title="4.6 控制Flex子元素在主轴上的比例"></a>4.6 控制Flex子元素在主轴上的比例</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 属性名</span>flexGrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-7-文本自动换行"><a href="#4-7-文本自动换行" class="headerlink" title="4.7 文本自动换行"></a>4.7 文本自动换行</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>infoFont<span class="token punctuation">&#125;</span></span> <span class="token attr-name">selectable</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></span>                  <span class="token attr-name">textBreakStrategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balanced<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-8-原生组件官方文档"><a href="#4-8-原生组件官方文档" class="headerlink" title="4.8 原生组件官方文档"></a>4.8 原生组件官方文档</h2><ul><li>API文档：<a href="https://reactnative.cn/docs/text">https://reactnative.cn/docs/text</a></li></ul><h2 id="4-9-Navigation使用"><a href="#4-9-Navigation使用" class="headerlink" title="4.9 Navigation使用"></a>4.9 Navigation使用</h2><ul><li>官方中文文档：<a href="https://www.reactnavigation.org.cn/docs/tabnavigator">TabNavigator · React Navigation中文网</a></li></ul><h2 id="4-10-组件自动换行"><a href="#4-10-组件自动换行" class="headerlink" title="4.10 组件自动换行"></a>4.10 组件自动换行</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">flexWrap</span><span class="token operator">:</span><span class="token string">"wrap"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-11-FlatList用法"><a href="#4-11-FlatList用法" class="headerlink" title="4.11 FlatList用法"></a>4.11 FlatList用法</h2><ul><li>详见博客：<a href="https://www.jianshu.com/p/31e3cb511c73">React-native FlatList的基本用法 - 简书 (jianshu.com)</a></li></ul><h2 id="4-12-导航栏使用"><a href="#4-12-导航栏使用" class="headerlink" title="4.12 导航栏使用"></a>4.12 导航栏使用</h2><ul><li>详见博客：<a href="https://blog.csdn.net/LJFPHP/article/details/77940284"> React Native 的顶部导航栏和底部导航栏目_铁柱的博客-CSDN博客</a></li></ul><h2 id="4-13-TabNative-5-0"><a href="#4-13-TabNative-5-0" class="headerlink" title="4.13 TabNative 5.0"></a>4.13 TabNative 5.0</h2><ul><li>官方文档：<a href="https://www.npmjs.com/package/react-native-tab-navigator">https://www.npmjs.com/package/react-native-tab-navigator</a></li></ul><h2 id="4-14-Android项目gradle包下载目录"><a href="#4-14-Android项目gradle包下载目录" class="headerlink" title="4.14 Android项目gradle包下载目录"></a>4.14 Android项目gradle包下载目录</h2><ul><li>示例：<strong>C:\Users\用户.gradle\caches\modules-2\files-2.1\com.alexvasilkov\foldable-layout\1.0.1\59a9dd35f8d31de01991ee56b741e9e992914895\foldable-layout-1.0.1-sources.jar</strong></li></ul><h2 id="4-15-报错-app-mergeDexDebug-FAILED解决方法："><a href="#4-15-报错-app-mergeDexDebug-FAILED解决方法：" class="headerlink" title="4.15 报错:app:mergeDexDebug FAILED解决方法："></a>4.15 报错:app:mergeDexDebug FAILED解决方法：</h2><ul><li>在android&#x2F;app&#x2F;build.gradle文件中添加如下代码:</li></ul><pre class="line-numbers language-none"><code class="language-none">dependencies &#123;  implementation &#39;com.android.support:multidex:1.0.3&#39; &#x2F;&#x2F;enter the latest version,&#125;android &#123;    defaultConfig &#123;        multiDexEnabled true    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>latest version：<a href="https://developer.android.google.cn/studio/build/multidex?hl=zh-cn">https://developer.android.google.cn/studio/build/multidex?hl=zh-cn</a></li></ul><h2 id="4-16-WebStorm中js文件被识别为txt文件"><a href="#4-16-WebStorm中js文件被识别为txt文件" class="headerlink" title="4.16 WebStorm中js文件被识别为txt文件"></a>4.16 WebStorm中js文件被识别为txt文件</h2><ul><li>详见博客：<a href="https://blog.csdn.net/lansura/article/details/52756614">https://blog.csdn.net/lansura/article/details/52756614</a></li><li>如果没有解决，可以手动加入index.js文件，apply之后再删除，再apply。</li></ul><h2 id="4-17-Style-详细说明"><a href="#4-17-Style-详细说明" class="headerlink" title="4.17 Style 详细说明"></a>4.17 Style 详细说明</h2><ul><li>详见博客：<a href="https://www.jianshu.com/p/2b4368569c03">https://www.jianshu.com/p/2b4368569c03</a></li></ul><h2 id="4-18-查看项目无法启动的错误报告"><a href="#4-18-查看项目无法启动的错误报告" class="headerlink" title="4.18 查看项目无法启动的错误报告"></a>4.18 查看项目无法启动的错误报告</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span><span class="token operator">/</span> 控制台下android>gradlew assembleDebug <span class="token operator">--</span>info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-19-无法将类-JMessageReactPackage中的构造器-JMessageReactPackage应用到给定类型"><a href="#4-19-无法将类-JMessageReactPackage中的构造器-JMessageReactPackage应用到给定类型" class="headerlink" title="4.19 无法将类 JMessageReactPackage中的构造器 JMessageReactPackage应用到给定类型"></a>4.19 无法将类 JMessageReactPackage中的构造器 JMessageReactPackage应用到给定类型</h2><ul><li>使用<strong>“探花APP” React-Native教程的plugin.md文档</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将Project根目录下react-native.comfig.js文件中的代码改为如下</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'jmessage-react-plugin'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">platforms</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">android</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 原来是packageInstance: 'new JMessageReactPackage(false)'</span>          <span class="token literal-property property">packageInstance</span><span class="token operator">:</span> <span class="token string">'new JMessageReactPackage()'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-20-报错INSTALL-FAILED-INSUFFICIENT-STORAGE"><a href="#4-20-报错INSTALL-FAILED-INSUFFICIENT-STORAGE" class="headerlink" title="4.20 报错INSTALL_FAILED_INSUFFICIENT_STORAGE"></a>4.20 报错INSTALL_FAILED_INSUFFICIENT_STORAGE</h2><pre class="line-numbers language-none"><code class="language-none">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot; package&#x3D;&quot;xxx&quot; android:installLocation&#x3D;&quot;preferExternal&quot; &#x2F;&#x2F;增加这行代码！ android:versionCode&#x3D;&quot;1&quot; android:versionName&#x3D;&quot;1.0&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-21-样式问题Debug"><a href="#4-21-样式问题Debug" class="headerlink" title="4.21 样式问题Debug"></a>4.21 样式问题Debug</h2><ul><li>设置border或者backgroundColor</li><li>设置flex:1可以使得左右各占一半。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发_React</title>
      <link href="/2021/qian-duan-kai-fa-react/"/>
      <url>/2021/qian-duan-kai-fa-react/</url>
      
        <content type="html"><![CDATA[<h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1 环境搭建"></a>1 环境搭建</h1><h2 id="1-1-搭建React-Native"><a href="#1-1-搭建React-Native" class="headerlink" title="1.1 搭建React Native"></a>1.1 搭建React Native</h2><h3 id="1-1-1-搭建-Node"><a href="#1-1-1-搭建-Node" class="headerlink" title="1.1.1 搭建 Node"></a>1.1.1 搭建 Node</h3><ol><li><a href="https://blog.csdn.net/weixin_49279236/article/details/111031150">npm安装失败，解决方法</a></li></ol><h3 id="1-1-2-下载Android-Studio"><a href="#1-1-2-下载Android-Studio" class="headerlink" title="1.1.2 下载Android Studio"></a>1.1.2 下载Android Studio</h3><ol><li>Android Studio 里的Cannot resolve symbol XXX：<ul><li><a href="https://www.jianshu.com/p/91cfa8df3128">https://www.jianshu.com/p/91cfa8df3128</a></li><li><a href="https://blog.csdn.net/m0_37292262/article/details/81395369">https://blog.csdn.net/m0_37292262/article/details/81395369</a></li><li><a href="https://blog.csdn.net/godcok/article/details/82463984">https://blog.csdn.net/godcok/article/details/82463984</a></li></ul></li></ol><h3 id="1-1-3-安装react-native-cli"><a href="#1-1-3-安装react-native-cli" class="headerlink" title="1.1.3 安装react-native-cli"></a>1.1.3 安装react-native-cli</h3><ol><li><a href="https://blog.csdn.net/qq_32114025/article/details/88638045">https://blog.csdn.net/qq_32114025/article/details/88638045</a></li></ol><h3 id="1-1-4-npm下载package失败，切换-管理员身份运行cmd"><a href="#1-1-4-npm下载package失败，切换-管理员身份运行cmd" class="headerlink" title="1.1.4 npm下载package失败，切换 管理员身份运行cmd"></a>1.1.4 npm下载package失败，切换 管理员身份运行cmd</h3><ul><li><a href="https://www.cnblogs.com/ClassNotFoundException/p/6737164.html">https://www.cnblogs.com/ClassNotFoundException/p/6737164.html</a></li></ul><h1 id="2-工具使用"><a href="#2-工具使用" class="headerlink" title="2 工具使用"></a>2 工具使用</h1><h2 id="2-1-使用WebStorm"><a href="#2-1-使用WebStorm" class="headerlink" title="2.1 使用WebStorm"></a>2.1 使用WebStorm</h2><h3 id="2-1-1-配置WebStorm辅助编程"><a href="#2-1-1-配置WebStorm辅助编程" class="headerlink" title="2.1.1 配置WebStorm辅助编程"></a>2.1.1 配置WebStorm辅助编程</h3><ul><li><a href="https://www.jianshu.com/p/85d8e5e1c22d">https://www.jianshu.com/p/85d8e5e1c22d</a></li></ul><h3 id="2-1-2-使用代码模板"><a href="#2-1-2-使用代码模板" class="headerlink" title="2.1.2 使用代码模板"></a>2.1.2 使用代码模板</h3><ul><li><a href="https://blog.csdn.net/weixin_38080573/article/details/88315159">https://blog.csdn.net/weixin_38080573/article/details/88315159</a></li></ul><h3 id="2-1-3-代码补全"><a href="#2-1-3-代码补全" class="headerlink" title="2.1.3 代码补全"></a>2.1.3 代码补全</h3><ul><li><a href="https://blog.csdn.net/aa330233789/article/details/103134580">https://blog.csdn.net/aa330233789/article/details/103134580</a></li></ul><h3 id="2-1-4-格式化代码快捷键"><a href="#2-1-4-格式化代码快捷键" class="headerlink" title="2.1.4 格式化代码快捷键"></a>2.1.4 格式化代码快捷键</h3><ul><li>CTRL+ALT+&#x2F;</li></ul><h3 id="2-1-5-取消ESLint"><a href="#2-1-5-取消ESLint" class="headerlink" title="2.1.5 取消ESLint"></a>2.1.5 取消ESLint</h3><ul><li><a href="https://blog.csdn.net/fuck487/article/details/84147778">https://blog.csdn.net/fuck487/article/details/84147778</a></li></ul><h3 id="2-1-6-Debugger"><a href="#2-1-6-Debugger" class="headerlink" title="2.1.6 Debugger"></a>2.1.6 Debugger</h3><ul><li>react-native-debugger – <a href="https://github.com/jhen0409/react-native-debugger/releases/tag/v0.11.7">https://github.com/jhen0409/react-native-debugger/releases/tag/v0.11.7</a></li></ul><h2 id="2-2-Mobx"><a href="#2-2-Mobx" class="headerlink" title="2.2 Mobx"></a>2.2 Mobx</h2><h3 id="2-2-1-配置mobx"><a href="#2-2-1-配置mobx" class="headerlink" title="2.2.1 配置mobx"></a>2.2.1 配置mobx</h3><ul><li><a href="https://www.jianshu.com/p/b4856b84b64e">https://www.jianshu.com/p/b4856b84b64e</a></li></ul><p><img src="http://img.fdchen.host//Text.png" alt="image-20210305193041326"></p><h1 id="3-常见用法"><a href="#3-常见用法" class="headerlink" title="3 常见用法"></a>3 常见用法</h1><h2 id="3-1-map和reduce"><a href="#3-1-map和reduce" class="headerlink" title="3.1 map和reduce"></a>3.1 map和reduce</h2><ul><li>map：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> filteredNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index goes from 0,so the filterNumbers are 1,2,3 and undefined.</span><span class="token comment">// filteredNumbers is [1, 2, 3, undefined]</span><span class="token comment">// numbers is still [1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduce：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 10 为 initialValue，相当于给accumulator赋初值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left"><code>callback</code></th><th align="left"><code>accumulator</code></th><th align="left"><code>currentValue</code></th><th align="left"><code>currentIndex</code></th><th align="left"><code>array</code></th><th align="left">return value</th></tr></thead><tbody><tr><td align="left">first call</td><td align="left"><code>10</code></td><td align="left"><code>0</code></td><td align="left"><code>0</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>10</code></td></tr><tr><td align="left">second call</td><td align="left"><code>10</code></td><td align="left"><code>1</code></td><td align="left"><code>1</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>11</code></td></tr><tr><td align="left">third call</td><td align="left"><code>11</code></td><td align="left"><code>2</code></td><td align="left"><code>2</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>13</code></td></tr><tr><td align="left">fourth call</td><td align="left"><code>13</code></td><td align="left"><code>3</code></td><td align="left"><code>3</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>16</code></td></tr><tr><td align="left">fifth call</td><td align="left"><code>16</code></td><td align="left"><code>4</code></td><td align="left"><code>4</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>20</code></td></tr></tbody></table><h2 id="3-2-获取当前时间"><a href="#3-2-获取当前时间" class="headerlink" title="3.2 获取当前时间"></a>3.2 获取当前时间</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前年份(2位)</span>myDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取完整的年份(4位,1970-????)</span>myDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前月份(0-11,0代表1月)</span>myDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前日(1-31)</span>myDate<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//获取当前星期X(0-6,0代表星期天)</span>myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前时间(从1970.1.1开始的毫秒数)</span>myDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前小时数(0-23)</span>myDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前分钟数(0-59)</span>myDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前秒数(0-59)</span>myDate<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前毫秒数(0-999)</span>myDate<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前日期</span><span class="token keyword">var</span> mytime<span class="token operator">=</span>myDate<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前时间</span>myDate<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取日期与时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取当前时间：<a href="https://momentjs.com/">https://momentjs.com/</a></li></ul><h2 id="3-3-在Form中使用DatePicker"><a href="#3-3-在Form中使用DatePicker" class="headerlink" title="3.3 在Form中使用DatePicker"></a>3.3 在Form中使用DatePicker</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Item label<span class="token operator">=</span><span class="token string">"走失时间"</span><span class="token operator">></span>                          <span class="token punctuation">&#123;</span>                              <span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token string">'lostTime'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                  <span class="token comment">// 在DatePicker中使用getFieldDecorator需要设置initialValue，而不能用defaulValue</span>                                  <span class="token literal-property property">initialValue</span><span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>incident<span class="token punctuation">.</span>lostTime<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>                                      <span class="token punctuation">&#123;</span><span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'必须输入走失时间'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                  <span class="token punctuation">]</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DatePicker                                  locale<span class="token operator">=</span><span class="token punctuation">&#123;</span>Locale<span class="token punctuation">&#125;</span>                                  placeholder<span class="token operator">=</span><span class="token string">"请输入走失时间"</span>                                  format<span class="token operator">=</span><span class="token punctuation">&#123;</span>format<span class="token punctuation">&#125;</span>                                  showTime<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">format</span><span class="token operator">:</span> formatTime<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                              <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>                          <span class="token punctuation">&#125;</span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Item<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-DatePicker设置成中文"><a href="#3-4-DatePicker设置成中文" class="headerlink" title="3.4 DatePicker设置成中文"></a>3.4 DatePicker设置成中文</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 注意导入正确包名才能生效import locale from &#39;antd&#x2F;es&#x2F;date-picker&#x2F;locale&#x2F;zh_CN&#39;;&lt;DatePicker locale&#x3D;&#123;locale&#125; &#x2F;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-按pageNum获取数据"><a href="#3-5-按pageNum获取数据" class="headerlink" title="3.5 按pageNum获取数据"></a>3.5 按pageNum获取数据</h2><ul><li>设置了onChange就不要设置current，否则会导致跳转失灵。</li></ul><h3 id="6-快速生成数组"><a href="#6-快速生成数组" class="headerlink" title="6. 快速生成数组"></a>6. 快速生成数组</h3><ul><li>详见博客：<a href="https://www.cnblogs.com/fuzitu/p/10723869.html">https://www.cnblogs.com/fuzitu/p/10723869.html</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> timeSpan<span class="token operator">=</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token constant">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span>index<span class="token operator">+</span>start <span class="token operator">+</span> <span class="token string">'月'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-在字符串中使用占位符"><a href="#7-在字符串中使用占位符" class="headerlink" title="7. 在字符串中使用占位符"></a>7. 在字符串中使用占位符</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">近</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">N</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个月任务完成情况统计</span><span class="token template-punctuation string">`</span></span> <span class="token comment">// 反引号`+$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-报错Import-in-body-of-module-reorder-to-top"><a href="#8-报错Import-in-body-of-module-reorder-to-top" class="headerlink" title="8. 报错Import in body of module; reorder to top"></a>8. 报错Import in body of module; reorder to top</h3><ul><li>如果您在两次<code>variable</code>导入之间声明了in，则会收到此错误，</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REACT_APP_API_BASE</span><span class="token punctuation">;</span><span class="token keyword">import</span> demoXLXSFile <span class="token keyword">from</span> <span class="token string">'../../assets/others/Demo.xlsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./student.list.styles.scss'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>variables</code>导入所有内容后进行声明，</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> demoXLXSFile <span class="token keyword">from</span> <span class="token string">'../../assets/others/Demo.xlsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./student.list.styles.scss'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REACT_APP_API_BASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-引入-less文件可以在路由文件中直接映入，对该路由组件中的所有路由页面生效"><a href="#9-引入-less文件可以在路由文件中直接映入，对该路由组件中的所有路由页面生效" class="headerlink" title="9. 引入.less文件可以在路由文件中直接映入，对该路由组件中的所有路由页面生效"></a>9. 引入.less文件可以在路由文件中直接映入，对该路由组件中的所有路由页面生效</h3><h3 id="10-npm和yarn缓存清理"><a href="#10-npm和yarn缓存清理" class="headerlink" title="10. npm和yarn缓存清理"></a>10. npm和yarn缓存清理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm cache clean --forceyarn cache clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-【node-js】项目启动与关闭"><a href="#11-【node-js】项目启动与关闭" class="headerlink" title="11. 【node.js】项目启动与关闭"></a>11. 【node.js】项目启动与关闭</h3><ol><li>查看当前服务器端口占用情况</li></ol><pre class="line-numbers language-none"><code class="language-none">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.fdchen.host//%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5.png" alt="img"></p><p> 2、关闭被占用端口的服务</p><pre class="line-numbers language-none"><code class="language-none">tskill 5728<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.fdchen.host//%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B%E5%8F%B7.png" alt="img"></p><p>3、启动服务</p><pre class="line-numbers language-none"><code class="language-none">node app.js -p 18080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.fdchen.host//%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E8%BF%90%E8%A1%8C.png" alt="img"></p><p>4.如果要服务后台运行的话，可以用forever进行管理</p><pre class="line-numbers language-none"><code class="language-none">npm install -g foreverforever start app.js   &#x2F;&#x2F;启动forever stop app.js   &#x2F;&#x2F;关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.用自带的服务nohub</p><pre class="line-numbers language-none"><code class="language-none">nohup node index.js &gt; myLog.log 2&gt;&amp;1 &amp;      &#x2F;&#x2F;启动pkill node   &#x2F;&#x2F;关闭 node 服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-antd-Cascader省市级联"><a href="#12-antd-Cascader省市级联" class="headerlink" title="12. antd-Cascader省市级联"></a>12. antd-Cascader省市级联</h3><ul><li>详见博客：<a href="https://www.jianshu.com/p/0278aade294d">https://www.jianshu.com/p/0278aade294d</a></li></ul><h3 id="13-报错’React’-must-be-in-scope-when-using-JSX-react-x2F-react-in-jsx-scope"><a href="#13-报错’React’-must-be-in-scope-when-using-JSX-react-x2F-react-in-jsx-scope" class="headerlink" title="13. 报错’React’ must be in scope when using JSX  react&#x2F;react-in-jsx-scope"></a>13. 报错’React’ must be in scope when using JSX  react&#x2F;react-in-jsx-scope</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> react<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>react 应该大写，这里小写导致错误；</li></ul><h3 id="14-导入一个组件目录下的所有-js文件"><a href="#14-导入一个组件目录下的所有-js文件" class="headerlink" title="14. 导入一个组件目录下的所有.js文件"></a>14. 导入一个组件目录下的所有.js文件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleFiles <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./module'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="15-数组倒序排序"><a href="#15-数组倒序排序" class="headerlink" title="15. 数组倒序排序"></a>15. 数组倒序排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 正序</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 倒序</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-日期区间选择"><a href="#16-日期区间选择" class="headerlink" title="16. 日期区间选择"></a>16. 日期区间选择</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token class-name">DatePicker</span><span class="token punctuation">&#125;</span> from <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">moment</span> from <span class="token string">"moment"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>formatDate<span class="token punctuation">&#125;</span> from <span class="token string">"../../../utils/dateUtils"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token class-name">Locale</span> from 'antd<span class="token operator">/</span>es<span class="token operator">/</span>date<span class="token operator">-</span>picker<span class="token operator">/</span>locale<span class="token operator">/</span>zh_CN'<span class="token punctuation">;</span><span class="token keyword">import</span> 'moment<span class="token operator">/</span>locale<span class="token operator">/</span>zh<span class="token operator">-</span>cn'<span class="token punctuation">;</span>moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token char">'zh-cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token class-name">RangePicker</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token class-name">DatePicker</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-发布及部署React项目"><a href="#17-发布及部署React项目" class="headerlink" title="17. 发布及部署React项目"></a>17. 发布及部署React项目</h3><ul><li>详见博客：<a href="https://m.html.cn/qa/react/14488.html">https://m.html.cn/qa/react/14488.html</a></li></ul><h3 id="18-表格column属性的dataIndex支持嵌套写法"><a href="#18-表格column属性的dataIndex支持嵌套写法" class="headerlink" title="18. 表格column属性的dataIndex支持嵌套写法"></a>18. 表格column属性的dataIndex支持嵌套写法</h3><ul><li>支持a.b.c 和 a[0],b[0]写法</li></ul><h1 id="2-数据可视化"><a href="#2-数据可视化" class="headerlink" title="2 数据可视化"></a>2 数据可视化</h1><h3 id="1-echarts饼图自动显示数据"><a href="#1-echarts饼图自动显示数据" class="headerlink" title="1. echarts饼图自动显示数据"></a>1. echarts饼图自动显示数据</h3><ul><li>详见博客：<a href="https://blog.csdn.net/kai_wei/article/details/51788355">https://blog.csdn.net/kai_wei/article/details/51788355</a></li></ul><h3 id="2-设置柱状颜色"><a href="#2-设置柱状颜色" class="headerlink" title="2. 设置柱状颜色"></a>2. 设置柱状颜色</h3><ul><li>详见博客：<a href="https://blog.csdn.net/t876587201/article/details/70159076">https://blog.csdn.net/t876587201/article/details/70159076</a></li></ul><h3 id="3-设置两张图并列"><a href="#3-设置两张图并列" class="headerlink" title="3. 设置两张图并列"></a>3. 设置两张图并列</h3><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.chart-left</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.chart-right</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如下是react代码</span>&lt;span className=<span class="token string">'chart-left'</span>>&lt;LostDay<span class="token operator">/</span>>&lt;<span class="token operator">/</span>span>&lt;span className=<span class="token string">'chart-right'</span>>&lt;LostTime<span class="token operator">/</span>>&lt;<span class="token operator">/</span>span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-导入城市区县图"><a href="#4-导入城市区县图" class="headerlink" title="4. 导入城市区县图"></a>4. 导入城市区县图</h3><ul><li>github项目：<a href="https://github.com/echarts-maps/echarts-china-cities-js">https://github.com/echarts-maps/echarts-china-cities-js</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'echarts/map/js/province/chongqing'</span><span class="token keyword">import</span> <span class="token string">"echarts/map/js/province/xianggang"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-导入全国地图或者省市图"><a href="#5-导入全国地图或者省市图" class="headerlink" title="5. 导入全国地图或者省市图"></a>5. 导入全国地图或者省市图</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'echarts/map/js/province/chongqing'</span><span class="token keyword">import</span> <span class="token string">"echarts/map/js/province/xianggang"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-生成地图热力图"><a href="#6-生成地图热力图" class="headerlink" title="6. 生成地图热力图"></a>6. 生成地图热力图</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'香港18区人口密度 （2011）'</span><span class="token punctuation">,</span>        <span class="token literal-property property">subtext</span><span class="token operator">:</span> <span class="token string">'人口密度数据来自Wikipedia'</span><span class="token punctuation">,</span>        <span class="token literal-property property">sublink</span><span class="token operator">:</span> <span class="token string">'http://zh.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF%E8%A1%8C%E6%94%BF%E5%8D%80%E5%8A%83#cite_note-12'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>        <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">'&#123;b&#125;&lt;br/>&#123;c&#125; (p / km2)'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">toolbox</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>        <span class="token literal-property property">feature</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">dataView</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">readOnly</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">restore</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">saveAsImage</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">visualMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>        <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Low'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">realtime</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">calculable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">inRange</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'lightskyblue'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'orangered'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'香港18区人口密度'</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'map'</span><span class="token punctuation">,</span>            <span class="token literal-property property">mapType</span><span class="token operator">:</span> <span class="token string">'重庆'</span><span class="token punctuation">,</span> <span class="token comment">// 自定义扩展图表类型，注意城镇要用中文</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'中西区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">20057.34</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'湾仔区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">15477.48</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'东区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">31686.1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'南区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">6992.6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'油尖旺'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">44045.49</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'深水埗'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">40689.64</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'九龙城'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">37659.78</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'黄大仙'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">45180.97</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'观塘区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">55204.26</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'葵青区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">21900.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'荃湾区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4918.26</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'屯门区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">5881.84</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'元朗区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4178.01</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'北区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2227.92</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'大埔区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2180.98</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'沙田区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">9172.94</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'西贡区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3368</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'离岛区'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">806.98</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// 自定义名称映射</span>            <span class="token literal-property property">nameMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">'Central and Western'</span><span class="token operator">:</span> <span class="token string">'中西区'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Eastern'</span><span class="token operator">:</span> <span class="token string">'东区'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Islands'</span><span class="token operator">:</span> <span class="token string">'离岛'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Kowloon City'</span><span class="token operator">:</span> <span class="token string">'九龙城'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Kwai Tsing'</span><span class="token operator">:</span> <span class="token string">'葵青'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Kwun Tong'</span><span class="token operator">:</span> <span class="token string">'观塘'</span><span class="token punctuation">,</span>                <span class="token string-property property">'North'</span><span class="token operator">:</span> <span class="token string">'北区'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Sai Kung'</span><span class="token operator">:</span> <span class="token string">'西贡'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Sha Tin'</span><span class="token operator">:</span> <span class="token string">'沙田'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Sham Shui Po'</span><span class="token operator">:</span> <span class="token string">'深水埗'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Southern'</span><span class="token operator">:</span> <span class="token string">'南区'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Tai Po'</span><span class="token operator">:</span> <span class="token string">'大埔'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Tsuen Wan'</span><span class="token operator">:</span> <span class="token string">'荃湾'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Tuen Mun'</span><span class="token operator">:</span> <span class="token string">'屯门'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Wan Chai'</span><span class="token operator">:</span> <span class="token string">'湾仔'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Wong Tai Sin'</span><span class="token operator">:</span> <span class="token string">'黄大仙'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Yau Tsim Mong'</span><span class="token operator">:</span> <span class="token string">'油尖旺'</span><span class="token punctuation">,</span>                <span class="token string-property property">'Yuen Long'</span><span class="token operator">:</span> <span class="token string">'元朗'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-React生成词云"><a href="#7-React生成词云" class="headerlink" title="7. React生成词云"></a>7. React生成词云</h3><p>1.安装</p><blockquote><p>yarn add react-wordcloud</p><p>npm install  react-wordcloud –save</p></blockquote><p>2.使用</p><blockquote><p>import * as React from “react”;</p><p>import ReactWordcloud from “react-wordcloud”;</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactWordcloud <span class="token keyword">from</span> <span class="token string">"react-wordcloud"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CiYun</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> wordsJsonList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">12.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"github"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>ReactWordcloud words<span class="token operator">=</span><span class="token punctuation">&#123;</span>wordsJsonList<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> CiYun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-调整legend位置"><a href="#8-调整legend位置" class="headerlink" title="8. 调整legend位置"></a>8. 调整legend位置</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'进行中'</span><span class="token punctuation">,</span> <span class="token string">'暂缓'</span><span class="token punctuation">,</span> <span class="token string">'已完成'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔_美赛总结</title>
      <link href="/2021/sui-bi-mei-sai-zong-jie/"/>
      <url>/2021/sui-bi-mei-sai-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>纪念人生中唯一一次美赛</p><p>2021年D题——S奖</p></blockquote><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>当时参加美赛可以说是临时起意，先是朋友问我有没有兴趣打数模，但是我考虑到自己更喜欢本专业（软件）竞赛，就没有答应。但是，在从学校回家的路上，想了很多——每每坐在车上，看着窗外的风景，人就喜欢胡思乱想，自己虽然可以保研，但是好像竞赛的经历还是少了一点，万一老师问为什么没有打过数模，岂不是没话可说。然后凑巧的是，刚好在表白墙上看到了美赛招募队友（也可能是天意？那为什么不让我获奖，问号脸）虽然，看看最后的成绩，照样没什么好说的，但是这毕竟是第一次，也可能是最后一次，还是写点东西纪念一下。</p><p>PS：这种方式挺好的，属于自己一方小天地，写下自己的一点小感悟，以后应该也会写一些东西纪念一下。希望以后多看看书，提升一下文化素养。</p><span id="more"></span><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><h2 id="1-1-更早"><a href="#1-1-更早" class="headerlink" title="1.1 更早"></a>1.1 更早</h2><h3 id="1-1-1-问题"><a href="#1-1-1-问题" class="headerlink" title="1.1.1 问题"></a>1.1.1 问题</h3><ol><li>没有学习并掌握相关模型，不能灵活运用</li><li>没有掌握基础技能，常用操作不能记住，编程时总是要百度效率低下</li></ol><h3 id="1-1-2-解决方案"><a href="#1-1-2-解决方案" class="headerlink" title="1.1.2 解决方案"></a>1.1.2 解决方案</h3><ol><li>数学模型是长时间累计，如果专注于数模竞赛，就需要平时多多了解。</li><li>每一次用到常用的语法或技巧，都亲自写一遍，记录下来，以加强记忆。</li></ol><h2 id="1-2-前几天"><a href="#1-2-前几天" class="headerlink" title="1.2 前几天"></a>1.2 前几天</h2><p>看优秀论文，学习文笔、思路、图表表示，比如每一题大概做成什么样子之类。</p><h1 id="2-选题"><a href="#2-选题" class="headerlink" title="2. 选题"></a>2. 选题</h1><p>选题可以说是非常重要了，这次我们的选题不太好说，不好也不坏把，题目不太常规，但是大部分方向对了，所以也不好怎么发表意见。不过始终建议好好讨论一下，而且是需要在充分了解每题内容的前提下。</p><h1 id="3-解决问题"><a href="#3-解决问题" class="headerlink" title="3. 解决问题"></a>3. 解决问题</h1><h2 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h2><ol><li>我们小组的解决方案在讨论方面有很大问题，基本上由我主导，但是这种方式很容易造成先入为主的情况，容易让队友跑偏，导致思维不能充分发散。</li><li>讨论太少，团队交流太少，一方面后面基本只靠两个人讨论确定，另一方面，线上讨论终归是限制了一点，不能随心所欲。</li><li>对题目研读不够，查找资料没有效率。</li></ol><h2 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h2><ol><li>不能过于强调自己的观点，不要一次性输出，很容易出问题。因为一个方案如果全盘托出，大家比较难找方案的漏洞，然后就造成大家觉得这个方案目前听上去可行，那就这么做。但是事实上可能存在很多漏洞。因此，如果一步一步提出来，先说想法，然后让大家针对想法提问，自己回答，大家针对回答再提问，一步一步这么往下走，每一步都会受到批判，这样的话，方案才会打磨得比较好。</li><li>线下讨论比线上讨论要方便很多，尽量线下一起做，效率更高，沟通成本更少，也能相互鼓励支持。</li><li>查找资料之前应该讨论一下基本的解题思路，确定一个大概的成员都认可的思路，避免做无用功。</li><li>查找的文献应该按信息进行记录，方便反复查看。</li></ol><h1 id="4-实施"><a href="#4-实施" class="headerlink" title="4. 实施"></a>4. 实施</h1><ol><li><p>实施过程中的问题主要是前期准备工作的问题，模型知识与相关编码知识的缺乏，导致效率低下，方法也比较贫瘠。</p></li><li><p>但是还有一个问题，那就是不够专注，容易分神，虽然看上去很多时间都在忙，但是不一会就分神了，好不容易进入状态，然后又要重新进入，没有真正的沉浸其中，难以高效，也难以有更好的灵感。</p></li><li><p>确定大概框架时应该也确定模型的实现过程，避免无法实现模型而浪费时间。</p></li></ol><h1 id="5-写论文"><a href="#5-写论文" class="headerlink" title="5. 写论文"></a>5. 写论文</h1><p>这一部分主要问题是对图表的了解不够，不能灵活运用图表表示信息，很明显的一点就是明明用图很清晰，但是用了表格表示很多的数据，效果很差。</p><p><img src="http://img.fdchen.host//%E7%BE%8E%E8%B5%9B%E6%95%B0%E6%A8%A1%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC.png" alt="数据表示例"></p><p><img src="http://img.fdchen.host//%E7%BE%8E%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%9B%BE.png" alt="数据图示例"></p><h1 id="6-整体而言"><a href="#6-整体而言" class="headerlink" title="6. 整体而言"></a>6. 整体而言</h1><p>整个过程最大的问题应该是队员的不和睦与沟通不够，中间只能依靠队长连接，线上讨论本就不太方便，如此一来，沟通成本更高。大家的想法也不能很好交流，很大程度上影响解决方案的产出。</p><h1 id="7-题解（to-do）"><a href="#7-题解（to-do）" class="headerlink" title="7. 题解（to do）"></a>7. 题解（to do）</h1><blockquote><p>大概就这些了，虽然可能还有一些问题没有说明，但是时间过去两个月了，大抵不太记得清了，能记住，应该都是重点！而且，至少写出来的都应该会记在心里。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
            <tag> 美赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔_答辩经验</title>
      <link href="/2021/sui-bi-da-bian-jing-yan/"/>
      <url>/2021/sui-bi-da-bian-jing-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PPT制作"><a href="#1-PPT制作" class="headerlink" title="1. PPT制作"></a>1. PPT制作</h1><ol><li>图片大小要合适，要让大家看得清</li><li>每一个符号或表示都应该是有解释的</li><li>表格需要统一格式：都三线表或都格子表</li><li>当遇到一张PPT下多图时，图片叠加+动画依次展示</li><li>行间距1.3-1.5</li><li>PPT尽可能少用动画，一定不要用切换动画</li><li>一般PPT 15-18页为宜</li><li>最后一页可以不用谢谢观看，并无实质作用</li><li>字体一般21号以上</li><li>整体配色同样需要考虑</li><li>多用数据和图表，数据醒目，图表清晰</li></ol><span id="more"></span><h1 id="2-答辩"><a href="#2-答辩" class="headerlink" title="2. 答辩"></a>2. 答辩</h1><p>答辩，只不过是从与一个人交流变成与多个人交流。</p><ol><li>注意跟观众眼神交流</li><li>注意不是每个人都了解你的技术细节，每一个部分起码都要讲一下，不能因为自己觉得简单就不讲</li><li>整体应该有详略，每部分讲多长根据详略判定</li><li>答辩并非演讲，忌讳朗诵，自信讲述即可</li><li>注意使用故事性讲述，比如讲述项目痛点时用故事引入</li><li>可以适当用设问引起注意</li><li>控制语速，不快不慢，吐字清晰</li><li>答辩第一遍讲稿可以是提纲，也可以是讲稿，总之不能直接背记，应该反复模拟答辩，然后逐步修改讲稿</li><li>答辩时站直，注意精气神</li><li>多用数据和图标展示内容</li><li>可以用设问引起听众注意</li><li>团队成员简单介绍即可，可以放在开始部分</li><li>答辩看重个人魅力，一定要自信向上，以及整个团队成员的魅力</li><li>在业务场景里需要介绍业务流程，在产品介绍里明确并强调产品定位，立场也不仅仅在当下，而在未来的发展趋势，总而言之，先说清楚要干啥，再讲清楚怎么干，是否确确实实做得好</li></ol><h1 id="3-提问"><a href="#3-提问" class="headerlink" title="3. 提问"></a>3. 提问</h1><p>重要的是随机应变+先思考再回答</p><ol><li>不确定该回答什么的问题，一定要阐述自己的理解进行确认，不要担心评委厌烦，答非所问更严重</li><li>每个问题都尽量展示自己的优秀、亮点和努力，比如未完成的工作，但是已经在做了也要说出来，甚至可以说说做到哪一步了，然后再说说后续会继续完成，如果可以提交文档，就说会补充在文档中，又比如说，软件的实现，可以说我们已经在部署服务器，准备发布软件</li><li>提问环节，等待评委说完再回答，可适当停1-3秒</li><li>深入理解自己的创新，哪些地方超越了赛题，在答辩或者回答的过程中，可以不断有意无意地提到</li><li>回答的套路：你好老师，这个问题由我回答，·······(就问题回答的同时适当延展)，感谢评委老师的提问，我的回答不知道是否让您满意。注意每个问题至少20-40秒。</li><li>不要逞强，承认不足，感谢指点，不反问评委老师，可以说后续深入思考</li><li>项目的算法、数据、设计等部分，可以分人准备应答，要相信队友</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿基础_Git 与 GitHub 速成教程</title>
      <link href="/2021/yuan-ji-chu-git-yu-github-su-cheng-jiao-cheng/"/>
      <url>/2021/yuan-ji-chu-git-yu-github-su-cheng-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文字版教程"><a href="#1-文字版教程" class="headerlink" title="1 文字版教程"></a>1 文字版教程</h1><p>转载：<a href="https://www.cnblogs.com/zhangxiaoyong/p/6000084.html#_label13">《史上最详细的Git教程》</a></p><h1 id="2-视频教程"><a href="#2-视频教程" class="headerlink" title="2 视频教程"></a>2 视频教程</h1><p>转载：<a href="https://www.bilibili.com/video/av10475153/?p=1">《【教程】学会Git玩转Github【全】》</a></p><span id="more"></span><h1 id="3-常用Git命令"><a href="#3-常用Git命令" class="headerlink" title="3 常用Git命令"></a>3 常用Git命令</h1><p><img src="https://img-blog.csdnimg.cn/20200309104945998.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-建立SSH连接后，利用Git-提交文件至远程仓库"><a href="#4-建立SSH连接后，利用Git-提交文件至远程仓库" class="headerlink" title="4 建立SSH连接后，利用Git 提交文件至远程仓库"></a>4 建立SSH连接后，利用Git 提交文件至远程仓库</h1><p><font color="green">&#x2F;&#x2F; 删除文件需要单独使用 git rm xxx(文件名)，一一删除</font></p><ul><li>**git config –global user.name “username” **  &#x2F;&#x2F;配置用户名 </li><li>**git config –global user.email “<a href="mailto:&#120;&#x78;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#120;&#x78;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>“ ** &#x2F;&#x2F;配置邮箱</li><li><strong>git init</strong>  &#x2F;&#x2F;初始化生成一个本地仓库</li><li>**git add . ** &#x2F;&#x2F;添加到暂存区</li><li><strong>git commit –m “message”</strong>  &#x2F;&#x2F;提交到本地仓库 </li><li><strong>git remote add origin url</strong> &#x2F;&#x2F;关联到远程仓库 </li><li><strong>git push origin master</strong> &#x2F;&#x2F;推送本地 master 分支到远程 master 分支 </li><li><strong>git checkout -b dev</strong> &#x2F;&#x2F;创建一个开发分支并切换到新分支</li><li><strong>git push ogigin dev</strong> &#x2F;&#x2F;推送本地 dev 分支到远程 dev 分支 </li><li><strong>git pull origin dev</strong> &#x2F;&#x2F;从远程 dev 分支拉取到本地 dev 分支 </li><li><strong>git clone url</strong> &#x2F;&#x2F;将远程仓库克隆下载到本地</li><li><strong>git log</strong>  &#x2F;&#x2F; 查看历史版本</li><li><strong>git reset –hard commit_id</strong>  &#x2F;&#x2F; 将本地仓库回退到某个版本</li></ul><h1 id="5-未建立SSH连接，利用Git提交代码"><a href="#5-未建立SSH连接，利用Git提交代码" class="headerlink" title="5 未建立SSH连接，利用Git提交代码"></a>5 未建立SSH连接，利用Git提交代码</h1><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><strong>git config –global user.name “你的GitHub登陆名”</strong></p><p><strong>git config –global user.email “你的GitHub注册邮箱”</strong> </p><h3 id="连接本地仓库与远程仓库"><a href="#连接本地仓库与远程仓库" class="headerlink" title="连接本地仓库与远程仓库"></a>连接本地仓库与远程仓库</h3><p><strong>git remote add origin <a href="https://github.com/userName/yourProject.git">https://github.com/userName/yourProject.git</a></strong></p><h3 id="之后与-4-一致"><a href="#之后与-4-一致" class="headerlink" title="之后与 4 一致"></a>之后与 4 一致</h3><h1 id="6-报错"><a href="#6-报错" class="headerlink" title="6 报错"></a>6 报错</h1><h2 id="6-1-fatal-Not-a-valid-object-name-‘master’"><a href="#6-1-fatal-Not-a-valid-object-name-‘master’" class="headerlink" title="6.1 fatal: Not a valid object name: ‘master’"></a>6.1 fatal: Not a valid object name: ‘master’</h2><ul><li>要先commit一次才会真正建立master分支，此时就可以新建立分支了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 猿基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Jupyter</title>
      <link href="/2021/python-jupyter/"/>
      <url>/2021/python-jupyter/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Jupyter安装"><a href="#1-Jupyter安装" class="headerlink" title="1 Jupyter安装"></a>1 Jupyter安装</h1><h2 id="1-1-修改Jupyter默认文件及目录"><a href="#1-1-修改Jupyter默认文件及目录" class="headerlink" title="1.1 修改Jupyter默认文件及目录"></a>1.1 修改Jupyter默认文件及目录</h2><ul><li>详见博客：<a href="https://blog.csdn.net/yuanxiang01/article/details/79217469">修改Jupyter Notebook的默认工作目录</a></li></ul><h2 id="1-2-conda安装pytorch"><a href="#1-2-conda安装pytorch" class="headerlink" title="1.2 conda安装pytorch"></a>1.2 conda安装pytorch</h2><ul><li>详见博客：<a href="https://blog.csdn.net/zzq060143/article/details/88042075">pytorch快速安装【清华源】</a></li></ul><h2 id="2-Jupyter使用"><a href="#2-Jupyter使用" class="headerlink" title="2 Jupyter使用"></a>2 Jupyter使用</h2><h2 id="2-1-Jupyter快捷键"><a href="#2-1-Jupyter快捷键" class="headerlink" title="2.1 Jupyter快捷键"></a>2.1 Jupyter快捷键</h2><ul><li>详见博客：<a href="https://zhuanlan.zhihu.com/p/100020058">【jupyter】jupyter快捷键</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构与设计</title>
      <link href="/2021/cqu-ruan-jian-jia-gou-yu-she-ji/"/>
      <url>/2021/cqu-ruan-jian-jia-gou-yu-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="0-知识结构"><a href="#0-知识结构" class="headerlink" title="0. 知识结构"></a>0. 知识结构</h1><h2 id="0-1-软件架构设计三大层次"><a href="#0-1-软件架构设计三大层次" class="headerlink" title="0.1 软件架构设计三大层次"></a>0.1 软件架构设计三大层次</h2><p>在软件架构设计时,根据抽象程度从高到低可划分为三个层次的模式：**架构模式(Architectural Pattern)、设计模式(Design Pattern)、代码模式(Coding Pattern)**。</p><ul><li><strong>架构模式</strong>是一个系统的高层次策略，涉及到大尺度的组件以及整体性质。</li><li><strong>设计模式</strong>是中等尺度的结构策略。这些中等尺度的结构实现了一些大尺度组件的行为和它们之间的关系。设计模式定义出子系统或组件的微观结构。</li><li><strong>代码模式（或成例）</strong>是特定的范例和与特定语言有关的编程技巧</li></ul><h2 id="0-2-框架Framework"><a href="#0-2-框架Framework" class="headerlink" title="0.2 框架Framework"></a>0.2 框架Framework</h2><p>软件框架是面向领域（如ERP、计算领域等）的、可复用的“半成品”软件，它实现了该领域的共性部分，并提供了一些定义良好的可变点以保证灵活性和可扩展性。</p><ul><li>框架是可被应用开发者定制的应用骨架。框架实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。</li><li>框架具体表现为一组抽象类（构件）以及其实例（对象）之间的相互作用方式。框架描述了系统中所有的构件、构件之间的交互、连接件以及如何将构件和连接件结合的规则。</li><li>软件框架的一个显著特点是<strong>逆向控制（Inversion of Control）</strong>，应用开发人员只要将应用特定的模块绑定到框架内，框架则根据自己的交互机制自动调用该模块，控制由框架负责。</li></ul><p>框架可分为三大类：</p><ul><li><strong>基础设施框架</strong>：用于简化系统级软件的开发</li><li><strong>中间件框架</strong>：用于组装分布式应用和构件</li><li><strong>应用框架</strong>：如Web应用框架Eclipse ，Struts等</li></ul><h2 id="0-3-框架与软件架构-x2F-设计模式对比"><a href="#0-3-框架与软件架构-x2F-设计模式对比" class="headerlink" title="0.3 框架与软件架构&#x2F;设计模式对比"></a>0.3 框架与软件架构&#x2F;设计模式对比</h2><h3 id="0-3-1-框架-与-软件架构"><a href="#0-3-1-框架-与-软件架构" class="headerlink" title="0.3.1 框架 与 软件架构"></a>0.3.1 框架 与 软件架构</h3><ul><li>框架比架构更具体，更偏重于技术</li><li>确定框架后，软件体系结构也随之确定</li><li>对于同一软件体系结构（比如Web开发中的MVC），可以通过多种框架来实现</li></ul><h3 id="0-3-2-框架-与-设计模式"><a href="#0-3-2-框架-与-设计模式" class="headerlink" title="0.3.2 框架 与 设计模式"></a>0.3.2 框架 与 设计模式</h3><ul><li>设计模式是对在某种环境中反复出现的问题以及解决该问题的方案的描述，它比框架更抽象；框架可以用代码表示，也能直接执行或复用，而对模式而言只有实例才能用代码表示</li><li>设计模式是比框架更小的元素，一个框架中往往含有一个或多个设计模式，框架总是针对某一特定应用领域，但同一模式却可适用于各种应用</li><li>框架是软件，而设计模式是软件策略</li></ul><h1 id="1-软件体系结构"><a href="#1-软件体系结构" class="headerlink" title="1 软件体系结构"></a>1 软件体系结构</h1><h2 id="1-1-软件体系结构基本概念"><a href="#1-1-软件体系结构基本概念" class="headerlink" title="1.1 软件体系结构基本概念"></a>1.1 软件体系结构基本概念</h2><blockquote><p>软件体系结构的概念、软件体系结构核心模型及各组成元素的含义</p></blockquote><h3 id="1-1-1-软件体系结构概念"><a href="#1-1-1-软件体系结构概念" class="headerlink" title="1.1.1 软件体系结构概念"></a>1.1.1 软件体系结构概念</h3><p>软件系统的体系结构是指根据计算组件和这些组件之间的交互定义系统。</p><h3 id="1-2-2-软件体系结构核心模型"><a href="#1-2-2-软件体系结构核心模型" class="headerlink" title="1.2.2 软件体系结构核心模型"></a>1.2.2 软件体系结构核心模型</h3><p><img src="http://img.fdchen.host//%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9E%8B.png" alt="image-20210617203242151"></p><ul><li><p>软件体系结构<strong>基本组成元素</strong>：</p><ul><li>构件Component：系统的逻辑与功能结构组成单元。<ul><li>构件是具有某种功能的可重用的软件模板单元，表示了系统中主要的计算元素和数据存储。</li><li>构件是一个抽象概念，与具体实现技术无关。</li><li>原子构件不可再分；复合构件可分解为其他复合构件和原子构件。</li><li>构件通过其接口与外部环境交互，接口由一组<strong>端口  （Port）</strong>组成。</li><li><strong>每个端口表示构件和外部环境的交互作用点</strong>。</li></ul></li></ul><p><img src="http://img.fdchen.host//%E5%85%B8%E5%9E%8B%E6%9E%84%E4%BB%B6.png" alt="image-20210617202647617"></p><ul><li>连接件Connector：构件间交互的机制和规则。<ul><li>机制：连接件的具体实现形式</li><li>规则：构件使用连接件应遵循的规范</li><li>角色：连接件的交互参与者</li><li>连接方式分类：单向连接和双向连接、同步&#x2F;异步连接</li></ul></li><li>配置Configuration：表示构件和连接件的拓扑逻辑和约束，包括：<ul><li>构件的端口与连接件的角色之间的关联关系</li><li>复合构件与其子构件的嵌套包含关系</li></ul></li></ul></li></ul><h2 id="1-2-软件体系结构建模"><a href="#1-2-软件体系结构建模" class="headerlink" title="1.2 软件体系结构建模"></a>1.2 软件体系结构建模</h2><blockquote><p>4+1视图概念、关注点、各视图的典型体系结构表示（构件和连接件）</p></blockquote><h3 id="1-2-1-4-1视图概念"><a href="#1-2-1-4-1视图概念" class="headerlink" title="1.2.1 4+1视图概念"></a>1.2.1 4+1视图概念</h3><p>“4+1”视图模型从5个不同的视角来描述软件体系结构：逻辑视角、进程视角、开发视角、物理视角和场景视角。<br>每一个视角只关心系统的一个侧面，5个视角结合在一起反映系统的软件体系结构的完整内容。</p><p><img src="http://img.fdchen.host//4+1%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%9E%8B.png" alt="image-20210617205943222"></p><ul><li><p><strong>Logic View（逻辑视图）</strong>：基于功能需求抽象，刻画系统的静态结构模型；</p></li><li><p><strong>Process View（进程视图）</strong>：刻画系统运行时的结构模型；</p></li><li><p><strong>Development View（开发视图）</strong>：考虑开发技术、过程与组织，刻画系统的开发管理结构模型；</p></li><li><p><strong>Physical View（物理视图）</strong>：逻辑视图中各功能构件在安装部署环境中的映射，刻画系统的安装部署结构模型；</p></li><li><p><strong>Scenarios View（场景视图）</strong>：从系统使用的角度对系统结构的描述。它反映的是在完成某个系统功能时，系统各功能构件间的交互关系。</p></li></ul><h3 id="1-2-2-4-1视图关注点与典型表示"><a href="#1-2-2-4-1视图关注点与典型表示" class="headerlink" title="1.2.2 4+1视图关注点与典型表示"></a>1.2.2 4+1视图关注点与典型表示</h3><h4 id="1-2-2-1-逻辑视图"><a href="#1-2-2-1-逻辑视图" class="headerlink" title="1.2.2.1 逻辑视图"></a>1.2.2.1 逻辑视图</h4><ul><li>逻辑视图主要关注<strong>系统的功能需求。</strong></li><li>在面向对象技术中，可以用<strong>对象模型</strong>代表逻辑视图，用<strong>类图</strong>描述逻辑视图。<ul><li><strong>构件</strong>：类、类服务、参数化类、类层次（包）</li><li><strong>连接件</strong>：关联、包含聚集、使用、继承、实例化</li></ul></li></ul><h4 id="1-2-2-2-开发视图"><a href="#1-2-2-2-开发视图" class="headerlink" title="1.2.2.2 开发视图"></a>1.2.2.2 开发视图</h4><ul><li>开发视图关注<strong>软件开发环境下实际模块的组织和管理</strong>，体现为软件模块、库、子系统和开发单元的结构化组织。</li><li>开发视图可采用<strong>层次结构</strong>，每一层为上层提供良好定义的接口，层次越低，通用性越好。<ul><li><strong>构件</strong>：模块、子系统、层</li><li><strong>连接件</strong>：参照相关性、模块&#x2F;过程调用</li></ul></li></ul><h4 id="1-2-2-3-进程视图"><a href="#1-2-2-3-进程视图" class="headerlink" title="1.2.2.3 进程视图"></a>1.2.2.3 进程视图</h4><ul><li>进程视图侧重<strong>系统的运行特性</strong>，关注非功能性需求（性能、可用性）。</li><li>它定义逻辑视图中的各个构件具体在进程&#x2F;线程中的映射结构。<ul><li><strong>构件：</strong>进程、简化进程、循环进程 </li><li><strong>连接件：</strong>消息、远程过程调用（RPC）、双向消息、事件广播</li></ul></li></ul><h4 id="1-2-2-4-物理视图"><a href="#1-2-2-4-物理视图" class="headerlink" title="1.2.2.4 物理视图"></a>1.2.2.4 物理视图</h4><ul><li>物理视图主要考虑如何<strong>把软件映射到硬件</strong>，它通常要考虑软件系统在计算物理节点与网络拓扑结构上的运行部署等问题。</li><li>主要关注系统性能、可扩展性、可靠性等软件非功能性需求约束。<ul><li><strong>构件</strong>：处理器、计算机、其它设备 </li><li><strong>连接件</strong>：通信协议等</li></ul></li></ul><h4 id="1-2-2-5-场景视图"><a href="#1-2-2-5-场景视图" class="headerlink" title="1.2.2.5 场景视图"></a>1.2.2.5 场景视图</h4><ul><li>场景视图<strong>从系统使用的角度</strong>对系统结构进行描述。场景反映在完成一个系统功能时，系统各功能构件间的协作关系。</li><li>场景处于中心位置，它使四个视图有机联系起来，从某种意义上说场景是最重要的需求抽象。</li><li>场景的表示法:<ul><li><strong>文本、图形</strong>表示均可；</li><li>静态方面用<strong>用例图</strong>表现，动态方面用<strong>活动图、状态图、交互图</strong>表现。</li></ul></li></ul><h2 id="1-3-软件体系结构风格"><a href="#1-3-软件体系结构风格" class="headerlink" title="1.3 软件体系结构风格"></a>1.3 软件体系结构风格</h2><blockquote><p>内容范围：管道-过滤器，分层体系结构，基于事件的隐式调用，仓库风格</p><p>要点：构件与连接件，实现方式，特点，分类及典型应用</p></blockquote><h3 id="1-3-1-管道-过滤器体系结构风格Pipes-Filters"><a href="#1-3-1-管道-过滤器体系结构风格Pipes-Filters" class="headerlink" title="1.3.1 管道-过滤器体系结构风格Pipes-Filters"></a>1.3.1 管道-过滤器体系结构风格Pipes-Filters</h3><p><img src="http://img.fdchen.host//%E7%AE%A1%E9%81%93-%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A3%8E%E6%A0%BC.png" alt="image-20210617212211158"></p><ul><li><p>管道-过滤器体系结构风格为处理数据流的软件系统架构提供了一种参考结构。它是由过滤器和管道组成的。每个处理步骤都被封装在一个过滤器组件中，数据流通过相邻过滤器之间的管道进行传输。每个过滤器可以单独修改，功能单一，并且它们之间的顺序可以进行配置。</p></li><li><p><strong>构件类型</strong>：过滤器（Filter）——数据处理构件</p></li><li><p><strong>连接件类型</strong>：管道（Pipe）——过滤器间的连接件</p></li><li><p><strong>分类</strong>：</p><ul><li>被动过滤器（下面的一种的方式）：<ul><li>过滤器从上一个相邻过滤器采用拉入(pull)方式读取数据。</li><li>过滤器采用压出(push)方式输出数据给下一个相邻过滤器。</li></ul></li><li>主动过滤器：<ul><li>过滤器同时支持以上两种方式(Pull&#x2F;Push)读写数据。</li></ul></li></ul></li><li><p><strong>特点</strong>：</p><ul><li>功能特性<ul><li>处理或者转换输入数据流</li><li>对数据流的处理可以容易地分成几个独立的处理步骤</li></ul></li><li>非功能特性（质量特性）<ul><li>系统的升级要求可以通过替换&#x2F;增加&#x2F;重组过滤器实现，有时甚至由使用者完成操作（系统运行时配置更新）</li><li>不同的处理步骤不共享信息（过滤器构件间松耦合）</li></ul></li></ul></li><li><p><strong>优点</strong>：</p><ul><li>高内聚和低耦合</li><li>通过过滤器的增加&#x2F;移除&#x2F;重组可实现数据流处理系统的灵活性&#x2F;可扩展性</li><li>过滤器构件具有可重用性</li><li>有利于系统的维护与更新</li><li>可支持局部步骤的并行处理以提高效率</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>增量式处理数据，存在效率问题</li><li>数据格式转换的问题：数据转换额外开销</li><li>不适合交互式应用系统</li></ul></li><li><p><strong>典型系统案例</strong>：高级语言编译器系统、Windows CMD&#x2F;Unix Shell命令解释器系统</p></li></ul><h3 id="1-3-2-基于事件的隐式调用体系结构风格"><a href="#1-3-2-基于事件的隐式调用体系结构风格" class="headerlink" title="1.3.2 基于事件的隐式调用体系结构风格"></a>1.3.2 基于事件的隐式调用体系结构风格</h3><p><img src="http://img.fdchen.host//%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%9A%90%E5%BC%8F%E8%B0%83%E7%94%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="image-20210617214926793"></p><ul><li>基于事件的(隐式调用风格)系统结构风格中，构件间不采用直接耦合方式交互，而是通过事件机制交互。系统中的事件处理者构件可以通过事件注册来订阅它所关心的事件相关联。当某一事件发生时，系统会通知所有与这个事件相关联的事件处理者构件，即一个事件的激发导致了事件处理者构件与事件源构件间的隐式地交互。</li><li><strong>构件类型</strong>：<ul><li>事件源（Event Source）构件</li><li>事件处理者（Event Handler）构件</li><li>事件分发者（Event Dispatcher）构件</li></ul></li><li><strong>连接件类型</strong>：<ul><li>事件对象（Event）</li></ul></li><li>优点：<ul><li>系统具有很好的灵活性，系统易于伸缩扩展</li></ul></li><li>缺点：<ul><li>系统控制权的问题，系统放弃了全局控制</li><li>数据的交互问题，数据可被一个事件传递，但一些情况下，基于事件的系统必须依靠一个共享的仓库进行交互。</li></ul></li><li>典型系统案例：图形用户界面系统、某些监控系统、现代高级语言的异常处理</li></ul><h3 id="1-3-3-分层体系结构风格"><a href="#1-3-3-分层体系结构风格" class="headerlink" title="1.3.3 分层体系结构风格"></a>1.3.3 分层体系结构风格</h3><p><img src="http://img.fdchen.host//%E5%88%86%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A3%8E%E6%A0%BC.png" alt="image-20210617221108262"></p><ul><li>实现方式：<ul><li>将系统分成适当层次，按适当次序放置。</li><li>从最低抽象层次开始，以梯状把抽象层次n放在n-1层顶部。直到功能顶部。</li><li>第n层提供的绝大多数服务由第n-1层提供的服务组成。</li><li>每个层次是一个独立的组件。它的责任是提供由上层使用的服务，并且委派任务给下一层次。</li><li>不允许较高层次直接越级访问较低层次。</li></ul></li><li>构件：每一层对应一个构件<ul><li>层构件内部子构件端口保护：为每个层构件指定一个单一的端口（Port）</li></ul></li><li>连接件：指定相邻层之间的交互模式，Push mode和Pull model</li><li>分类：<ul><li>Top-Down：用户向顶层N发出一个请求</li><li>Botton-Up：从底层开始的动作连</li><li>两个彼此交互的层系统</li></ul></li><li>特点：<ul><li>优点：<ul><li>层构件的封装性、可重用性、可替换性</li><li>系统的局部依赖特性</li></ul></li><li>缺点：<ul><li>层构件间的依赖性，特别是当低层构件的修改影响高层构件的时<br>候，可能引起底层之上的多个层构件的修改。</li><li>效率问题：顶层构件到底层构件之间需要进行层层的参数传递&#x2F;转<br>换等。</li></ul></li></ul></li><li>典型系统案例：TCP&#x2F;IP协议系统，Web应用系统（展现层、业务层、数据访问层）</li></ul><h3 id="1-3-4-仓库体系结构风格Repository"><a href="#1-3-4-仓库体系结构风格Repository" class="headerlink" title="1.3.4 仓库体系结构风格Repository"></a>1.3.4 仓库体系结构风格Repository</h3><p><img src="http://img.fdchen.host//%E4%BB%93%E5%BA%93%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A3%8E%E6%A0%BC.png" alt="image-20210617221314083"></p><ul><li>分类：<ul><li>被动仓库：数据库系统</li><li>主动仓库：黑板系统</li></ul></li><li>特点：<ul><li>优点：<ul><li>可扩展性</li><li>可维护性</li><li>安全性</li><li>并行处理性</li></ul></li><li>缺点：<ul><li>单一失败点：仓库</li></ul></li></ul></li><li>典型系统案例：专家系统</li></ul><h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2 设计模式"></a>2 设计模式</h2><h2 id="2-1-面向对象设计原则"><a href="#2-1-面向对象设计原则" class="headerlink" title="2.1 面向对象设计原则"></a>2.1 面向对象设计原则</h2><blockquote><p>重点是OCP</p></blockquote><h3 id="2-1-1-开闭原则（OCP）（重点）"><a href="#2-1-1-开闭原则（OCP）（重点）" class="headerlink" title="2.1.1 开闭原则（OCP）（重点）"></a>2.1.1 开闭原则（OCP）（重点）</h3><p>软件实体应该对扩展开放，但对修改关闭。</p><ul><li><p>设计模式的支持和体现：</p><p>Strategy模式；Factory模式；Builder模式；Bridge模式；Façade模式；Mediator模式</p></li></ul><h3 id="2-1-2-里氏代换原则（LSP）"><a href="#2-1-2-里氏代换原则（LSP）" class="headerlink" title="2.1.2 里氏代换原则（LSP）"></a>2.1.2 里氏代换原则（LSP）</h3><p>一个软件实体如果使用的是一个基类，那么一定适用于其子类，而且它根本不能察觉出基类对象和子类对象的区别。</p><h3 id="2-1-3-依赖倒转原则（DIP）"><a href="#2-1-3-依赖倒转原则（DIP）" class="headerlink" title="2.1.3 依赖倒转原则（DIP）"></a>2.1.3 依赖倒转原则（DIP）</h3><p>要依赖于抽象，不要依赖于具体（依赖倒转）。要针对接口编程，不要针对实现编程。</p><h3 id="2-1-4-接口隔离原则（ISP）"><a href="#2-1-4-接口隔离原则（ISP）" class="headerlink" title="2.1.4 接口隔离原则（ISP）"></a>2.1.4 接口隔离原则（ISP）</h3><p>使用多个专门的接口比使用单一的总接口要好。（一个类对另一个类的依赖性应当建立在最小的接口之上）。</p><h3 id="2-1-5-合成-x2F-聚合复用原则（CARP）"><a href="#2-1-5-合成-x2F-聚合复用原则（CARP）" class="headerlink" title="2.1.5 合成&#x2F;聚合复用原则（CARP）"></a>2.1.5 合成&#x2F;聚合复用原则（CARP）</h3><p>要尽量使用合成&#x2F;聚合，尽量不要使用继承。</p><h3 id="2-1-6-迪米特法则（LoD）"><a href="#2-1-6-迪米特法则（LoD）" class="headerlink" title="2.1.6 迪米特法则（LoD）"></a>2.1.6 迪米特法则（LoD）</h3><p>一个对象应当对其他对象有尽可能少的了解。</p><p>一个软件实体应当与尽可能少的其他实体发生相互作用（直接通信）。</p><h2 id="2-2-设计模式的分类及适用的问题（意图）"><a href="#2-2-设计模式的分类及适用的问题（意图）" class="headerlink" title="2.2 设计模式的分类及适用的问题（意图）"></a>2.2 设计模式的分类及适用的问题（意图）</h2><blockquote><p>Factory Method Abstract Factory Prototype Singleton </p><p>Adapter（自学理解） Composite Decorator Bridge</p><p>Command Observer(了解) Iterator</p><p>意图、适用性、实现机制、分类、区别</p></blockquote><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><h3 id="2-2-1-Factory-Method工厂方法"><a href="#2-2-1-Factory-Method工厂方法" class="headerlink" title="2.2.1 Factory Method工厂方法"></a>2.2.1 Factory Method工厂方法</h3><p><img src="http://img.fdchen.host//Factory%20Method.png" alt="image-20210617222629809"></p><h3 id="2-2-2-Abstract-Factory抽象工厂"><a href="#2-2-2-Abstract-Factory抽象工厂" class="headerlink" title="2.2.2 Abstract Factory抽象工厂"></a>2.2.2 Abstract Factory抽象工厂</h3><p><img src="http://img.fdchen.host//Abstract%20Factory.png" alt="image-20210617222721586"></p><h3 id="2-2-3-Prototype原型"><a href="#2-2-3-Prototype原型" class="headerlink" title="2.2.3 Prototype原型"></a>2.2.3 Prototype原型</h3><p><img src="http://img.fdchen.host//Prototype.png" alt="image-20210617222750554"></p><h3 id="2-2-4-Singleton单例"><a href="#2-2-4-Singleton单例" class="headerlink" title="2.2.4  Singleton单例"></a>2.2.4  Singleton单例</h3><p><img src="http://img.fdchen.host//Singleton.png" alt="image-20210617222809850"></p><h3 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h3><h3 id="2-2-5-Adapter适配器（自学理解）"><a href="#2-2-5-Adapter适配器（自学理解）" class="headerlink" title="2.2.5 Adapter适配器（自学理解）"></a>2.2.5 Adapter适配器（自学理解）</h3><p><img src="http://img.fdchen.host//Adapter.png" alt="image-20210617222837294"></p><h3 id="2-2-6-Composite组合"><a href="#2-2-6-Composite组合" class="headerlink" title="2.2.6 Composite组合"></a>2.2.6 Composite组合</h3><p><img src="http://img.fdchen.host//Composite.png" alt="image-20210617222955965"></p><ul><li><strong>对于组合模式而言，在安全性和透明性上，会更看重透明性，毕竟组合模式的功能就是要让用户对叶子对象和组合对象的使用具有一致性。而且对于安全性的实现，需要区分是组合对象还是叶子对象，但是有的时候，</strong>你需要将对象进行类型转换，却发现类型信息丢失了，只好强行转换，这种类型转换必然是不够安全的。因此在使用组合模式的时候，<strong>建议多用透明性的实现方式，而少用安全性的实现方式</strong>。</li></ul><h3 id="2-2-7-Decorator装饰器"><a href="#2-2-7-Decorator装饰器" class="headerlink" title="2.2.7 Decorator装饰器"></a>2.2.7 Decorator装饰器</h3><p><img src="http://img.fdchen.host//Decorator.png" alt="image-20210617223353031"></p><h3 id="2-2-8-Bridge桥接"><a href="#2-2-8-Bridge桥接" class="headerlink" title="2.2.8 Bridge桥接"></a>2.2.8 Bridge桥接</h3><p><img src="http://img.fdchen.host//Bridge.png" alt="image-20210617222914076"></p><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><h3 id="2-2-9-Command命令"><a href="#2-2-9-Command命令" class="headerlink" title="2.2.9 Command命令"></a>2.2.9 Command命令</h3><p><img src="http://img.fdchen.host//Command.png" alt="image-20210617223437485"></p><h3 id="2-2-10-Observer观察者-了解"><a href="#2-2-10-Observer观察者-了解" class="headerlink" title="2.2.10 Observer观察者(了解)"></a>2.2.10 Observer观察者(了解)</h3><p><img src="http://img.fdchen.host//Observer.png" alt="image-20210617223453580"></p><h3 id="2-2-11-Iterator迭代器"><a href="#2-2-11-Iterator迭代器" class="headerlink" title="2.2.11 Iterator迭代器"></a>2.2.11 Iterator迭代器</h3><p><img src="http://img.fdchen.host//Iterator.png" alt="image-20210617223511649"></p><h1 id="3-软件应用框架"><a href="#3-软件应用框架" class="headerlink" title="3 软件应用框架"></a>3 软件应用框架</h1><blockquote><p>应用框架中体系结构和设计模式理论的应用（有点迷，不确定）</p></blockquote><h2 id="3-1-Spring框架（3-0）"><a href="#3-1-Spring框架（3-0）" class="headerlink" title="3.1 Spring框架（3.0）"></a>3.1 Spring框架（3.0）</h2><p><img src="http://img.fdchen.host//Spring%E6%A1%86%E6%9E%B63.0.png" alt="image-20210617225935855"></p><h2 id="3-2-Spring框架中用到的设计模式"><a href="#3-2-Spring框架中用到的设计模式" class="headerlink" title="3.2 Spring框架中用到的设计模式"></a>3.2 Spring框架中用到的设计模式</h2><ul><li>beanfactory：简单工厂模式（不属于23种GOF设计模式之一），单例模式</li><li>FactoryBean：工厂方法</li><li>AOP：代理模式，适配器模式，装饰模式，策略模式</li><li>ApplicationListener：观察者模式</li><li>SimpleInstantiationStrategy：策略模式</li><li>JDBCTemplate：模板模式</li></ul><h2 id="3-3-Spring-MVC的流程"><a href="#3-3-Spring-MVC的流程" class="headerlink" title="3.3 Spring MVC的流程"></a>3.3 Spring MVC的流程</h2><p><img src="http://img.fdchen.host//Spring%20MVC%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="image-20210618171034105"></p>]]></content>
      
      
      <categories>
          
          <category> CQU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CQU </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿基础_正则表达式</title>
      <link href="/2021/yuan-ji-chu-zheng-ze-biao-da-shi/"/>
      <url>/2021/yuan-ji-chu-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Tip: <a href="https://regexr.com/">正则表达式练习网站点此进入</a></strong></p></blockquote><h1 id="1-常用匹配符号"><a href="#1-常用匹配符号" class="headerlink" title="1 常用匹配符号"></a>1 常用匹配符号</h1><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配除断行之外的任意字符</td></tr><tr><td>\w</td><td>匹配阿拉伯数字、英文大小写字母和下划线</td></tr><tr><td>\W</td><td>匹配被\w排除在外的字符（非阿拉伯数字、英文大小写字母或下划线）</td></tr><tr><td>\d</td><td>匹配阿拉伯数字</td></tr><tr><td>\D</td><td>匹配被\d排除在外的字符（非阿拉伯数字）</td></tr><tr><td>\s</td><td>匹配空白字符：空格、制表符tab、断行等</td></tr><tr><td>\S</td><td>匹配被\s排除在外的字符（非空白字符）</td></tr><tr><td>\b</td><td>匹配单词的开始或结束，意思是出现空白字符即停止之前的匹配</td></tr><tr><td>[]</td><td>代表1个字符，比如选择[yY]代表选择y或Y的1个字符</td></tr><tr><td>[选择范围]</td><td>匹配括号中范围内的任意一个字符（采用Unicode编码），比如[0-9]匹配数字0-9、[a-z]匹配小写字母a-z、[\u4e00-\u9fa5]匹配所有汉字</td></tr><tr><td>[范围]+</td><td>重复上一个字符<strong>一次或多次</strong></td></tr><tr><td>[范围]*</td><td>重复上一个字符<strong>零次或多次</strong></td></tr><tr><td>[范围]?</td><td>重复上一个字符<strong>零次或一次</strong></td></tr><tr><td>{a,b}</td><td>重复上一个字符<strong>a次至b次</strong>，{a,}代表至少a次，但不能表示最多几次</td></tr><tr><td>()</td><td>分组匹配，将括号里的表达式匹配的字符分为一组，可以用$1, $2调用（调用有限制）</td></tr><tr><td>^</td><td>1. <strong>限定开头</strong>，匹配输入字符串的开始位置，比如 &#x2F;^A&#x2F;会匹配”An e”中的A；2. 在中括号表达式中使用，当该符号在中括号表达式中使用时，表示<strong>不接受该中括号表达式中的字符集合</strong>，比如：&#x2F;[^a-z\s]&#x2F;会匹配”my 3 sisters”中的”3” ，这里的”^”的意思是字符类的否定，上面的正则表达式的意思是匹配不是（a到z和空白字符）的字符。</td></tr></tbody></table><span id="more"></span><h1 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2 特殊字符"></a>2 特殊字符</h1><table><thead><tr><th align="left">特殊字符 &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用\( 和\)。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\‘ 匹配 “\“，而 ‘\(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在中括号表达式中使用，当该符号在中括号表达式中使用时，表示不接受该中括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 \{。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 \</td></tr></tbody></table><p><strong>PS</strong>：更多详细语法与教程参考<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式|菜鸟教程</a>。</p><h1 id="3-C-正则表达式"><a href="#3-C-正则表达式" class="headerlink" title="3 C++正则表达式"></a>3 C++正则表达式</h1><blockquote><p>转载<a href="https://changkun.de/modern-cpp/zh-cn/06-regex/index.html%EF%BC%8C%E6%AD%A4%E5%A4%84%E5%86%85%E5%AE%B9%E6%9C%89%E7%9C%81%E7%95%A5">https://changkun.de/modern-cpp/zh-cn/06-regex/index.html，此处内容有省略</a></p></blockquote><h2 id="3-1-正则表达式简介"><a href="#3-1-正则表达式简介" class="headerlink" title="3.1 正则表达式简介"></a>3.1 正则表达式简介</h2><p>正则表达式不是 C++ 语言的一部分，这里仅做简单的介绍。</p><p>正则表达式描述了一种字符串匹配的模式。一般使用正则表达式主要是实现下面三个需求：</p><ol><li>检查一个串是否包含某种形式的子串；</li><li>将匹配的子串替换；</li><li>从某个串中取出符合条件的子串。</li></ol><p>正则表达式是由普通字符（例如 a 到 z）以及特殊字符组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。 正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><h2 id="3-2-std-regex-及其相关"><a href="#3-2-std-regex-及其相关" class="headerlink" title="3.2 std::regex 及其相关"></a>3.2 std::regex 及其相关</h2><h3 id="3-2-0-综述"><a href="#3-2-0-综述" class="headerlink" title="3.2.0 综述"></a>3.2.0 综述</h3><p>对字符串内容进行匹配的最常见手段就是使用正则表达式。 可惜在传统 C++ 中正则表达式一直没有得到语言层面的支持，没有纳入标准库， 而 C++ 作为一门高性能语言，在后台服务的开发中，对 URL 资源链接进行判断时， 使用正则表达式也是工业界最为成熟的普遍做法。</p><p>一般的解决方案就是使用 <code>boost</code> 的正则表达式库。 而 C++11 正式将正则表达式的的处理方法纳入标准库的行列，从语言级上提供了标准的支持， 不再依赖第三方。</p><p>C++11 提供的正则表达式库操作 <code>std::string</code> 对象， 模式 <code>std::regex</code> (本质是 <code>std::basic_regex</code>)进行初始化， 通过 <code>std::regex_match</code> 进行匹配， 从而产生 <code>std::smatch</code> （本质是 <code>std::match_results</code> 对象）。</p><p>我们通过一个简单的例子来简单介绍这个库的使用。考虑下面的正则表达式:</p><ul><li><code>[a-z]+\.txt</code>: 在这个正则表达式中, <code>[a-z]</code> 表示匹配一个小写字母, <code>+</code> 可以使前面的表达式匹配多次， 因此 <code>[a-z]+</code> 能够匹配一个小写字母组成的字符串。 在正则表达式中一个 <code>.</code> 表示匹配任意字符，而 <code>\.</code> 则表示匹配字符 <code>.</code>， 最后的 <code>txt</code> 表示严格匹配 <code>txt</code> 则三个字母。因此这个正则表达式的所要匹配的内容就是由纯小写字母组成的文本文件。</li></ul><p><code>std::regex_match</code> 用于匹配字符串和正则表达式，有很多不同的重载形式。 最简单的一个形式就是传入 <code>std::string</code> 以及一个 <code>std::regex</code> 进行匹配， 当匹配成功时，会返回 <code>true</code>，否则返回 <code>false</code>。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;int main() &#123;    std::string fnames[] &#x3D; &#123;&quot;foo.txt&quot;, &quot;bar.txt&quot;, &quot;test&quot;, &quot;a0.txt&quot;, &quot;AAA.txt&quot;&#125;;    &#x2F;&#x2F; 在 C++ 中 \ 会被作为字符串内的转义符，为使 \. 作为正则表达式传递进去生效，需要对 \ 进行二次转义，从而有 \\.    std::regex txt_regex(&quot;[a-z]+\\.txt&quot;);     std::regex txt_regex(&quot;[a-z]+\\.txt&quot;, regex::icase); &#x2F;&#x2F; regex::icase 不区分大小写    for (const auto &amp;fname: fnames)        std::cout &lt;&lt; fname &lt;&lt; &quot;: &quot; &lt;&lt; std::regex_match(fname, txt_regex) &lt;&lt; std::endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种常用的形式就是依次传入 <code>std::string</code>&#x2F;<code>std::smatch</code>&#x2F;<code>std::regex</code> 三个参数， 其中 <code>std::smatch</code> 的本质其实是 <code>std::match_results</code>。 在标准库中， <code>std::smatch</code> 被定义为了 <code>std::match_results&lt;std::string::const_iterator&gt;</code>， 也就是一个子串迭代器类型的 <code>match_results</code>。 使用 <code>std::smatch</code> 可以方便的对匹配的结果进行获取，例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::regex base_regex(&quot;([a-z]+)\\.txt&quot;);std::smatch base_match;for(const auto &amp;fname: fnames) &#123;    if (std::regex_match(fname, base_match, base_regex)) &#123;        &#x2F;&#x2F; std::smatch 的第一个元素匹配整个字符串        &#x2F;&#x2F; std::smatch 的第二个元素匹配了第一个括号表达式        if (base_match.size() &#x3D;&#x3D; 2) &#123;            std::string base &#x3D; base_match[1].str();            std::cout &lt;&lt; &quot;sub-match[0]: &quot; &lt;&lt; base_match[0].str() &lt;&lt; std::endl;            std::cout &lt;&lt; fname &lt;&lt; &quot; sub-match[1]: &quot; &lt;&lt; base &lt;&lt; std::endl;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两个代码段的输出结果为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">foo.txt: 1bar.txt: 1test: 0a0.txt: 0AAA.txt: 0sub-match[0]: foo.txtfoo.txt sub-match[1]: foosub-match[0]: bar.txtbar.txt sub-match[1]: bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以下转载<a href="https://blog.csdn.net/qq_34802416/article/details/79307102">https://blog.csdn.net/qq_34802416/article/details/79307102</a></p></blockquote><h3 id="3-2-1-regex-match"><a href="#3-2-1-regex-match" class="headerlink" title="3.2.1 regex_match"></a>3.2.1 regex_match</h3><h4 id="3-2-1-1-基本概念"><a href="#3-2-1-1-基本概念" class="headerlink" title="3.2.1.1 基本概念"></a>3.2.1.1 基本概念</h4><p>match是全文匹配，即要求整个字符串符合匹配规则。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; regex_match(&quot;123&quot;, regex(&quot;\\d&quot;)) &lt;&lt; endl;&#x2F;&#x2F;结果为0cout &lt;&lt; regex_match(&quot;123&quot;, regex(&quot;\\d+&quot;)) &lt;&lt; endl;&#x2F;&#x2F;结果为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述方法返回值为bool值，主要用于if条件表达式中。</p><h4 id="3-2-1-2-匹配结果"><a href="#3-2-1-2-匹配结果" class="headerlink" title="3.2.1.2 匹配结果"></a>3.2.1.2 匹配结果</h4><p>更多的时候我们希望能够获得匹配结果（字符串），对结果进行操作。这时就需要对匹配结果进行存储，共有两种存储方式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">match_results&lt;string::const_iterator&gt; result;smatch result;&#x2F;&#x2F;推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二种方式使用起来更简洁、方便，推荐使用。</p><h4 id="3-2-1-3-实例"><a href="#3-2-1-3-实例" class="headerlink" title="3.2.1.3 实例"></a>3.2.1.3 实例</h4><p>下面看一个match方法匹配的实例，看看实际应用：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str &#x3D; &quot;Hello_2018&quot;;smatch result;regex pattern(&quot;(.&#123;5&#125;)_(\\d&#123;4&#125;)&quot;);&#x2F;&#x2F;匹配5个任意单字符 + 下划线 + 4个数字if (regex_match(str, result, pattern))&#123;cout &lt;&lt; result[0] &lt;&lt; endl;&#x2F;&#x2F;完整匹配结果，Hello_2018cout &lt;&lt; result[1] &lt;&lt; endl;&#x2F;&#x2F;第一组匹配的数据，Hellocout &lt;&lt; result[2] &lt;&lt; endl;&#x2F;&#x2F;第二组匹配的数据，2018cout&lt;&lt;&quot;结果显示形式2&quot;&lt;&lt;endl;cout&lt;&lt; result.str() &lt;&lt; endl;&#x2F;&#x2F;完整结果，Hello_2018cout&lt;&lt; result.str(1) &lt;&lt; endl;&#x2F;&#x2F;第一组匹配的数据，Hellocout &lt;&lt; result.str(2) &lt;&lt; endl;&#x2F;&#x2F;第二组匹配的数据，2018&#125;&#x2F;&#x2F;遍历结果for (int i &#x3D; 0; i &lt; result.size(); ++i)&#123;cout &lt;&lt; result[i] &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result[]与result.str()这两种方式能够获得相同的值，我更喜欢用数组形式的。<br><strong>在匹配规则中，以括号()的方式来划分组别</strong>，实例中的规则共有两个括号，所以共有两组数据。</p><h3 id="3-2-2-regex-search"><a href="#3-2-2-regex-search" class="headerlink" title="3.2.2 regex_search"></a>3.2.2 regex_search</h3><h4 id="3-2-2-1-基本概念"><a href="#3-2-2-1-基本概念" class="headerlink" title="3.2.2.1 基本概念"></a>3.2.2.1 基本概念</h4><p>search是搜索匹配，即搜索字符串中存在符合规则的子字符串。<br>match与search一比较便知：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; regex_match(&quot;123&quot;, regex(&quot;\\d&quot;)) &lt;&lt; endl;&#x2F;&#x2F;结果为0cout &lt;&lt; regex_search(&quot;123&quot;, regex(&quot;\\d&quot;)) &lt;&lt; endl;&#x2F;&#x2F;结果为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-2-2-实例"><a href="#3-2-2-2-实例" class="headerlink" title="3.2.2.2 实例"></a>3.2.2.2 实例</h4><p>直接看例子：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str &#x3D; &quot;Hello 2018, Bye 2017&quot;;smatch result;regex pattern(&quot;\\d&#123;4&#125;&quot;);&#x2F;&#x2F;匹配四个数字&#x2F;&#x2F;迭代器声明string::const_iterator iterStart &#x3D; str.begin();string::const_iterator iterEnd &#x3D; str.end();string temp;while (regex_search(iterStart, iterEnd, result, pattern))&#123;temp &#x3D; result[0];cout &lt;&lt; temp &lt;&lt; &quot; &quot;;iterStart &#x3D; result[0].second;&#x2F;&#x2F;更新搜索起始位置,搜索剩下的字符串&#125;&#x2F;&#x2F; 输出结果：2018 2017<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要利用迭代器就可以很轻松的访问到所有匹配的结果值。</p><h3 id="3-2-3-regex-replace"><a href="#3-2-3-regex-replace" class="headerlink" title="3.2.3 regex_replace"></a>3.2.3 regex_replace</h3><h4 id="3-2-3-1-基本概念"><a href="#3-2-3-1-基本概念" class="headerlink" title="3.2.3.1 基本概念"></a>3.2.3.1 基本概念</h4><p>replace是替换匹配，即可以将符合匹配规则的子字符串替换为其他字符串。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str &#x3D; &quot;Hello_2018!&quot;;regex pattern(&quot;Hello&quot;);cout &lt;&lt; regex_replace(str, pattern, &quot;&quot;) &lt;&lt; endl;&#x2F;&#x2F;输出：_2018，将Hello替换为&quot;&quot;cout &lt;&lt; regex_replace(str, pattern, &quot;Hi&quot;) &lt;&lt; endl;&#x2F;&#x2F;输出：Hi_2018，将Hello替换为Hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-2-扩展"><a href="#3-2-3-2-扩展" class="headerlink" title="3.2.3.2 扩展"></a>3.2.3.2 扩展</h4><p>除了直接替换以外，还有可以用来调整字符串内容（缩短、顺序等）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str &#x3D; &quot;Hello_2018!&quot;;regex pattern2(&quot;(.&#123;3&#125;)(.&#123;2&#125;)_(\\d&#123;4&#125;)&quot;);&#x2F;&#x2F;匹配3个任意字符+2个任意字符+下划线+4个数字cout &lt;&lt; regex_replace(str, pattern2, &quot;$1$3&quot;) &lt;&lt; endl;&#x2F;&#x2F;输出：Hel2018，将字符串替换为第一个和第三个表达式匹配的内容cout &lt;&lt; regex_replace(str, pattern2, &quot;$1$3$2&quot;) &lt;&lt; endl;&#x2F;&#x2F;输出：Hel2018lo，交换位置顺序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>$n用于表示第n组匹配数据</strong>（组这个概念在文章前面部分提到过），所以我们可以利用这种方式来将字符串的内容进行调整。</p><h3 id="3-2-4-匹配忽略大小写"><a href="#3-2-4-匹配忽略大小写" class="headerlink" title="3.2.4 匹配忽略大小写"></a>3.2.4 匹配忽略大小写</h3><p>有时我们希望能够匹配的时候忽略大小写，这时候就要用到Regex的语法选项了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; regex_match(&quot;aaaAAA&quot;, regex(&quot;a*&quot;, regex::icase)) &lt;&lt; endl;&#x2F;&#x2F;结果为1cout &lt;&lt; regex_match(&quot;aaaAAA&quot;, regex(&quot;a*&quot;)) &lt;&lt; endl;&#x2F;&#x2F;结果为0&#x2F;&#x2F; regex::icase：匹配时忽略大小写。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-帮助网站"><a href="#3-2-5-帮助网站" class="headerlink" title="3.2.5 帮助网站"></a>3.2.5 帮助网站</h3><p>附上两个写正则表达式常用到的网站</p><ul><li><a href="http://tool.oschina.net/regex/">在线正则表达式验证</a></li><li><a href="https://regexper.com/">regexper</a>（显示正则表达式匹配结构）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 猿基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_入门教程</title>
      <link href="/2021/linux-ru-men-jiao-cheng/"/>
      <url>/2021/linux-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-视频教程"><a href="#1-视频教程" class="headerlink" title="1 视频教程"></a>1 视频教程</h1><p><a href="https://www.bilibili.com/video/BV1dW411M7xL?p=1">尚硅谷Linux教程</a></p><h1 id="2-视频笔记"><a href="#2-视频笔记" class="headerlink" title="2 视频笔记"></a>2 视频笔记</h1><p><a href="http://img.fdchen.host/%E5%B0%9A%E7%A1%85%E8%B0%B7Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0.pdf">尚硅谷Linux课程笔记</a></p><span id="more"></span><h1 id="3-补充"><a href="#3-补充" class="headerlink" title="3 补充"></a>3 补充</h1><h2 id="3-1-笔记补充"><a href="#3-1-笔记补充" class="headerlink" title="3.1 笔记补充"></a>3.1 笔记补充</h2><h3 id="3-1-1-Linux-磁盘分区的方式为mbr分区和gpt分区（笔记中误写成gtp分区）"><a href="#3-1-1-Linux-磁盘分区的方式为mbr分区和gpt分区（笔记中误写成gtp分区）" class="headerlink" title="3.1.1 Linux 磁盘分区的方式为mbr分区和gpt分区（笔记中误写成gtp分区）"></a>3.1.1 Linux 磁盘分区的方式为mbr分区和gpt分区（笔记中误写成gtp分区）</h3><h3 id="3-1-2-vi操作"><a href="#3-1-2-vi操作" class="headerlink" title="3.1.2 vi操作"></a>3.1.2 vi操作</h3><ol><li><p>跳到文本的最后一行：按“G”,即“shift+g”。</p></li><li><p>跳到最后一行的最后一个字符 ： 先重复1的操作即按“G”，之后按“$”键，即“shift+4”。</p></li><li><p>跳到第一行的第一个字符：先按两次“g”。</p></li><li><p>跳转到当前行的第一个字符：在当前行按“0”。</p></li><li><p>vi加密。进入vi，输入”:”  + “X” 之后就提示你输入两次密码。</p></li><li><p>文件重新载入 :e!。</p></li><li><p>单行复制  将光标移到复制行 按 ‘yy’进行复制。</p></li><li><p>多行复制  将光标移到复制首行 按 ‘nyy’进行复制 n&#x3D;1.2.3.4……</p></li><li><p>粘贴 将光标移到粘贴行 按 ‘p’进行粘贴。</p></li><li><p>查找 &#x2F;pattern Enter。</p></li></ol><h2 id="3-2-常用命令补充"><a href="#3-2-常用命令补充" class="headerlink" title="3.2 常用命令补充"></a>3.2 常用命令补充</h2><h3 id="3-2-1-Ctrl-C"><a href="#3-2-1-Ctrl-C" class="headerlink" title="3.2.1 Ctrl+C"></a>3.2.1 Ctrl+C</h3><ul><li>强制中断程序的执行。</li></ul><h3 id="3-2-2-Ctrl-Z"><a href="#3-2-2-Ctrl-Z" class="headerlink" title="3.2.2 Ctrl+Z"></a>3.2.2 Ctrl+Z</h3><ul><li><p>将任务中断，但是此任务并没有结束,他仍然在进程中他只是维持挂起的状态，用户可以使用<strong>fg&#x2F;bg</strong>操作继续前台或后台的任务。</p></li><li><p><strong>fg命令重新启动前台被中断的任务。</strong></p></li><li><p><strong>bg命令把被中断的任务放在后台执行。</strong></p></li></ul><h3 id="3-2-3-Ctrl-d"><a href="#3-2-3-Ctrl-d" class="headerlink" title="3.2.3 Ctrl+d"></a>3.2.3 Ctrl+d</h3><ul><li>不是发送信号，而是表示一个特殊的二进制值，表示 EOF。</li></ul><h3 id="3-2-4-sudo"><a href="#3-2-4-sudo" class="headerlink" title="3.2.4 sudo"></a>3.2.4 sudo</h3><ul><li>Linux sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</li></ul><h3 id="3-2-5-ifconfig"><a href="#3-2-5-ifconfig" class="headerlink" title="3.2.5 ifconfig"></a>3.2.5 ifconfig</h3><ul><li>eth0，eth1，eth2……代表网卡一，网卡二，网卡三……</li><li>lo代表127.0.0.1，即localhost</li><li>常见操作：<ul><li>将网卡禁用    ifconfig eth0 down</li><li>将网卡启用    ifconfig eth0 up</li></ul></li></ul><h3 id="3-2-6-tar命令解压到指定的目录"><a href="#3-2-6-tar命令解压到指定的目录" class="headerlink" title="3.2.6 tar命令解压到指定的目录"></a>3.2.6 tar命令解压到指定的目录</h3><ul><li>tar -zxvf &#x2F;bbs.tar.zip -C &#x2F;zzz&#x2F;bbs</li></ul><h3 id="3-2-7-查看当前绝对路径"><a href="#3-2-7-查看当前绝对路径" class="headerlink" title="3.2.7 查看当前绝对路径"></a>3.2.7 查看当前绝对路径</h3><ul><li>pwd</li></ul><h3 id="3-2-8-关机"><a href="#3-2-8-关机" class="headerlink" title="3.2.8 关机"></a>3.2.8 关机</h3><ul><li>halt 立即关机</li></ul><h3 id="3-2-9-后台进程管理"><a href="#3-2-9-后台进程管理" class="headerlink" title="3.2.9 后台进程管理"></a>3.2.9 后台进程管理</h3><ul><li>详见博客：<a href="https://blog.csdn.net/u012787436/article/details/39722583">Linux后台进程管理以及ctrl+z（挂起）、ctrl+c（中断）、ctrl+\（退出）和ctrl+d（EOF）的区别</a></li></ul><h1 id="4-系统配置"><a href="#4-系统配置" class="headerlink" title="4 系统配置"></a>4 系统配置</h1><blockquote><p>系统为 CentOS 7 </p></blockquote><h2 id="4-1-关闭linux退格键和vi发出的嘟嘟声"><a href="#4-1-关闭linux退格键和vi发出的嘟嘟声" class="headerlink" title="4.1 关闭linux退格键和vi发出的嘟嘟声"></a>4.1 关闭linux退格键和vi发出的嘟嘟声</h2><ul><li>root用户下输入 “<strong>rmmod pcspkr</strong>“，本次即可消除，但是下次开机仍然有</li><li>root用户输入”<strong>echo “rmmod pcspkr” &gt;&gt;　&#x2F;etc&#x2F;rc.d&#x2F;rc.local</strong>“，可以永久消除</li></ul><h2 id="4-2-VMWare安装CentOS-7并配置网络"><a href="#4-2-VMWare安装CentOS-7并配置网络" class="headerlink" title="4.2 VMWare安装CentOS 7并配置网络"></a>4.2 VMWare安装CentOS 7并配置网络</h2><ul><li>详见博客：<a href="https://blog.csdn.net/zyq_2014/article/details/79692181">win10下VMware安装CentOS7并配置网络</a></li></ul><h2 id="4-3-安装python-3-8"><a href="#4-3-安装python-3-8" class="headerlink" title="4.3 安装python 3.8"></a>4.3 安装python 3.8</h2><ul><li>详见博客：<a href="https://blog.csdn.net/qq_41261251/article/details/105407495">Centos 7 安装python 3.8</a></li></ul><h2 id="4-4-下载ifconfig"><a href="#4-4-下载ifconfig" class="headerlink" title="4.4 下载ifconfig"></a>4.4 下载ifconfig</h2><ul><li>详见博客：<a href="https://blog.csdn.net/ryu2003/article/details/78492127?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.vipsorttest&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.vipsorttest">CentOS7下解决ifconfig command not found的办法</a></li></ul><h2 id="4-5-安装jdk1-8"><a href="#4-5-安装jdk1-8" class="headerlink" title="4.5 安装jdk1.8"></a>4.5 安装jdk1.8</h2><ul><li>详见博客：<a href="https://blog.csdn.net/java_faep/article/details/71252832">在CentOS7中安装JDK1.8并配置环境变量</a></li></ul><h2 id="4-6-下载web"><a href="#4-6-下载web" class="headerlink" title="4.6 下载web"></a>4.6 下载web</h2><ul><li>详见博客：<a href="https://blog.csdn.net/yg970514/article/details/79032880">关于Python第三方模块安装及问题（web）</a></li></ul><h2 id="4-7-CentOS-7改变系统语言"><a href="#4-7-CentOS-7改变系统语言" class="headerlink" title="4.7 CentOS 7改变系统语言"></a>4.7 CentOS 7改变系统语言</h2><ul><li>详见博客：<a href="https://blog.csdn.net/hanchao_h/article/details/72820999">Centos 7改变系统语言</a>  （待测试）</li></ul><h1 id="5-用户管理"><a href="#5-用户管理" class="headerlink" title="5 用户管理"></a>5 用户管理</h1><h2 id="5-1-新增用户，useradd-d-x2F-home-x2F-xxx-m-user-name"><a href="#5-1-新增用户，useradd-d-x2F-home-x2F-xxx-m-user-name" class="headerlink" title="5.1 新增用户，useradd -d &#x2F;home&#x2F;xxx -m user_name"></a>5.1 新增用户，useradd -d &#x2F;home&#x2F;xxx -m user_name</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">useradd -d &#x2F;home&#x2F;cron&#x2F;log -m bbee<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>创建新用户：useradd</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-d 指定目录文件夹-m 新账号名-c comment 指定一段注释性描述。-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。-g 用户组 指定用户所属的用户组。-G 用户组，用户组 指定用户所属的附加组。-s Shell文件 指定用户的登录Shell。-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>设置密码</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">passwd bbee<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿基础_VS Code使用</title>
      <link href="/2021/yuan-ji-chu-vs-code-shi-yong/"/>
      <url>/2021/yuan-ji-chu-vs-code-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件夹与工作空间的区别"><a href="#1-文件夹与工作空间的区别" class="headerlink" title="1 文件夹与工作空间的区别"></a>1 文件夹与工作空间的区别</h1><h2 id="1-1-文件夹"><a href="#1-1-文件夹" class="headerlink" title="1.1 文件夹"></a>1.1 文件夹</h2><ul><li>在VS Code的 <strong>“文件”</strong> 菜单中， <strong>“打开文件夹（Open Folder）”</strong> 是指开打项目文件夹的根目录。一个项目文件夹(Project Folder)包含一个或多个文件夹与项目相关的文件夹，以及与该项目相关的VS Code配置(放在.vscode文件夹中)。</li></ul><h2 id="1-2-工作空间"><a href="#1-2-工作空间" class="headerlink" title="1.2 工作空间"></a>1.2 工作空间</h2><ul><li>在VS Code中，工作空间(workspace)具体指后缀为*.code-workspace的文件，它是一个 <strong>JSON with Comments</strong> 格式的文件，里面包含了所有与该工作空间相关联的文件夹，以及相关的VS Code配置信息，如下图所示。</li></ul><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E4%BF%A1%E6%81%AF%E7%A4%BA%E4%BE%8B.jpg" alt="工作空间信息示例"></p><center>图1-1 工作空间信息示例</center><span id="more"></span><h2 id="1-3-使用场景"><a href="#1-3-使用场景" class="headerlink" title="1.3 使用场景"></a>1.3 使用场景</h2><ul><li>有且仅有需要同时在<strong>多个项目</strong>上工作的时候，才需要创建工作区，这时候，<strong>工作区里面有多个项目文件夹</strong>的根目录(root)，即：Multi-root Workspaces。</li><li>在一个项目上工作，使用文件夹，就够了。针对该项目设置完VS Code后，VS Code会自动在项目文件夹的根目录中创建一个.vscode文件夹存储VS Code配置(settings.json文件)。</li></ul><h2 id="1-4-项目设置"><a href="#1-4-项目设置" class="headerlink" title="1.4 项目设置"></a>1.4 项目设置</h2><ul><li><strong>优先级：用户设置 &lt; 工作空间设置（workspace.code-workspace） &gt; 项目设置(.vscode&#x2F;settings.json文件)</strong></li><li><strong>用户设置即全局设置：</strong>用户自行设定好后，每次打开VSCode即使用的此设定，若某项无设定即使用默认设置。</li><li><strong>工作区设置即工作环境设置：</strong>可对不同的工作环境是用不同的工作环境，若某项无设定，即使用上一层设置。</li><li><strong>文件夹设置即为项目设置：</strong>将一个文件夹当成一个项目，对同一个工作环境下的不同项目，使用不同的设置，若某项无设定，即使用上一层设置。</li></ul><h1 id="2-新建项目（文件夹）"><a href="#2-新建项目（文件夹）" class="headerlink" title="2 新建项目（文件夹）"></a>2 新建项目（文件夹）</h1><ol><li>新建一个空文件夹，并用<strong>VS Code</strong>打开</li><li>按下<strong>“ctrl+shift+P”</strong>打开VS Code命令输入窗口，输入<strong>“task”</strong>，选择<strong>“Confingure Task”</strong>，生成**.vscode**文件夹</li></ol><p><img src="https://github.com/CCSemicircle/img/blob/main/images/%E9%80%89%E6%8B%A9Configure_Task.jpg" alt="选择Confingure Task"></p><center>图2-1 选择Confingure Task</center><ol start="3"><li>打开**.vscode&#x2F;tasks.json**，修改以下信息（以python环境为例）</li></ol><p><img src="http://img.fdchen.host/tasks%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF.png" alt="tasks文件信息"></p><center>图2-2 tasks文件信息</center><ol start="4"><li><strong>新建项目完成</strong>，如果需要设置本项目的项目设置，需要在**.vscode&#x2F;settings.json**文件中配置</li></ol><p><img src="http://img.fdchen.host/settings%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF.png" alt="settings文件信息"></p><center>图2-3 settings文件信息</center><h1 id="3-新建工作区"><a href="#3-新建工作区" class="headerlink" title="3 新建工作区"></a>3 新建工作区</h1><ol><li>选择<strong>”文件 –&gt; 将工作区另存为“</strong></li></ol><p><img src="http://img.fdchen.host/%E5%B0%86%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%8F%A6%E5%AD%98%E5%88%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="将工作区另存到文件夹"></p><center>图3-1 将工作区另存到文件夹</center><p><strong>Tip：如果在打开的文件夹的情况下保存工作区，会自动将此文件夹放入工作区，也建议这样使用。</strong></p><ol start="2"><li><p><strong>新建工作空间成功</strong>，可在workspace.code-workspace文件中配置工作空间信息</p><p><img src="http://img.fdchen.host/%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE.png" alt="工作空间配置"></p></li></ol><center>图3-2 工作空间配置</center><ol start="3"><li><strong>工作空间配置信息解释</strong></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"."</span> 为当前工作区文件所在的文件夹。<span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../MLProjects"</span> 为自行添加的（项目）文件夹路径。<span class="token property">"python.pythonPath"</span><span class="token operator">:</span> <span class="token string">"C:\\Users\\fdChen\\AppData\\Local\\Programs\\Python\\Python39\\python.exe"</span> 此为python路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>如何在不同的工作区启用&#x2F;禁用不同的插件</strong></li></ol><p>（1）找到当前插件，若是Java或Python等插件集合建议打开其扩展包。有两个选项：</p><ul><li>第一个选项“禁用”为你的用户设置</li><li>第二个选项“禁用（工作区）”为工作区设置</li></ul><p>（2）选择<strong>“禁用（工作区）”</strong></p><p>（3）此设置会只应用到当前工作区下，不会影响用户设置和其他工作区的设置，通过这种方式，将使得安装太多插件下VSCode也不会显得很臃肿，占用内存也会相应地减小，保持一个轻量的VS Code。</p><h1 id="附：常用快捷指令列表"><a href="#附：常用快捷指令列表" class="headerlink" title="附：常用快捷指令列表"></a>附：常用快捷指令列表</h1><h2 id="1-格式化代码：alt-shift-F"><a href="#1-格式化代码：alt-shift-F" class="headerlink" title="1. 格式化代码：alt+shift+F"></a>1. 格式化代码：alt+shift+F</h2><h2 id="2-打开命令行：ctrl-shift-P"><a href="#2-打开命令行：ctrl-shift-P" class="headerlink" title="2. 打开命令行：ctrl+shift+P"></a>2. 打开命令行：ctrl+shift+P</h2>]]></content>
      
      
      <categories>
          
          <category> 猿基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> 常见用法 </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能导论</title>
      <link href="/2021/cqu-ren-gong-zhi-neng-dao-lun/"/>
      <url>/2021/cqu-ren-gong-zhi-neng-dao-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h1><h2 id="1-1-人工智能的起源与发展"><a href="#1-1-人工智能的起源与发展" class="headerlink" title="1.1 人工智能的起源与发展"></a>1.1 人工智能的起源与发展</h2><h3 id="1-1-1-孕育期"><a href="#1-1-1-孕育期" class="headerlink" title="1.1.1 孕育期"></a>1.1.1 孕育期</h3><ul><li><p>数理逻辑-符号主义学派</p><ul><li>亚里士多德-三段论</li><li>莱布尼茨-形式逻辑符号化</li><li>启发式算法➡专家系统➡知识工程理论与技术</li></ul></li><li><p>人工神经网络-连接主义学派</p><ul><li>麦克洛奇和皮兹-第一个神经网络模型MP模型</li><li>赫布-改变神经网络连接强度的Hebb规则</li></ul></li><li><p>行为主义学派</p><ul><li>维纳-控制论，其影响导致形成了行为主义学派</li></ul></li><li><p>人工智能的载体</p><ul><li>计算机-1946年，第一台通用计算机ENIAC</li></ul></li><li><p>人工智能之父</p><ul><li><p>图灵</p></li><li><p>图灵试验</p></li></ul></li><li><p>AI的诞生</p><ul><li>1956年的一次会议，麦卡锡提议正式采用了Artificial Intelligence这一术语</li></ul></li></ul><span id="more"></span><h3 id="1-1-2-形成期"><a href="#1-1-2-形成期" class="headerlink" title="1.1.2 形成期"></a>1.1.2 形成期</h3><h3 id="1-1-3-第一次低谷"><a href="#1-1-3-第一次低谷" class="headerlink" title="1.1.3 第一次低谷"></a>1.1.3 第一次低谷</h3><h3 id="1-1-4-黄金时代"><a href="#1-1-4-黄金时代" class="headerlink" title="1.1.4 黄金时代"></a>1.1.4 黄金时代</h3><h3 id="1-1-5-第二次低谷"><a href="#1-1-5-第二次低谷" class="headerlink" title="1.1.5 第二次低谷"></a>1.1.5 第二次低谷</h3><h3 id="1-1-6-平稳发展期"><a href="#1-1-6-平稳发展期" class="headerlink" title="1.1.6 平稳发展期"></a>1.1.6 平稳发展期</h3><h3 id="1-1-7-蓬勃发展期"><a href="#1-1-7-蓬勃发展期" class="headerlink" title="1.1.7 蓬勃发展期"></a>1.1.7 蓬勃发展期</h3><ul><li><p>发展现状</p><ul><li>专用人工智能-让人工智能专门去做一件事</li></ul></li></ul><h2 id="1-2-人工智能的三大学派"><a href="#1-2-人工智能的三大学派" class="headerlink" title="1.2 人工智能的三大学派"></a>1.2 人工智能的三大学派</h2><h3 id="1-2-1-图灵测试"><a href="#1-2-1-图灵测试" class="headerlink" title="1.2.1 图灵测试"></a>1.2.1 图灵测试</h3><ul><li>通过让机器模仿人回答某些问题</li><li>判断它是否具备智能<ul><li>核心：不是“计算机能否和人对话”，而是“计算机能否在智力行为上表现得和人无法区分”</li><li>Turing测试第一次给出了检验计算机是否具有智能的哲学说法</li></ul></li></ul><h3 id="1-2-2-符号主义Symbolicism"><a href="#1-2-2-符号主义Symbolicism" class="headerlink" title="1.2.2 符号主义Symbolicism"></a>1.2.2 符号主义Symbolicism</h3><ul><li>逻辑主义、心理学派和计算机派</li><li>其原理主要为物理符号系统（即符号操作系统）假设和有限合理性原理</li><li>人是一个物理符号系统，计算机也是一个物理符号系统，因此，能够用计算机来模拟人的智能行为</li><li>基于逻辑推理的智能模拟方法，源于数学逻辑</li><li>主要成果：机器定理程序（LT、GTM、GPS….）、启发式算法、专家系统</li><li>可以解决逻辑思维,但对于形象思维难于模拟，信息表示成符号后，并在处理或转换时,信息有丢失的情况</li></ul><h3 id="1-2-3-连接主义Connectionism"><a href="#1-2-3-连接主义Connectionism" class="headerlink" title="1.2.3 连接主义Connectionism"></a>1.2.3 连接主义Connectionism</h3><ul><li>又称为仿生学派或生理学派</li><li>其原理主要为神经网络及神经网络间的连接机制与学习算法</li><li>核心思想：认为人的智能归结为人脑的高层活动的结果，强调智能活动是由大量简单的单元通过复杂链接后，并行运行的结果。</li><li>代表成果：人工神经网络，深度神经网络</li><li>不适合于解决逻辑思维，体现结构固定和组成方案， 单一的系统也不适合多种知识的开发</li></ul><h3 id="1-2-4-行为主义Actionism"><a href="#1-2-4-行为主义Actionism" class="headerlink" title="1.2.4  行为主义Actionism"></a>1.2.4  行为主义Actionism</h3><ul><li><p>又称进化主义和控制论学派</p></li><li><p>其原理为控制论及感知——动作型控制系统</p></li><li><p>控制学论</p><ul><li>认为智能取决于感知和行为，取决于对外界复杂环境的适应，而不是表示和推理</li></ul></li><li><p>进化学论</p><ul><li>认为人的智能归根结底是从生物进化中得到</li></ul></li></ul><h3 id="1-2-5-人工智能三种主流方法区别"><a href="#1-2-5-人工智能三种主流方法区别" class="headerlink" title="1.2.5 人工智能三种主流方法区别"></a>1.2.5 人工智能三种主流方法区别</h3><ul><li><p>用规则教</p><ul><li>优势：与人类逻辑推理相似，解释性强</li><li>不足：难以构建完备的知识规则库</li></ul></li><li><p>用数据学</p><ul><li>优势：直接从数据中学</li><li>不足：依赖于数据、解释性不强</li></ul></li><li><p>用问题引导</p><ul><li>优势：从经验中进行能力的持续学习</li><li>不足：非穷举式搜索而需更好策略</li></ul></li></ul><h1 id="2-知识表示"><a href="#2-知识表示" class="headerlink" title="2 知识表示"></a>2 知识表示</h1><h2 id="2-1-知识层次"><a href="#2-1-知识层次" class="headerlink" title="2.1  知识层次"></a>2.1  知识层次</h2><ul><li><p>数据</p><ul><li>一些无关联的事实</li></ul></li><li><p>信息</p><ul><li>建立了事实间的联系后形成的信息</li></ul></li><li><p>知识</p><ul><li>当能建立模式之间的联系后便涌现出了知识</li></ul></li><li><p>智慧</p><ul><li>能描述模式之间关系的规律</li></ul></li></ul><h2 id="2-2-知识表示的过程"><a href="#2-2-知识表示的过程" class="headerlink" title="2.2  知识表示的过程"></a>2.2  知识表示的过程</h2><ul><li>非形式化的自然语言描述➡形式化的易于被计算机理解的表示</li></ul><h2 id="2-3-知识的特性"><a href="#2-3-知识的特性" class="headerlink" title="2.3  知识的特性"></a>2.3  知识的特性</h2><ul><li>相对正确性</li><li>不确定性</li><li>可表示性和可利用性</li></ul><h2 id="2-4-知识的表示"><a href="#2-4-知识的表示" class="headerlink" title="2.4  知识的表示"></a>2.4  知识的表示</h2><ul><li>将人类知识形式化或者模型化</li></ul><h3 id="2-4-1-目的"><a href="#2-4-1-目的" class="headerlink" title="2.4.1 目的"></a>2.4.1 目的</h3><ul><li>让机器存储和运用人类的知识</li></ul><h3 id="2-4-2-选择知识表示方法的原则"><a href="#2-4-2-选择知识表示方法的原则" class="headerlink" title="2.4.2 选择知识表示方法的原则"></a>2.4.2 选择知识表示方法的原则</h3><ul><li>充分表示领域知识</li><li>有利于对知识的利用</li><li>便于对知识的组织、维护与管理</li><li>便于理解和实现</li></ul><h3 id="2-4-3-几种知识表示的方法"><a href="#2-4-3-几种知识表示的方法" class="headerlink" title="2.4.3 几种知识表示的方法"></a>2.4.3 几种知识表示的方法</h3><ul><li><p>符号主义</p><ul><li><p>谓词逻辑</p><ul><li><p>逻辑学之父：亚里士多德-三段论</p></li><li><p>命题逻辑：研究命题和命题之间关系的符号逻辑系统</p><ul><li><p>命题：一个非真即假的陈述句</p></li><li><p>联接词：诸如“没有”、“如果…那么…”等连词</p><ul><li><p>与，命题合取，p且q</p></li><li><p>或，命题析取，p或q</p></li><li><p>非，命题否定，非p</p></li><li><p>条件，命题蕴含，如果p则q</p><ul><li>仅p为true且q为false时，结果为false</li></ul></li><li><p>双向条件，命题双向蕴含，p当且仅当q</p><ul><li>p和q同为true或同为false时，结果为true</li></ul></li></ul></li></ul></li><li><p>复合命题：由联结词和命题连接而成的更加复杂的命题称为复合命题</p><ul><li>逻辑等价的例子</li></ul></li></ul></li></ul><p><img src="http://img.fdchen.host/AIClass/%E9%80%BB%E8%BE%91%E7%AD%89%E4%BB%B7%E7%9A%84%E4%BE%8B%E5%AD%90.png" alt="逻辑等价的例子"></p></li><li><p>谓词逻辑</p><ul><li><p>用于刻画个体的性质、状态和个体之间关系的语言成分就是谓词</p><ul><li><p>分类</p></li><li><p>一元谓词A(x)</p><ul><li><p>二元谓词B(x,y)</p></li><li><p>多元谓词P(x1,x2,x3,…,xn)</p></li><li><p>x1,x2,x3,…,xn为客体变量或变元</p></li></ul></li></ul></li><li><p>语法元素</p><ul><li><p>常量（个体符号）</p><ul><li><p>变量符号</p></li><li><p>函数符号</p></li><li><p>习惯上用小写英文字母或小写英文字母串表示</p></li></ul></li><li><p>谓词符号</p><ul><li>习惯上用大写英文字母或者首字母大写的英文字母串表示</li></ul></li><li><p>联结词</p></li></ul></li><li><p>量词</p><ul><li>全称量词<ul><li><p>存在量词</p></li><li><p>全程量词与存在量词的组合</p></li><li><p>∀𝑥¬𝑃(𝑥) ≡ ¬∃𝑥𝑃(𝑥)<br>    - ¬∀𝑥𝑃(𝑥) ≡ ∃𝑥¬𝑃(𝑥)<br>      - ∀𝑥𝑃(𝑥) ≡¬∃𝑥¬𝑃(𝑥)<br>      - ∃𝑥𝑃(𝑥) ≡ ¬∀𝑥¬𝑃(𝑥)</p></li></ul></li></ul></li><li><p>函数与谓词的区别</p><ul><li>函数时从定义域到值域的映射，结果仍为个体<ul><li>谓词时从定义域到{True, False}的映射，结果为命题</li></ul></li></ul></li><li><p>推理规则</p><ul><li><p>全称量词消去UI</p><ul><li>(∀𝑥)𝐴(𝑥) → 𝐴(𝑦)</li></ul></li><li><p>全称量词引入UG</p><ul><li>𝐴(𝑦) → (∀𝑥)𝐴(𝑥)</li></ul></li><li><p>存在量词消去EI</p><ul><li>(∃𝑥)𝐴(𝑥) → 𝐴(𝑐)</li></ul></li><li><p>存在量词引入EG</p><ul><li>𝐴(c) → (∃𝑥)𝐴(𝑥)</li></ul></li></ul></li><li><p>优点</p><ul><li>自然性<ul><li>精确性</li><li>容易实现</li></ul></li></ul></li><li><p>不足</p><ul><li>不能表示不确定性知识<ul><li>形式过于自由，兼容性差</li></ul></li></ul></li></ul></li><li><p>产生式系统</p><ul><li><p>通常用于表示事实、规则以及它们的不确定性度量，适合于表示事实性知识和规则性知识</p></li><li><p>确定性规则知识的产生式表示</p><ul><li>IF P THEN Q 或者 P➡Q<ul><li><p>三元组表示：（对象，属性，值）或者（关系，对象1，对象2）</p><ul><li>（Li，age，40） <ul><li>（friend，Li，Wang）</li></ul></li></ul></li></ul></li></ul></li><li><p>不确定规则知识的产生式表示</p><ul><li>IF P THEN Q（置信度） 或者 P➡Q（置信度）<ul><li><p>四元组表示：（对象，属性，值，置信度）或者 （关系，对象1，对象2，置信度）</p><ul><li>（Li，age，40, 0.8） <ul><li>（friend，Li，Wang, 0.1）</li></ul></li></ul></li></ul></li></ul></li><li><p>产生式和谓词逻辑中的蕴含式的区别</p><ul><li>产生式与谓词逻辑中的蕴涵式的基本形式相同，但蕴涵式只是产生式的一种特殊情况。<ul><li>除逻辑蕴含外，产生式还包括各种操作、规则、变换、算子、函数等。 </li><li>蕴含式只能表示精确知识，而产生式不仅可以表示精确的知识，还可以表示不精确知识。</li></ul></li></ul></li><li><p>基本结构</p><p><img src="http://img.fdchen.host/AIClass/%E4%BA%A7%E7%94%9F%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="产生式系统基本结构"></p><ul><li>规则库<ul><li><p>综合数据库</p></li><li><p>控制系统（推理机）</p><ul><li>推理<ul><li>冲突消解</li><li>执行规则</li><li>检查推理终止条件</li><li>长颈鹿的例子</li></ul></li></ul></li></ul></li></ul></li></ul><p><img src="http://img.fdchen.host/AIClass/%E9%95%BF%E9%A2%88%E9%B9%BF%E7%9A%84%E4%BE%8B%E5%AD%90.png" alt="长颈鹿的例子"></p><ul><li><p>优点</p><ul><li>自然性<ul><li>模块性</li><li>有效性</li><li>清晰性</li></ul></li></ul></li><li><p>缺点</p><ul><li>效率不高<ul><li>不能表达结构性知识</li></ul></li></ul></li><li><p>专家系统</p><ul><li>专家系统可以模拟某个领域专家的决策能力。</li></ul></li></ul></li><li><p>框架系统</p><ul><li><p>一种结构化的知识表示方法，已在多种系统中得到应用。</p><ul><li><p>一般结构</p><ul><li>框架<ul><li>一个槽用于描述所论对象某一方面的属性</li><li>一个侧面用于描述相应属性的一个方面</li><li>槽和侧面所具有的属性值分别被称为槽值和侧面值</li><li>计算机主机的框架描述示例</li></ul></li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%BB%E6%9C%BA%E7%9A%84%E6%A1%86%E6%9E%B6%E6%8F%8F%E8%BF%B0%E7%A4%BA%E4%BE%8B.png" alt="计算机主机的框架描述示例"></p></li></ul></li><li><p>典型的框架知识库FrameNet</p></li><li><p>特点</p><ul><li>结构性</li><li>继承性</li><li>自然性</li></ul></li></ul></li><li><p>经验主义</p><ul><li><p>状态表示（状态空间表示法）</p><ul><li><p>用来表示问题及其搜索过程的一种方法，它是以状态和算符(操作)为基础来表示和求解问题的</p></li><li><p>主要元素</p><ul><li><p>状态</p><ul><li>状态变量</li></ul></li><li><p>操作</p></li><li><p>状态空间</p><ul><li>状态空间用一个三元组表示：（S, F, G）</li><li>状态空间图</li></ul></li></ul></li><li><p>二阶梵塔难题求解过程</p></li><li><p>猴子与香蕉问题求解过程</p></li><li><p>传教士问题求解过程</p></li></ul></li><li><p>特征表示</p></li></ul></li><li><p>连接主义</p><ul><li>网络权重</li><li>语义向量</li></ul></li></ul><h1 id="3-搜索求解策略"><a href="#3-搜索求解策略" class="headerlink" title="3 搜索求解策略"></a>3 搜索求解策略</h1><h2 id="3-1-内容"><a href="#3-1-内容" class="headerlink" title="3.1 内容"></a>3.1 内容</h2><ul><li>早期搜索技术，如图搜索、盲目搜索、启发式搜索</li><li>高级搜索技术，如规则演绎系统、产生式系统</li><li>给定待求解问题→搜索算法按事先设定的逻辑自动寻找答案</li></ul><h2 id="3-2-概念"><a href="#3-2-概念" class="headerlink" title="3.2 概念"></a>3.2 概念</h2><ul><li>根据问题的实际情况不断寻找可利用的知识，构造出一条代价较少的推理路线，使问题得到圆满解决的过程。</li></ul><h2 id="3-3-标准"><a href="#3-3-标准" class="headerlink" title="3.3 标准"></a>3.3 标准</h2><ul><li>搜索空间小</li><li>解最佳</li></ul><h2 id="3-4-图搜索策略"><a href="#3-4-图搜索策略" class="headerlink" title="3.4 图搜索策略"></a>3.4 图搜索策略</h2><h3 id="3-4-1-基本概念"><a href="#3-4-1-基本概念" class="headerlink" title="3.4.1 基本概念"></a>3.4.1 基本概念</h3><ul><li><p>图的搜索</p><ul><li>一种在图中寻找路径的方法，图中每个节点对应一个状态，每条连线对应一个操作符</li></ul></li><li><p>分类</p><ul><li>无信息搜索（盲目搜索）</li><li>有信息搜索（启发式搜索）</li></ul></li></ul><h3 id="3-4-2-状态图搜索"><a href="#3-4-2-状态图搜索" class="headerlink" title="3.4.2 状态图搜索"></a>3.4.2 状态图搜索</h3><ul><li><p>记录搜索轨迹</p><ul><li>OPEN表（存放待扩展的节点表）</li><li>CLOSED表（存放已扩展的节点）</li><li>从目标返回的路径</li><li>注：每个表示状态的节点结构中必须有指向父节点的指针</li></ul></li><li><p>图的一般搜索策略</p><p>  <img src="http://img.fdchen.host/AIClass/%E5%9B%BE%E7%9A%84%E4%B8%80%E8%88%AC%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5.png" alt="图的一般搜索策略"></p><ul><li>状态图搜索-例题一</li></ul></li></ul><p><img src="http://img.fdchen.host/AIClass/%E7%8A%B6%E6%80%81%E5%9B%BE%E6%90%9C%E7%B4%A2-%E4%BE%8B%E9%A2%98%E4%B8%80.png" alt="状态图搜索-例题一"></p><h3 id="3-4-3-盲目式搜索"><a href="#3-4-3-盲目式搜索" class="headerlink" title="3.4.3 盲目式搜索"></a>3.4.3 盲目式搜索</h3><h4 id="3-4-3-1-概念"><a href="#3-4-3-1-概念" class="headerlink" title="3.4.3.1  概念"></a>3.4.3.1  概念</h4><ul><li>对特定问题不具有任何相关信息的条件下，按照固定的步骤（依次或者随机）进行搜索，搜索过程中获得的中间信息不用来改进控制策略。</li></ul><h4 id="3-4-3-2-宽度优先搜索"><a href="#3-4-3-2-宽度优先搜索" class="headerlink" title="3.4.3.2  宽度优先搜索"></a>3.4.3.2  宽度优先搜索</h4><ul><li>OPEN表采用先进先出的队列结构，先生成的节点先扩展</li><li>宽度优先搜索策略</li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5.png" alt="宽度优先搜索策略"></p><ul><li>宽度优先搜索示例</li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%A4%BA%E4%BE%8B.png" alt="宽度优先搜索示例"></p><ul><li>八数码难题-BFS</li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98-BFS.png" alt="八数码难题-BFS"></p><ul><li><p>特点</p><ul><li>新扩展的节点排在open表的末端</li><li>当问题有解时，一定能找到解</li><li>方法与问题无关，具有通用性</li></ul></li></ul><h4 id="3-4-3-3-深度优先搜索"><a href="#3-4-3-3-深度优先搜索" class="headerlink" title="3.4.3.3  深度优先搜索"></a>3.4.3.3  深度优先搜索</h4><ul><li>OPEN表采用先进后出的堆栈结构，先扩展最新产生的（即最深的）节点</li><li>深度优先搜索策略</li></ul><p><img src="http://img.fdchen.host/AIClass/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5.png" alt="深度优先搜索策略"></p><ul><li>深度优先搜索示例</li></ul><p><img src="http://img.fdchen.host/AIClass/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%A4%BA%E4%BE%8B.png" alt="深度优先搜索示例"></p><ul><li><p>深度界限</p><ul><li>防止搜索过程沿着无益的路径扩展下去，往往给出一个节点扩展的最大深度——深度界限</li></ul></li><li><p>节点深度</p><ul><li>起始节点的深度为0，任何其他节点的深度等于其父辈节点的深度加1。</li></ul></li><li><p>八数码难题-DFS</p></li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98-DFS.png" alt="八数码难题-DFS"></p><ul><li><p>特点</p><ul><li>一般不能保证找到最优解</li><li>当深度限制不合理时，可能找不到解，可以将算法改为可变深度限制</li><li>最坏情况时，搜索空间等同于穷举</li></ul></li></ul><h4 id="3-4-3-4-等代价搜索"><a href="#3-4-3-4-等代价搜索" class="headerlink" title="3.4.3.4  等代价搜索"></a>3.4.3.4  等代价搜索</h4><ul><li><p>Dijkstra提出——Dijkstra算法</p></li><li><p>是宽度优先搜索的一种推广，不是沿着等长度路径断层进行扩展，而是沿着等代价路径断层进行扩展。状态图中每条连接弧线上的有关代价，表示时间、距离等开销。</p></li><li><p>节点代价</p><ul><li>g (n)： 表示从初始节点 S。到节点n的代价；</li><li>c (n1, n2) : 表示从父节点 n1 到其子节点 n2 的代价；</li><li>g (n2) &#x3D; g (n1) + c ( n1 ,n2)</li></ul></li><li><p>等代价搜索策略</p></li></ul><p><img src="http://img.fdchen.host/AIClass/%E7%AD%89%E4%BB%A3%E4%BB%B7%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5.png" alt="等代价搜索策略"></p><ul><li>等代价搜索示例</li></ul><p><img src="http://img.fdchen.host/AIClass/%E7%AD%89%E4%BB%A3%E4%BB%B7%E6%90%9C%E7%B4%A2%E7%A4%BA%E4%BE%8B.png" alt="等代价搜索示例"></p><h4 id="3-4-3-5-盲目式搜索特点"><a href="#3-4-3-5-盲目式搜索特点" class="headerlink" title="3.4.3.5  盲目式搜索特点"></a>3.4.3.5  盲目式搜索特点</h4><ul><li>搜索过程中不使用与问题有关的经验信息</li><li>搜索效率低</li><li>不适合大空间的实际问题求解</li></ul><h3 id="3-4-4-启发式搜索"><a href="#3-4-4-启发式搜索" class="headerlink" title="3.4.4  启发式搜索"></a>3.4.4  启发式搜索</h3><ul><li>启发性信息是指那种与具体问题求解过程有关的，并可指导搜索过程朝着最有希望方向前进的控制信息。</li></ul><h4 id="3-4-4-1-核心思想"><a href="#3-4-4-1-核心思想" class="headerlink" title="3.4.4.1 核心思想"></a>3.4.4.1 核心思想</h4><ul><li>需定义一个评价函数，对当前的搜索状态进行评估， 找出一个最有希望的节点来扩展。即根据评价函数重排OPEN表， 选择最有希望的节点加以扩展。</li><li>估价函数：f(n) &#x3D; g(n) + h(n)，g(n)表示从起始状态到当前状态n的实际代价，h(n)表示从当前状态到目标状态的估计代价（启发式函数）</li></ul><h4 id="3-4-4-2-A算法"><a href="#3-4-4-2-A算法" class="headerlink" title="3.4.4.2 A算法"></a>3.4.4.2 A算法</h4><ul><li>有序搜索，也称优先搜索&#x2F;全局择优， 选择OPEN表上具有最小 f 值的节点作为下一个要扩展的节点。</li><li>有序搜索算法框图</li></ul><p><img src="http://img.fdchen.host/AIClass/%E6%9C%89%E5%BA%8F%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E6%A1%86%E5%9B%BE.png" alt="有序搜索算法框图"></p><ul><li>A算法求解八数码问题过程</li></ul><p><img src="http://img.fdchen.host/AIClass/A%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98%E8%BF%87%E7%A8%8B.png" alt="A算法求解八数码问题过程"></p><ul><li><p>特征</p><ul><li>对h(n)无限制，虽提高了算法效率，但不能保证找到最优解</li><li>不合适的h(n)定义会导致算法找到不解</li></ul></li></ul><h4 id="3-4-4-3-A-算法"><a href="#3-4-4-3-A-算法" class="headerlink" title="3.4.4.3  A*算法"></a>3.4.4.3  A*算法</h4><ul><li><p>彼得.哈特对A算法进行了很小的修改，并证明了当估价函数满足一定的限制条件时，算法一定可以找到最优解。</p></li><li><p>隶属于A算法，估价函数满足一定限制条件的算法称为A*算法</p></li><li><p>f (n) &#x3D; g (n) + h (n), g(n)大于0，h(n)不大于n到目标节点的实际代价</p><ul><li>g (n) &gt;&#x3D;g* (n)，g*(n)是从初始节点S0到任意节点n的一条最佳路径的代价</li><li>h (n) &lt;&#x3D;h* (n)，h*(n)是从节点n到目标节点的一条最佳路径的代价</li><li>f(n)可视为经过节点n，具有最小开销代价值的路径。</li></ul></li><li><p>根据h(n)区分几种算法</p><ul><li>如果第8步的重排OPEN表是依据f(n)&#x3D;g(n)+h(n) 进行的,则称该过程为A算法</li><li>在A算法中,如果对所有的n存在h(n)≤h*(n) ,则称h(n)为h*(n)的下界,它表示某种偏于保守的估计，采用h*(n)的下界h(n)为启发函数的A算法，称为A*算法。</li><li>h(n)&#x3D;0 时，A*算法就变为等代价搜索算法</li></ul></li><li><p>A*算法流程图</p></li></ul><p><img src="http://img.fdchen.host/AIClass/A%2B%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="A*算法流程图"></p><ul><li>A*算法求解八数码问题</li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%88%A9%E7%94%A8A%2B%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98-1.png" alt="利用A\*算法求解八数码问题-1"></p><p><img src="http://img.fdchen.host/AIClass/%E5%88%A9%E7%94%A8A%2B%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98-2.png" alt="利用A\*算法求解八数码问题-2"></p><p><img src="http://img.fdchen.host/AIClass/%E5%88%A9%E7%94%A8A%2B%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98-2.png" alt="利用A\*算法求解八数码问题-3"></p><ul><li><p>A*算法的搜索效率很大程度上取决于h(n), 在满足h(n)&lt;&#x3D;h*(n)的前提下，h(n)的值越大越好,h(n)的比重越大表示启发性越强。</p></li><li><p>如果算法有解， A*算法一定能够找到最优的解答。</p></li><li><p>特点</p><ul><li>在f(n)中，g(n)的比重越大，越倾向于宽度优先搜索，而h(n)的比重越大，表示启发性越强。</li><li>g(n)的作用一般是不可忽略的，保持g(n)项就保持了搜索的宽度优先成分，这有利于搜索的完备性，但会影响搜索的效率。</li></ul></li></ul><h1 id="4-智能计算及其应用"><a href="#4-智能计算及其应用" class="headerlink" title="4 智能计算及其应用"></a>4 智能计算及其应用</h1><h2 id="4-1-遗传算法"><a href="#4-1-遗传算法" class="headerlink" title="4.1  遗传算法"></a>4.1  遗传算法</h2><h3 id="4-1-1-定义"><a href="#4-1-1-定义" class="headerlink" title="4.1.1 定义"></a>4.1.1 定义</h3><ul><li>通过生物遗传和进化过程中选择、交叉、变异机理的模仿，完成对问题求解的自适应搜索过程。</li></ul><h3 id="4-1-2-与生物进化对比"><a href="#4-1-2-与生物进化对比" class="headerlink" title="4.1.2 与生物进化对比"></a>4.1.2 与生物进化对比</h3><p><img src="http://img.fdchen.host/AIClass/%E4%B8%8E%E7%94%9F%E7%89%A9%E8%BF%9B%E5%8C%96%E5%AF%B9%E6%AF%94.png" alt="与生物进化对比"></p><h3 id="4-1-3-基本思想"><a href="#4-1-3-基本思想" class="headerlink" title="4.1.3 基本思想"></a>4.1.3 基本思想</h3><ul><li>把问题的解表示成“染色体”，在算法中即是以一定方式编码的串，在执行遗传算法之前，给定一群“染色体”——即假设解。</li><li>把这些假设解置于问题的“环境”中，并按适者生存的原则：从中选择出较适应环境的“染色体”进行复制，再通过交叉、变异过程产生更适合环境的新一代“染色体”群。</li><li>这样一代一代地进化，最后就会收敛到最适应环境的一个“染色体”上——它就是问题的最优解</li><li>5个基本要素<ul><li>参数编码</li><li>初始群体设定</li><li>适应度函数设定</li><li>遗传操作设计</li><li>控制参数设定</li></ul></li></ul><h3 id="4-1-4-主要操作"><a href="#4-1-4-主要操作" class="headerlink" title="4.1.4 主要操作"></a>4.1.4 主要操作</h3><ul><li><p>编码</p><ul><li>将问题结构变换为位串形式编码表示的过程叫编码(Encoding) </li><li>将位串形式编码表示变换为原问题结构的过程叫解码或译码(Decoding)</li><li>GA中的编码方式：二进制编码、浮点数编码、格雷码编码、符号编码等</li></ul></li><li><p>群体设定</p><ul><li><p>初始种群的产生</p><ul><li>根据问题固有知识，把握最优解所占空间在整个问题空间中的分布范围，然后，在此分布范围内设定初始群体。</li><li>随机产生一定数目的个体，从中挑选最好的个体加到初始群体中。这种过程不断迭代，直到初始群体中个体数目达到了预先确定的规模。</li></ul></li><li><p>种群规模的确定</p><ul><li>规模太小：遗传算法的优化性能不太好，易陷入局部最优解</li><li>规模太大：计算复杂</li></ul></li></ul></li><li><p>适应度函数</p><ul><li><p>表示个体的优劣并作为遗传操作的依据</p><ul><li>个体适应度高：被选择的概率大；反之就小</li></ul></li><li><p>直接将待求解优化问题的目标函数变换而得到</p><ul><li>最大化问题直接为目标函数，最小化问题则为目标函数的倒数</li></ul></li><li><p>在遗传算法中，将所有妨碍适应度值高的个体产生、从而影响算法正常工作的问题统称为欺骗问题（Deceptive Problem）</p><ul><li><p>过早收敛：缩小这些个体的适应度，以降低这些超级个体的竞争力</p></li><li><p>停滞现象：改变原始适应值的比例关系，以提高个体之间的竞争力</p></li><li><p>适应度函数的尺度变换（Fitness Scaling）或者定标：对适应度函数值域的某种映射变换</p><ul><li><p>线性变换</p><ul><li>变换的时候希望满足变换前后它的平均值或者什么保持不变，所以可以加上约束，也可以不加</li></ul></li><li><p>幂函数变换</p></li><li><p>指数变换</p></li></ul></li></ul></li></ul></li><li><p>选择</p><ul><li><p>个体选择概率分配方法</p><ul><li><p>适应度比例方法&#x2F;蒙特卡洛法</p></li><li><p>排序方法</p><ul><li>线性排序</li><li>非线性排序</li></ul></li></ul></li><li><p>选择个体的方法</p><ul><li>轮盘赌选择：适应度➡选择概率➡累积概率，若r&lt;q[1]，选择个体1，否则选择个体k，满足q[k-1]&lt;r≤q[k]。</li><li>最佳个体保存方法<ul><li>把群体中适应度最高的个体直接复制到下一代中，保证遗传算法终止时得到的最后结果一定是历代出现过的最高适应度的个体。</li></ul></li><li>锦标赛选择</li><li>从群体中随机选择一些个体，将其中适应度最高的个体保存到下一代。这一过程反复执行，直到保存到下一代的个体数达到预先设定的数量为止。<ul><li>二元锦标赛：每个选择的个体数为2。</li></ul></li></ul></li></ul></li><li><p>交叉</p><ul><li>一点交叉：在个体串中随机设定一个交叉点，实行交叉时，两个个体的该点前或后的部分结构进行互换，并生成两个新的个体。</li><li>二点交叉：随机设置两个交叉点，将两个交叉点之间的码串相互交换。</li></ul></li><li><p>变异</p><ul><li><p>交叉只能对现有基因池进行重组，变异可以生成新的基因</p></li><li><p>变异概率pm ：控制算法中变异操作的使用频率，变异算法的变异率应该控制在较低的频率</p></li><li><p>方式</p><ul><li><p>位点变异</p><ul><li>群体中的个体码串，随机挑选一个或多个基因座，并对这些基因座的基因值以变异概率作变动</li><li>如果对于某个基因位，产生的随机数小于pm,则改变该基因的取值。否则该基因不发生变异，保持不变。</li></ul></li><li><p>逆转变异</p><ul><li>在个体码串中随机选择两点（逆转点），然后将两点之间的基因值以逆向排序插入到原位置中</li></ul></li><li><p>插入变异</p><ul><li>在个体码串中随机选择一个码，然后将此码插入随机选择的插入点中间</li></ul></li><li><p>互换变异</p><ul><li>随机选取染色体的两个基因进行简单互换</li></ul></li><li><p>移动变异</p><ul><li>随机选取一个基因，向左或者向右移动一个随机位数</li></ul></li></ul></li></ul></li></ul><h3 id="4-1-5-一般步骤"><a href="#4-1-5-一般步骤" class="headerlink" title="4.1.5 一般步骤"></a>4.1.5 一般步骤</h3><p><img src="http://img.fdchen.host/AIClass/%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4.png" alt="一般步骤"></p><h3 id="4-1-6-遗传算法与搜索技术的比较"><a href="#4-1-6-遗传算法与搜索技术的比较" class="headerlink" title="4.1.6 遗传算法与搜索技术的比较"></a>4.1.6 遗传算法与搜索技术的比较</h3><ul><li><p>从形式上：遗传算法与状态空间搜索法非常类似</p><ul><li>状态表示为向量 &#x3D; 状态表示为个体</li><li>状态转移 &#x3D; 个体繁殖</li></ul></li><li><p>在应用中，两种方法略有差别</p><ul><li>状态空间搜索适合于问题清晰、优化目标清晰，容易设想“怎样会更好”，这时设计启发函数，采用状态空间搜索效率很高；若使用遗传算法，往往效率不佳。</li><li>但对于一些限制条件非常多的问题，此时设计启发函数很难，因为很难证明所设计的启发函数是A*的，从而就无法保证搜索总是有效的。这种情形，使用遗传算法反而更有优势。</li></ul></li></ul><h2 id="4-2-粒子群优化算法"><a href="#4-2-粒子群优化算法" class="headerlink" title="4.2  粒子群优化算法"></a>4.2  粒子群优化算法</h2><h3 id="4-2-1-粒子速度和位置的更新"><a href="#4-2-1-粒子速度和位置的更新" class="headerlink" title="4.2.1 粒子速度和位置的更新"></a>4.2.1 粒子速度和位置的更新</h3><p><img src="http://img.fdchen.host/AIClass/%E7%B2%92%E5%AD%90%E9%80%9F%E5%BA%A6%E5%92%8C%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%9B%B4%E6%96%B0.png" alt="粒子速度和位置的更新"></p><ul><li>惯性部分</li><li>认知部分</li><li>社会部分</li></ul><h3 id="4-2-2-流程图"><a href="#4-2-2-流程图" class="headerlink" title="4.2.2 流程图"></a>4.2.2 流程图</h3><p><img src="http://img.fdchen.host/AIClass/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="粒子群算法流程图"></p><h3 id="4-2-3-PSO算法参数分析"><a href="#4-2-3-PSO算法参数分析" class="headerlink" title="4.2.3 PSO算法参数分析"></a>4.2.3 PSO算法参数分析</h3><ul><li><p>参数</p><ul><li><p>群体规模</p></li><li><p>惯性权重</p><ul><li>保持运动惯性，使其有1扩展搜索空间的趋势</li></ul></li><li><p>加速度</p><ul><li>代表将粒子推向个体最优位置和群体最优位置的统计加速项的权重</li></ul></li><li><p>最大速度</p><ul><li>限制粒子的在某维的速度不超过最大速度</li></ul></li><li><p>最大代数</p></li></ul></li><li><p>各部分的影响</p><ul><li><p>只有惯性部分</p><ul><li>粒子将一直以当前速度飞行，直到边界。由于只能搜索有限区域，所以很难找到好解。</li></ul></li><li><p>没有惯性部分</p><ul><li>速度只取决于例子当前位置和其历史最好位置，速度本身没有记忆性。</li></ul></li><li><p>没有认知部分</p><ul><li>粒子没有认知能力，也就是”只有社会“模型。在粒子的相互作用下，有能力达到新的搜索空间。但对复杂问题，容易陷入局部最优点。</li></ul></li><li><p>没有社会部分</p><ul><li>粒子间没有社会共享信息，也就是”只有认知“模型。因为个体间没有交互，一个规模为m的群体等价于m个单个粒子的运行，因而得到最优解的机率非常小。</li></ul></li></ul></li></ul><h3 id="4-2-4-特点"><a href="#4-2-4-特点" class="headerlink" title="4.2.4 特点"></a>4.2.4 特点</h3><ul><li><p>优点</p><ul><li>简单易实现</li><li>收敛速度快</li><li>粒子具有记忆性</li></ul></li><li><p>缺点</p><ul><li>缺乏速度的自适应调节，容易陷入局部最优，可能导致收敛精度低或者不收敛</li><li>标准粒子群算法不能有效求解离散及组合优化问题</li><li>参数难以确定，对不同的问题，需选择合适的参数来达到最优效果</li></ul></li></ul><h2 id="4-3-蚁群算法"><a href="#4-3-蚁群算法" class="headerlink" title="4.3 蚁群算法"></a>4.3 蚁群算法</h2><h3 id="4-3-1-基本原理"><a href="#4-3-1-基本原理" class="headerlink" title="4.3.1 基本原理"></a>4.3.1 基本原理</h3><ul><li><p>信息素</p><ul><li>信息素是一种由蚂蚁自身释放的易挥发的物质，信息素的浓度越高，对应的路径越短</li></ul></li><li><p>正反馈</p><ul><li>蚂蚁会以较大的概率选择信息素浓度较高的路径，并释放一定量的信息素，从而使距离较短路径的信息素被加强，形成一个正反馈。</li></ul></li></ul><h3 id="4-3-2-基本框架"><a href="#4-3-2-基本框架" class="headerlink" title="4.3.2 基本框架"></a>4.3.2 基本框架</h3><ul><li><p>模拟蚂蚁</p><ul><li>每只蚂蚁都有相同的目标，以相同速度运动</li><li>蚂蚁在行走过程中，在达到目的地前，不走回头路，不转圈</li><li>每只蚂蚁都根据相同的原则释放信息素、选择路径</li><li>每只蚂蚁都记得自己经历路径的长度和过程</li><li>种群中蚂蚁的数量不会发生变化</li></ul></li><li><p>模拟环境”地图“</p><ul><li><p>我们将蚂蚁觅食的环境抽象成“具有N个节点的全连通图”</p><ul><li>图上一共有n个节点，每个节点都与其他所有节点直接相连</li><li>任意两点X、Y之间的距离记为：dxy 均为已知</li><li>具有明确的起点和终点</li></ul></li></ul></li><li><p>模拟蚂蚁选择路线</p><ul><li><p>第一种：不考虑信息素的影响，选择距离最短的路线行动，符合贪心原则</p></li><li><p>第二种：不考虑各点之间的距离，选择信息素值最大的路线行动</p></li><li><p>由于蚂蚁智力有限，上面的准则应该概率化</p><ul><li>与该路线的长度成反比</li><li>与该路线上信息素浓度成正比</li></ul></li></ul></li><li><p>蚂蚁选择路线的概率计算式</p></li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%9A%82%E8%9A%81%E9%80%89%E6%8B%A9%E8%B7%AF%E7%BA%BF%E7%9A%84%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97%E5%BC%8F.png" alt="蚂蚁选择路线的概率计算式"></p><ul><li><p>模拟信息素的释放与消散</p><ul><li>信息素随着时间推移而消散</li></ul></li><li><p>一种常见策略：将时间“片段化”，以“cycle”为单位来模拟时间</p><pre><code>  -  一个cycle：表示蚁群中所有蚂蚁均从出发点成功达到目标点</code></pre><ul><li>信息素：在一个cycle结束之后统一更新，不考虑cycle期间的消散和累积</li></ul></li><li><p>信息素的消散公式</p></li></ul><p><img src="http://img.fdchen.host/AIClass/%E4%BF%A1%E6%81%AF%E7%B4%A0%E7%9A%84%E6%B6%88%E6%95%A3%E5%85%AC%E5%BC%8F.png" alt="信息素的消散公式"></p><ul><li>走最短路径的蚂蚁，其留下的信息素值越高，成反比</li></ul><h3 id="4-3-3-参数选择"><a href="#4-3-3-参数选择" class="headerlink" title="4.3.3 参数选择"></a>4.3.3 参数选择</h3><ul><li><p>信息素启发因子</p><ul><li>反映了蚁群在路径搜索种随机性因素作用的强度</li></ul></li><li><p>期望值启发因子</p><ul><li>反映了蚁群在路径搜索种先验性、确定性因素作用的强度</li></ul></li><li><p>信息素挥发度1-p</p><ul><li>当处理的问题规模比较大时，会使那些从未被搜索到的路径（可行解）上的信息量减少到接近于0，因而降低了算法的全局搜索能力</li></ul></li></ul><h3 id="4-3-4-旅行商问题求解过程"><a href="#4-3-4-旅行商问题求解过程" class="headerlink" title="4.3.4 旅行商问题求解过程"></a>4.3.4 旅行商问题求解过程</h3><ul><li>解决TSP问题的基本流程</li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="解决TSP问题的基本流程"></p><h3 id="4-3-5-特点"><a href="#4-3-5-特点" class="headerlink" title="4.3.5 特点"></a>4.3.5 特点</h3><ul><li><p>优点</p><ul><li>在求解性能上具有很强的鲁棒性，搜索能力较强</li><li>一种基于种群的算法，具有本质并行性，易于并行实现</li><li>很容易与其他算法，如：遗传算法、粒子群算法结合，以改善算法性能</li></ul></li><li><p>不足</p><ul><li>如果初始化参数设置不当，会导致求解速度很慢且所得解的质量特别差</li><li>基本蚁群算法即无改进的蚁群算法，计算量大，求解所需时间较长</li></ul></li></ul><h1 id="5-机器学习"><a href="#5-机器学习" class="headerlink" title="5 机器学习"></a>5 机器学习</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><ul><li>研究如何使用机器来模拟人类学习活动</li></ul><h3 id="5-1-1-研究内容"><a href="#5-1-1-研究内容" class="headerlink" title="5.1.1 研究内容"></a>5.1.1 研究内容</h3><ul><li>任务-T</li><li>方法-A</li><li>经验-E</li><li>性能-P</li></ul><h3 id="5-1-2-基本过程"><a href="#5-1-2-基本过程" class="headerlink" title="5.1.2 基本过程"></a>5.1.2 基本过程</h3><ul><li>计算机从给定的数据中学习规律，即从观测数据（样本）中寻找规律、建立模型，并利用学习到的规律（模型）对未知或无法观测的数据进行预测。</li></ul><h3 id="5-1-3-分类"><a href="#5-1-3-分类" class="headerlink" title="5.1.3 分类"></a>5.1.3 分类</h3><ul><li><p>监督学习</p></li><li><p>无监督学习</p></li><li><p>半监督学习</p><ul><li>数据没有标签，机器学习出的模型是从数据中提取出来的模式（提取决定性特征或者聚类等），一般是分类或回归等任务。</li></ul></li><li><p>强化学习</p><ul><li>外部环境对输入只给出评价信息而非正确答案，学习机通过强化受奖励的动作来改善自身的性能。常见的应用场景包括动态系统以及机器人控制等。</li></ul></li></ul><h3 id="5-1-4-基本概念"><a href="#5-1-4-基本概念" class="headerlink" title="5.1.4 基本概念"></a>5.1.4 基本概念</h3><ul><li>训练集</li><li>测试集</li><li>样本&#x2F;观测</li><li>标签</li></ul><h3 id="5-1-5-数据划分"><a href="#5-1-5-数据划分" class="headerlink" title="5.1.5 数据划分"></a>5.1.5 数据划分</h3><ul><li><p>训练集</p></li><li><p>测试集</p></li><li><p>验证集</p><ul><li>用来做模型选择（model selection），即做模型的最终优化及确定的</li></ul></li></ul><h3 id="5-1-6-误差与精度"><a href="#5-1-6-误差与精度" class="headerlink" title="5.1.6 误差与精度"></a>5.1.6 误差与精度</h3><ul><li><p>误差</p><ul><li>学习器（Learner）的实际预测输出与样本的真实输出之间的差异</li></ul></li><li><p>错误率</p><ul><li>被错误分类的样本在总样本中的比例。</li></ul></li><li><p>精度</p><ul><li>被正确分类的样本在总样本中的比例，即1 – error rate</li></ul></li><li><p>训练误差</p><ul><li>学习器在训练集上的误差，也称作经验误差（empirical error）</li></ul></li><li><p>测试误差</p><ul><li>学习器在测试集上的误差，用来近似泛化误差。</li></ul></li><li><p>泛化误差</p><ul><li>在新样本的误差，实际误差！</li></ul></li></ul><h3 id="5-1-7-监督学习与无监督学习的区别"><a href="#5-1-7-监督学习与无监督学习的区别" class="headerlink" title="5.1.7 监督学习与无监督学习的区别"></a>5.1.7 监督学习与无监督学习的区别</h3><p><img src="http://img.fdchen.host/AIClass/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="监督学习与无监督学习的区别"></p><h3 id="5-1-8-分类与回归"><a href="#5-1-8-分类与回归" class="headerlink" title="5.1.8 分类与回归"></a>5.1.8 分类与回归</h3><ul><li>分类技术：预测分类响应；分类模型将输入数据分为不同类别</li><li>回归技术：预测连续的响应</li></ul><h3 id="5-1-9-机器学习内容"><a href="#5-1-9-机器学习内容" class="headerlink" title="5.1.9 机器学习内容"></a>5.1.9 机器学习内容</h3><p><img src="http://img.fdchen.host/AIClass/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9.png" alt="机器学习内容"></p><h2 id="5-2-监督学习-分类KNN"><a href="#5-2-监督学习-分类KNN" class="headerlink" title="5.2 监督学习-分类KNN"></a>5.2 监督学习-分类KNN</h2><h3 id="5-2-1-核心思想：近朱者赤近墨者黑"><a href="#5-2-1-核心思想：近朱者赤近墨者黑" class="headerlink" title="5.2.1 核心思想：近朱者赤近墨者黑"></a>5.2.1 核心思想：近朱者赤近墨者黑</h3><ul><li>给定训练集，对于新输入样本，则在与其最邻近前K个训练样本中某个类居多，就认为新样本属于该类别。</li><li>不需要使用训练集进行训练，靠周围有限的邻近样本属性多少判断</li></ul><h3 id="5-2-2-缺点"><a href="#5-2-2-缺点" class="headerlink" title="5.2.2 缺点"></a>5.2.2 缺点</h3><ul><li><p>对参数选择很敏感</p><ul><li><p>较小k值→陷入局部，易发生过拟合</p></li><li><p>较大k值→较大邻域，预测易错误</p></li><li><p>选取一个较小的数值，通常采取交叉验证法来选取最优的k值</p><ul><li>在给定的建模样本中，拿出大部分样本进行建模型，留小部分样本用刚建立的模型进行预报，并求这小部分样本的预报误差，记录它们的平方加和。</li></ul></li></ul></li><li><p>计算量大</p></li></ul><h3 id="5-2-3-距离度量"><a href="#5-2-3-距离度量" class="headerlink" title="5.2.3 距离度量"></a>5.2.3 距离度量</h3><ul><li>欧几里得距离、曼哈顿距离、切比雪夫距离等</li><li>距离函数的选择应该根据数据的特性和分析的需要而定</li><li>距离计算</li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97.png" alt="距离计算"></p><h3 id="5-2-4-特征属性归一化的必要性"><a href="#5-2-4-特征属性归一化的必要性" class="headerlink" title="5.2.4 特征属性归一化的必要性"></a>5.2.4 特征属性归一化的必要性</h3><ul><li>各特征量纲不同</li><li>归一化处理</li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%BD%92%E4%B8%80%E5%8C%96%E5%A4%84%E7%90%86.png" alt="归一化处理"></p><h2 id="5-3-监督学习-分类决策树"><a href="#5-3-监督学习-分类决策树" class="headerlink" title="5.3  监督学习-分类决策树"></a>5.3  监督学习-分类决策树</h2><h3 id="5-3-1-决策树定义"><a href="#5-3-1-决策树定义" class="headerlink" title="5.3.1 决策树定义"></a>5.3.1 决策树定义</h3><ul><li><p>决策树是一种树型结构，由结点和有向边组成</p></li><li><p>结点</p><ul><li>内部结点表示一个属性或特征</li><li>叶结点代表一种类别，对应于决策结果</li></ul></li><li><p>有向边&#x2F;分支</p><ul><li>分支代表一个测试输出</li></ul></li></ul><h3 id="5-3-2-决策树算法"><a href="#5-3-2-决策树算法" class="headerlink" title="5.3.2 决策树算法"></a>5.3.2 决策树算法</h3><ul><li><p>基本思想</p><ul><li>采用自顶向下的递归方法，以信息熵为度量构造一棵熵值下降最快的树，到叶子结点处的熵值为零，此时每个叶结点中的实例都属于同一类</li><li>决策树可以看成一个if-then的规则集合</li><li>一个决策树将特征空间划分为不相交的单元(Cell)或区域(Region)</li></ul></li><li><p>算法流程</p><ul><li><p>训练</p><ul><li>利用训练集建立一棵决策树，构建决策树模型。</li></ul></li><li><p>测试</p><ul><li>利用生成的模型对输入数据进行分类</li></ul></li></ul></li><li><p>主要算法</p><ul><li><p>ID3：信息增益</p><ul><li><p>以信息论为基础，以信息熵和信息增益度作为衡量标准，从而实现对数据的归纳分类</p><ul><li>ID3算法是以信息增益为准则，对每次递归的结点属性进行选择的</li></ul></li><li><p>信息熵</p><ul><li>信息熵越小，信息量越大，不确定性越小，样本纯度越高</li></ul></li><li><p>信息增益</p><ul><li>信息增益越大，用属性a划分所获得纯度提升越大</li></ul></li><li><p>优点</p><ul><li>只需对训练实例进行较好地标注，就能进行学习，从一类无序、无规则事物(概念)中推理出分类规则。</li><li>分类模型是树状结构，简单直观，可将决策树中到达每个叶结点的路径转换为IF-THEN形式的分类规则，比较符合人类的理解方式。</li></ul></li><li><p>缺点</p><ul><li>信息增益偏好取值多的属性</li><li>可能会受噪声或小样本影响，易出现过拟合问题 </li><li>无法处理连续值的属性 </li><li>无法处理属性值不完整的训练数据</li></ul></li></ul></li><li><p>C4.5：信息增益率</p></li><li><p>CART：基尼指数</p></li></ul></li></ul><h2 id="5-4-监督学习-线性回归"><a href="#5-4-监督学习-线性回归" class="headerlink" title="5.4 监督学习-线性回归"></a>5.4 监督学习-线性回归</h2><h3 id="5-4-1-回归分析"><a href="#5-4-1-回归分析" class="headerlink" title="5.4.1 回归分析"></a>5.4.1 回归分析</h3><ul><li>学习得到一函数将输入变量映射到连续输出空间，即值域是连续空间。</li></ul><h3 id="5-4-2-相关概念"><a href="#5-4-2-相关概念" class="headerlink" title="5.4.2 相关概念"></a>5.4.2 相关概念</h3><ul><li><p>回归分析</p><ul><li><p>分析不同变量之间存在关系</p></li><li><p>回归模型</p><ul><li>刻画不同变量之间关系的模型</li></ul></li><li><p>线性回归模型</p><ul><li>如果这个模型是线性的</li></ul></li></ul></li></ul><h3 id="5-4-3-参数学习"><a href="#5-4-3-参数学习" class="headerlink" title="5.4.3 参数学习"></a>5.4.3 参数学习</h3><ul><li>最小二乘法</li></ul><p><img src="http://img.fdchen.host/AIClass/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95.png" alt="最小二乘法"></p><ul><li>最小二乘法示例</li></ul><p><img src="http://img.fdchen.host/AIClass/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E7%A4%BA%E4%BE%8B.png" alt="最小二乘法示例"></p><h2 id="5-5-无监督学习-K均值"><a href="#5-5-无监督学习-K均值" class="headerlink" title="5.5 无监督学习-K均值"></a>5.5 无监督学习-K均值</h2><h3 id="5-5-4-无监督学习的重要因素"><a href="#5-5-4-无监督学习的重要因素" class="headerlink" title="5.5.4 无监督学习的重要因素"></a>5.5.4 无监督学习的重要因素</h3><ul><li><p>数据特征</p></li><li><p>相似度函数</p><ul><li>定义一个相似度计算函数，基于所提取的特征来计算数据之间的相似性</li></ul></li></ul><h3 id="5-5-5-K均值聚类（K-means）"><a href="#5-5-5-K均值聚类（K-means）" class="headerlink" title="5.5.5 K均值聚类（K-means）"></a>5.5.5 K均值聚类（K-means）</h3><ul><li><p>目的</p><ul><li>将𝑛个数据聚类到𝑘个集合（也称为类簇）</li></ul></li><li><p>算法步骤</p></li></ul><ol><li><p>随机选取K个对象作为初始聚类中心</p></li><li><p>将数据样本集合中的样本按照最小距离原则分配到最近邻聚类</p></li><li><p>根据聚类的结果，重新计算K个聚类的中心，并作为新的聚类中心</p><ul><li>平均值法求聚类中心，不一定是样本点</li></ul></li><li><p>重复步骤2、3直到聚类中心不再变化</p></li></ol><ul><li><p>小结</p><ul><li>需事先确定聚类数K——很多时候并不知道应被聚类的数目</li><li>需初始化聚类质心——其对聚类结果有较大的影响</li><li>算法是迭代执行——时间开销非常大</li><li>采用欧氏距离——假设数据每个维度之间的重要性是一样的</li></ul></li></ul><h1 id="6-人工神经网络"><a href="#6-人工神经网络" class="headerlink" title="6 人工神经网络"></a>6 人工神经网络</h1><h2 id="6-1-概述及感知机"><a href="#6-1-概述及感知机" class="headerlink" title="6.1  概述及感知机"></a>6.1  概述及感知机</h2><h3 id="6-1-1-神经元模型"><a href="#6-1-1-神经元模型" class="headerlink" title="6.1.1 神经元模型"></a>6.1.1 神经元模型</h3><p><img src="http://img.fdchen.host/AIClass/%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B.png" alt="神经元模型"></p><h3 id="6-1-2-人工神经网络（ANN）特性"><a href="#6-1-2-人工神经网络（ANN）特性" class="headerlink" title="6.1.2 人工神经网络（ANN）特性"></a>6.1.2 人工神经网络（ANN）特性</h3><ul><li>并行分布处理</li><li>非线性映射</li><li>通过训练进行学习</li><li>适应与集成</li><li>硬件实现</li></ul><h3 id="6-1-3-人工神经网络发展历史"><a href="#6-1-3-人工神经网络发展历史" class="headerlink" title="6.1.3 人工神经网络发展历史"></a>6.1.3 人工神经网络发展历史</h3><ul><li><p>萌芽期</p><ul><li>MP模型</li><li>Hebb提出著名的Hebb学习规则</li></ul></li><li><p>第一次高潮期</p><ul><li>Rosenblatt提出感知机模型</li></ul></li><li><p>反思期</p><ul><li>Minsky和Papert从数学上深入分析了感知器的原理，指出其局限性</li></ul></li><li><p>第二次高潮期</p><ul><li>Rumelhart及Hinton等学者提出了多层感知器的反向传播算法，解决了多层前向神经网络的学习问题</li></ul></li></ul><h3 id="6-1-4-第一个神经元模型"><a href="#6-1-4-第一个神经元模型" class="headerlink" title="6.1.4 第一个神经元模型"></a>6.1.4 第一个神经元模型</h3><p><img src="http://img.fdchen.host/AIClass/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B.png" alt="第一个神经元模型"></p><ul><li><p>McCulloch和Pitts提出首个神经元模型，该模型是一个简单的二元分类器，它接受n维的输入：  (x1, x2, ┄ xn ) , x∈ {0,1} ，随后对这个n维的输入进行加权求和，并将其与阈值θ进行比较， 若大于阈值输出1，否则输出0。</p></li><li><p>原始神经元的缺点</p><ul><li>输入输出都是二元的</li><li>不能训练也没有学习能力</li></ul></li></ul><h3 id="6-1-5-激活函数"><a href="#6-1-5-激活函数" class="headerlink" title="6.1.5 激活函数"></a>6.1.5 激活函数</h3><ul><li>线性函数</li></ul><p><img src="http://img.fdchen.host/AIClass/%E7%BA%BF%E6%80%A7%E5%87%BD%E6%95%B0.png" alt="线性函数"></p><ul><li>非线性斜面函数</li></ul><p><img src="http://img.fdchen.host/AIClass/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%96%9C%E9%9D%A2%E5%87%BD%E6%95%B0.png" alt="非线性斜面函数"></p><ul><li>阈值函数</li></ul><p><img src="http://img.fdchen.host/AIClass/%E9%98%88%E5%80%BC%E5%87%BD%E6%95%B0.png" alt="阈值函数"></p><ul><li>S形函数</li></ul><p><img src="http://img.fdchen.host/AIClass/S%E5%BD%A2%E5%87%BD%E6%95%B0.png" alt="S形函数"></p><h3 id="6-1-6-感知机"><a href="#6-1-6-感知机" class="headerlink" title="6.1.6 感知机"></a>6.1.6 感知机</h3><ul><li><p>感知机与神经元模型相似，主要有以下几点改进</p><ul><li>输入为一个实数向量；</li><li>有多种激活函数可以选择；</li><li>属于一个可学习模型。</li></ul></li><li><p>感知机由两层神经元组成，是最简单的神经网络。</p><ul><li>输入层神经元</li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%BE%93%E5%85%A5%E5%B1%82%E7%A5%9E%E7%BB%8F%E5%85%83.png" alt="输入层神经元"></p><ul><li>输出层神经元</li></ul><p><img src="http://img.fdchen.host/AIClass/%E8%BE%93%E5%87%BA%E5%B1%82%E7%A5%9E%E7%BB%8F%E5%85%83.png" alt="输出层神经元"></p></li><li><p>单层感知机模型</p></li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B.png" alt="单层感知机模型"></p><ul><li><p>感知机模型的数学原理</p><ul><li>输入向量为二元向量时，方程确定了二维平面上的一条分界线</li><li>输入向量为三元向量时，方程确定了三维平面上的分界面</li><li>逻辑运算的实现</li></ul></li><li><p>单层感知机模型的缺点</p><ul><li>仅能解决一阶谓词逻辑，即只能完成线性划分，对于非线性或者其他分类会遇到很多困难，就连简单的XOR（异或）问题都解决不了（无法找到一个超平面将两类样本区分开）。</li></ul></li><li><p>多层感知机</p><p><img src="http://img.fdchen.host/AIClass/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA.png" alt="多层感知机"></p><ul><li><p>异或问题无法用一个超平面将两类样本分割开，于是人们考虑对多个感知机模型进行组合，即采用多个超平面去分割——多层感知机</p></li><li><p>多层感知机求解异或问题</p><p><img src="http://img.fdchen.host/AIClass/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%B1%82%E8%A7%A3%E5%BC%82%E6%88%96%E9%97%AE%E9%A2%98.png" alt="多层感知机求解异或问题"></p><ul><li><p>当中间层的神经元的激励函数分别采用二值和双极时，其结果是不一样的。激励函数：中间是双极+输出是二值时，可以解异或；中间及输出均为二值时，则无解。</p><ul><li>即使网络结构及参数完全一样，但因激励函数的选取差异会导致不同的求解结果。</li></ul></li><li><p>多层网络虽然很好地解决了线性不可分问题，但是，由于无法知道网络隐藏层的神经元的理想输出，所以，感知器的训练算法是难以直接用于多层网的训练。</p></li></ul></li><li><p>多层感知机曲线拟合问题</p></li></ul></li></ul><p><img src="http://img.fdchen.host/AIClass/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88%E9%97%AE%E9%A2%98.png" alt="多层感知机曲线拟合问题"></p><ul><li><p>感知机小结</p><ul><li>其学习过程与求线性判决函数(单样本感知器算法)的过程是等价的</li><li>单层感知器只能解决线性可分的问题</li><li>可以证明，只要隐层和隐层单元数足够多，多层感知器网络可实现任何模式分类</li><li>但是，多层感知器网络的权值如何确定，即网络如何进行学习，没有得到解决（多层感知器是一个黑箱，结果不可解释）</li></ul></li></ul><h3 id="6-1-7-梯度下降思想"><a href="#6-1-7-梯度下降思想" class="headerlink" title="6.1.7 梯度下降思想"></a>6.1.7 梯度下降思想</h3><ul><li>导数的方向为误差e上升最快的方向，我们只需将w, b 向着导数的相反方向进行调整，即可使误差e减小——梯度下降。</li></ul><h2 id="6-2-BP神经网络"><a href="#6-2-BP神经网络" class="headerlink" title="6.2  BP神经网络"></a>6.2  BP神经网络</h2><h3 id="6-2-1-基本思想"><a href="#6-2-1-基本思想" class="headerlink" title="6.2.1 基本思想"></a>6.2.1 基本思想</h3><ul><li><p>从后向前反向逐层传播输出层的误差，以间接计算隐层的误差。</p><ul><li>正向过程：从输入层经隐藏层逐层正向计算各单元的输出。</li><li>反向过程：由输出误差逐层反向计算隐层各单元的误差，并用此误差修正前层的权重。</li></ul></li></ul><h3 id="6-2-2-多层前馈神经网络"><a href="#6-2-2-多层前馈神经网络" class="headerlink" title="6.2.2 多层前馈神经网络"></a>6.2.2 多层前馈神经网络</h3><ul><li>每层神经元与下一层神经元完全相连，神经元之间不存在同层连接，也不存在跨层连接。</li><li>BP神经网络模型拓扑结构</li></ul><p><img src="http://img.fdchen.host/AIClass/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png" alt="BP神经网络模型拓扑结构"></p><h3 id="6-2-3-BP网络及算法中的变量符号"><a href="#6-2-3-BP网络及算法中的变量符号" class="headerlink" title="6.2.3 BP网络及算法中的变量符号"></a>6.2.3 BP网络及算法中的变量符号</h3><p><img src="http://img.fdchen.host/AIClass/BP%E7%BD%91%E7%BB%9C%E5%8F%8A%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E7%AC%A6%E5%8F%B7.png" alt="BP网络及算法中的变量符号"></p><h3 id="6-2-4-反向传播算法的学习过程-x2F-基本思想"><a href="#6-2-4-反向传播算法的学习过程-x2F-基本思想" class="headerlink" title="6.2.4 反向传播算法的学习过程&#x2F;基本思想"></a>6.2.4 反向传播算法的学习过程&#x2F;基本思想</h3><ul><li>选择一组训练样本，每一个样本由输入信息和期望的输出结果两部分组成。</li><li>从训练样本集中取一样本，把输入信息输入到网络中。</li><li>分别计算经神经元处理后的各层结点的输出。</li><li>计算网络的实际输出和期望输出的误差。</li><li>从输出层反向计算到第一个隐层，并按照某种能使误差向减小方向发展的原则，调整网络中各神经元的连接权值。</li><li>对训练样本集中的每一个样本重复(3)-(5)的步骤，直到对整个训练样本集的误差达到要求为止。</li></ul><h3 id="6-2-5-如何设计一个多层前馈神经网络"><a href="#6-2-5-如何设计一个多层前馈神经网络" class="headerlink" title="6.2.5 如何设计一个多层前馈神经网络"></a>6.2.5 如何设计一个多层前馈神经网络</h3><ul><li>网络的输入对应于每个训练元组测量的属性。</li><li>输入同时提供给称作输入层的单元层。</li><li>这些输入通过输入层，然后加权给隐藏层。</li><li>隐藏层的数量是任意的，尽管实践中通常只用一层。 </li><li>最后一个隐藏层的加权输出作为输出层的单元的输入，输出层发布给定元组的网络预测。</li><li>网络是前馈的：如果其权重都不回送到输入单元，或者前一层的输出单元。</li><li>从统计学观点来讲，网络进行非线性回归：给定足够多的隐藏单元和足够的训练样本，多层前馈网络可以逼近任何函数。与多层感知器类似：融合不同的曲线来拟合毫无规律可循的复杂曲线</li></ul><h3 id="6-2-6-如何设计网络拓扑结构"><a href="#6-2-6-如何设计网络拓扑结构" class="headerlink" title="6.2.6 如何设计网络拓扑结构"></a>6.2.6 如何设计网络拓扑结构</h3><ul><li>设计网络拓扑结构: 在训练之前，用户必须说明输入层的单元数、隐藏层数、每个隐藏层的单元数和输出层的单元数</li><li>规一化（Normalize）训练元组的每个属性的测量输入值至 [0.0-1.0]</li><li>一个输入单元每个值阈值权重或偏置）初始化为0</li><li>一个输出单元可以用来表示两个类，如果输出单元大于两个类，则每个类使用一个输出单元。一旦网络经过训练，并且其准确度不能接受，通常用不同的网络拓扑或使用不同的初始权重集</li></ul><h3 id="6-2-7-如何后向传播"><a href="#6-2-7-如何后向传播" class="headerlink" title="6.2.7 如何后向传播"></a>6.2.7 如何后向传播</h3><ul><li><p>原理</p><ul><li>后向传播迭代地处理训练元组数据集，将每个元组的网络预测和实际已知的目标值比较。</li><li>对于每个训练样本，修改权重使网络预测和实际目标值之间的均方误差最小。</li><li>修改“后向”进行：从输出层经每个隐藏层，到第一个隐藏层（因此称作后向传播）</li></ul></li><li><p>算法步骤</p><ul><li>初始化权重为很小的随机数，每个单元有一个关联的偏倚</li><li>向前传播输入（通过运用激励函数） </li><li>向后传播误差（通过更新权重和偏倚）</li><li>终止条件（当误差很小等）</li></ul></li></ul><h3 id="6-2-8-BP学习算法流程图"><a href="#6-2-8-BP学习算法流程图" class="headerlink" title="6.2.8 BP学习算法流程图"></a>6.2.8 BP学习算法流程图</h3><p><img src="http://img.fdchen.host/AIClass/BP%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="BP学习算法流程图"></p><h3 id="6-2-9-BP算法小结"><a href="#6-2-9-BP算法小结" class="headerlink" title="6.2.9 BP算法小结"></a>6.2.9 BP算法小结</h3><ul><li>核心思想：利用前向传播，计算第n层输出值</li><li>优化目标：输出值和实际值的残差</li><li>计算方法：将残差按影响逐步传递回第n-1, n-2,…, 2层，以修正各层连接权值（误差逆传播）</li><li>主要工具：链式法则（复合函数求偏导）</li></ul><h3 id="6-2-10-BP算法局限性"><a href="#6-2-10-BP算法局限性" class="headerlink" title="6.2.10 BP算法局限性"></a>6.2.10 BP算法局限性</h3><ul><li><p>容易过拟合</p><ul><li>早停、正则化</li></ul></li><li><p>容易陷入局部最优</p><ul><li>选取多次初值、随机梯度下降法</li></ul></li><li><p>难以设置隐层个数</p><ul><li>试错法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CQU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CQU </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CQU_多媒体技术</title>
      <link href="/2020/cqu-duo-mei-ti-ji-zhu/"/>
      <url>/2020/cqu-duo-mei-ti-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-引论"><a href="#1-引论" class="headerlink" title="1 引论"></a>1 引论</h2><h3 id="1-1-多媒体技术的概念"><a href="#1-1-多媒体技术的概念" class="headerlink" title="1.1 多媒体技术的概念"></a>1.1 多媒体技术的概念</h3><ul><li><p>什么是媒体</p><ul><li>媒体是信息表示、存储和传输的载体</li></ul></li><li><p>媒体的分类</p><ul><li><p>感觉媒体</p><ul><li>能直接作用于人的感官，使人直接产生感觉的一类媒体（作用于人）</li><li>视觉、听觉、嗅觉、味觉、触觉</li></ul></li><li><p>表示媒体</p><ul><li>计算机对信息的表示方法的描述</li><li>表示媒体具体体现为编码</li></ul></li><li><p>表现媒体</p><ul><li>感觉媒体和用于通信的电信号之间转换用的一类媒体，分为输入表现媒体和输出表现媒体</li><li>打印机、音箱、MIDI键盘，扫描仪、键盘、鼠标</li></ul></li><li><p>存储媒体</p><ul><li>用于计算机存放表示媒体，以便计算机随时处理、加工和调用信息编码</li><li>光盘、硬盘、磁带、活动硬盘、优盘等</li></ul></li><li><p>传输媒体</p><ul><li>用于传输表示媒体，将表示媒体从一处传送到另一处的物理载体</li><li>双绞线、同轴电缆、光纤等</li></ul></li></ul></li><li><p>多媒体技术</p><ul><li>计算机综合处理多种媒体信息，在文本、图形、图像、音频和视频等多种信息之间建立逻辑关系，并连同多媒体设备一起集成为一个具有交互性能的应用系统的技术</li></ul></li><li><p>多媒体系统的四个性质</p><ul><li><p>多样性</p><ul><li><p>离散媒体</p><ul><li>独立于时间</li></ul></li><li><p>连续媒体</p><ul><li>时基媒体</li></ul></li></ul></li><li><p>集成性</p><ul><li>信息的媒体集成性</li><li>设备的集成性</li></ul></li><li><p>实时性</p><ul><li>多媒体技术必须要支持实时处理</li></ul></li><li><p>交互性</p><ul><li>低级交互</li><li>中级交互</li><li>高级交互</li></ul></li></ul></li><li><p>为什么字符和多媒体的数据量相差很大？</p><ul><li>因为字符有限，可以逐一编码。但其编码并不是字符本身，字符本身的展示采用输出码。类似于自然人的身份证号和自然人本身</li><li>而多媒体信息的个数无限，例如图像个数是无限的，无法逐一编码，只能针对图像的像素逐一编码，从而导致编码数据量很大</li></ul></li><li><p>体系结构</p><ul><li>多媒体外围设备</li><li>多媒体计算机硬件系统</li><li>多媒体核心系统</li><li>多媒体创作平台及工具</li><li>多媒体创作系统</li><li>多媒体应用系统</li></ul></li></ul><h2 id="2-图形图像技术"><a href="#2-图形图像技术" class="headerlink" title="2 图形图像技术"></a>2 图形图像技术</h2><h3 id="2-1-数字图类分类"><a href="#2-1-数字图类分类" class="headerlink" title="2.1 数字图类分类"></a>2.1 数字图类分类</h3><ul><li><p>符号</p><ul><li>字母、数字、中文</li><li>输入采用输入码</li><li>存储和处理：采用内部编码</li><li>输出采用输出码，图像方式</li></ul></li><li><p>图形</p><ul><li><p>Graphics、矢量图</p></li><li><p>用一系列计算机指令来表示一幅图</p></li><li><p>优点</p><ul><li>存储和传输数据量小</li><li>缩放、旋转、移动图像不会失真，能保证无级缩放</li><li>适合管理图形的每一部分</li><li>容易编辑</li><li>图块可重用</li></ul></li><li><p>缺点</p><ul><li>图形生成花费时间长</li><li>不适合描述彩色图像</li></ul></li><li><p>在显示器上所有几何图形都是通过算法得到的</p></li></ul></li><li><p>图表</p><ul><li>乐谱、直方图</li></ul></li><li><p>图像</p><ul><li><p>Image、位图</p></li><li><p>将一幅图像在空间上离散化为多个像素，每个像素用若干个二进制位来描述其颜色、亮度和属性</p></li><li><p>优点</p><ul><li>显示速度快</li><li>表现力强，可适用于任何自然图像，细腻、层次多、细节丰富</li></ul></li><li><p>缺点</p><ul><li>存储和传输数据量大</li><li>缩放、旋转时算法复杂且容易失真</li></ul></li></ul></li><li><p>位图与矢量图的互转</p><ul><li><p>位图-&gt;矢量图</p><ul><li>跟踪技术</li></ul></li><li><p>矢量图-&gt;位图</p><ul><li>光栅化技术</li></ul></li></ul></li></ul><h3 id="2-2-数字信号处理基础"><a href="#2-2-数字信号处理基础" class="headerlink" title="2.2 数字信号处理基础"></a>2.2 数字信号处理基础</h3><ul><li><p>信号采集（模数转换）</p><ul><li><p>采样</p><ul><li>空间&#x2F;时间离散</li><li>图像分辨率</li></ul></li><li><p>量化</p><ul><li><p>幅值离散</p></li><li><p>量化位数的确定</p></li><li><p>分类</p><ul><li>均匀量化</li><li>非均匀量化</li></ul></li></ul></li></ul></li><li><p>信号表示</p><ul><li><p>编码</p><ul><li><p>定义</p></li><li><p>分类</p><ul><li>非压缩编码</li><li>压缩编码</li></ul></li></ul></li></ul></li><li><p>说明</p><ul><li>模数转换有信号损失（采样、量化均有）</li><li>我们能承受的损失与具体需求和人们的感知有光</li><li>虽然数字信号有损失但数字信号有利于复制和编辑</li><li>音频、视频进行模数转换时同样有采样和量化</li></ul></li></ul><h3 id="2-3-视觉特性"><a href="#2-3-视觉特性" class="headerlink" title="2.3 视觉特性"></a>2.3 视觉特性</h3><ul><li><p>光的自然特性</p><ul><li>光是电磁波的</li><li>声音是机械波</li></ul></li><li><p>三原色理论</p><ul><li>红绿蓝</li></ul></li><li><p>色彩要素</p><ul><li><p>色调</p><ul><li>表明光谱的波长，反映颜色的类别</li></ul></li><li><p>饱和度</p><ul><li>颜色的浓淡成都，反映色彩中掺入白光的数量</li><li>饱和度越高颜色越深，饱和度越低颜色越浅</li></ul></li><li><p>亮度</p><ul><li>光的明暗程度，反映彩光所含能量</li></ul></li><li><p>色度</p><ul><li>色调与饱和度合作，表示颜色类别和深浅</li><li>人眼能区分较少的色调和饱和度，但是对亮度非常敏感</li></ul></li></ul></li><li><p>人眼的感光特性</p><ul><li>颜色只存在于眼睛和大脑中，颜色是视觉系统对可见光的感知结果</li></ul></li><li><p>视觉感知规律</p><ul><li><p>视觉调节力</p></li><li><p>视觉暂留性</p></li><li><p>视觉锐度-视力</p></li><li><p>视网膜上光敏细胞的物理距离决定了视力的极限</p></li><li><p>亮度和对比度影响视力</p></li><li><p>人眼对彩色的分辨率低于对亮度的分辨率</p></li><li><p>注视点一般集中在高频部分</p><ul><li><p>高频信号</p><ul><li>图像强度（亮度&#x2F;灰度）变化剧烈的地方，也就是我们常说的边缘（轮廓）</li></ul></li><li><p>低频信号</p><ul><li>图像强度（亮度&#x2F;灰度）变换平缓的地方，也就是大片色块的地方</li></ul></li><li><p>人眼对低频信号更为敏感，即人眼更容易察觉低频信号的变化</p></li></ul></li></ul></li></ul><h3 id="2-4-图像的颜色模型"><a href="#2-4-图像的颜色模型" class="headerlink" title="2.4 图像的颜色模型"></a>2.4 图像的颜色模型</h3><ul><li><p>基本概念</p></li><li><p>RGB</p><ul><li>用于显示设备</li><li>相加混色模型</li><li>红绿蓝三基色</li></ul></li><li><p>CMYK</p><ul><li><p>用于打印设备</p></li><li><p>相减混色模型</p><ul><li>反射的光线就是我们所看见的物体颜色，这些颜色被称之为减色</li></ul></li><li><p>三种基本颜料颜色青色、品红、黄色</p></li></ul></li><li><p>HSL</p><ul><li><p>用于人眼</p></li><li><p>含义</p><ul><li>H-色调</li><li>S-饱和度</li><li>L-亮度</li></ul></li></ul></li><li><p>YUV</p><ul><li>详见动画视频技术</li></ul></li><li><p>YIQ</p><ul><li>详见动画视频技术</li></ul></li><li><p>Lab</p><ul><li>用于彩色电视</li><li>作为在不同颜色模式之间转换时使用的中间颜色模式</li><li>L<em>a</em>b 颜色模型下所生成的颜色与所使用的设备无关</li><li>在处理速度上，Lab色彩模式与RGB模式同样快，比CMYK模式快很多</li><li>Lab模式的图像在转换成CMYK模式时其色彩不会丢失或被替换，因此避免色彩损失的最佳方法是应用Lab模式</li></ul></li><li><p>Index</p><ul><li>用8bit描述，最多可以使用256种颜色，采用调色板方式实现</li><li>由于限制了调色板中颜色的数目，因而可以减小文件的大小，同时基本上不影响视觉效果</li></ul></li><li><p>Grayscale模式</p><ul><li>用8bit描述，最多使用256级灰度来表现图像，图像中的每个像素有一个0（黑色）到255（白色）之间的亮度值。</li><li>灰度值也可以用黑色油墨覆盖的百分比来表示（0%表示白色，100%表示黑色）。使用灰度模式，使得能够较好地表现出单色图的图像层次</li></ul></li><li><p>Binary</p><ul><li>二值模式图像由一个个黑色和白色的像素点组成</li><li>每一个像素用1bit来表示，只能表示有点和无点两种状态</li></ul></li></ul><h3 id="2-5-位图图像基本属性"><a href="#2-5-位图图像基本属性" class="headerlink" title="2.5 位图图像基本属性"></a>2.5 位图图像基本属性</h3><ul><li><p>分辨率</p><ul><li><p>图像分辨率</p></li><li><p>显示分辨率</p></li><li><p>打印分辨率和扫描分辨率</p></li><li><p>像素分辨率</p><ul><li>像素本身的尺寸</li></ul></li></ul></li><li><p>颜色深度</p><ul><li>图像每个像素所占用的存储位数</li></ul></li><li><p>调色板</p><ul><li>颜色查找表</li></ul></li><li><p>真彩色、伪彩色与直接色</p><ul><li><p>真彩色</p><ul><li>每个像素值中有RGB三个基色分量，每个基色分量直接决定显示设备基色强度</li></ul></li><li><p>伪彩色</p><ul><li>把像素值当作彩色查找表（调色板）的表项入口地址，用查找出的RGB强度值产生的彩色</li></ul></li><li><p>直接色</p><ul><li>每个像素值分成R，G，B分量，每个分量作为单独的索引值对它做变换。也就是通过相应的彩色变换表找出基色强度，用变换后得到的R，G，B强度值产生的彩色</li></ul></li></ul></li><li><p>位图图像数据量</p><ul><li><p>B&#x3D;(h<em>w</em>c)&#x2F;8(Byte)</p><ul><li>h为垂直分辨率</li><li>w为水平分辨率</li><li>c为颜色深度</li></ul></li></ul></li></ul><h3 id="2-6-图类数据的文件类型"><a href="#2-6-图类数据的文件类型" class="headerlink" title="2.6 图类数据的文件类型"></a>2.6 图类数据的文件类型</h3><ul><li><p>BMP图像文件格式</p><ul><li><p>特点</p><ul><li>采用位映射存储格式</li><li>图像颜色深度可选1bit、4bit、8bit及24bit</li><li>不采用其他任何压缩</li><li>包含的图像信息较丰富</li><li>占用的磁盘空间过大，不利于网络传输</li><li>存储数据时，图像的扫描方式是按从左到右、从下到上</li></ul></li><li><p>文件组成</p><ul><li><p>位图文件头</p><ul><li>14字节</li></ul></li><li><p>位图信息头</p><ul><li>40字节</li></ul></li><li><p>颜色表</p></li><li><p>图像数据阵列字节</p></li></ul></li><li><p>图像数据压缩</p><ul><li><p>BI_RLE8</p><ul><li><p>每个像素位8位（索引）的RLE压缩编码，可以使用编码方式和绝对方式中的任何一种编码，这两种方式可在同一幅图中的任何地方使用。此外，还有控制标识。</p></li><li><p>控制标识</p><ul><li>00 00  行的结束</li><li>00 01 图像结束</li><li>00 02 其后的两个字节标识下一个像素从当前开始的水平和垂直位置的偏移量</li></ul></li><li><p>绝对方式</p><ul><li><p>第一个字节为0，第二个字节为0x03-0xFF之间的一个值</p><ul><li><p>第2个字节表示跟在这个字节后面的字节数，每个字节包含单个像素的颜色索引。压缩数据格式需要字边界对齐（存放数据成员的首地址能被数据成员基本长度整除，如此处应该被2整除）</p><ul><li>00 03 45 56 67 00 表示45 56 67</li></ul></li></ul></li></ul></li><li><p>编码方式</p><ul><li><p>第一个字节指定使用相同颜色的像素数目，第二个字节指定使用的颜色索引</p><ul><li>03 04表示 04 04 04</li></ul></li></ul></li></ul></li><li><p>BI_RLB4</p><ul><li><p>每个像素为4位（索引）的RLE压缩编码，可以使用编码方式和绝对方式中的任何一种编码，这两种方式可在同一幅图中的任何地方使用。此外，还有控制标识。</p></li><li><p>控制标识</p><ul><li>00 00  行的结束</li><li>00 01 图像结束</li><li>00 02 其后的两个字节标识下一个像素从当前开始的水平和垂直位置的偏移量</li></ul></li><li><p>绝对方式</p><ul><li><p>第一个字节为0，第二个字节为0x03-0xFF之间的一个值</p><ul><li><p>第2个字节标识颜色所引述，其后续字节包含有颜色索引，颜色索引存方在该字节的高、低4位中，1个颜色索引对饮1个像素。压缩数据格式需要字边界对齐（不论是绝对方式还是编码方式）</p><ul><li>00 06 45 56 67 00表示4 5 5 6 6 7</li></ul></li></ul></li></ul></li><li><p>编码方式</p><ul><li><p>第一个字节指定像素数目，第二个字节包含仅有的两种颜色索引，一个在高4位，一个在低4位。第一个像素使用高4位的颜色索引，第二个像素使用低4位的颜色索引，依次类推</p><ul><li>03 04表示0 4 0</li></ul></li></ul></li></ul></li></ul></li><li><p>颜色表（调色板）</p><ul><li>包含的颜色与位图所具有的颜色数相同</li><li>每个颜色用4个字节表示</li><li>24位真彩色不使用颜色表</li></ul></li><li><p>图像数据阵列字节</p><ul><li><p>图像的每一扫描行由表示图像像素的连续的字节组成</p></li><li><p>每一行的字节数取决于图像的颜色数目和用像素表示的图像宽度，每一行（图像的扫描行）字节数必须位4的倍数</p><ul><li>8*8二值bmp的图像数据需要34字节，(1+3)*8+2</li></ul></li><li><p>扫描行是从左往右，从下往上存储的</p></li><li><p>最后由两个字节00 00为结束符</p></li></ul></li></ul></li><li><p>其他文件类型</p><ul><li><p>常用位图格式</p><p>  - </p></li><li><p>常用矢量图格式</p><ul><li></li></ul></li></ul></li></ul><h2 id="3-音频技术"><a href="#3-音频技术" class="headerlink" title="3 音频技术"></a>3 音频技术</h2><h3 id="3-1-音频种类"><a href="#3-1-音频种类" class="headerlink" title="3.1 音频种类"></a>3.1 音频种类</h3><ul><li><p>声音</p><ul><li>统称，或专指除语音、音乐之外的其他声音</li></ul></li><li><p>语音</p><ul><li>语音是声音的一种特殊类型，因为人类语音的频率范围小于声音的频率范围，且具有独特的发音特点</li></ul></li><li><p>音乐</p><ul><li>声音的一种特殊类型，主要是指MIDI音乐</li></ul></li></ul><h3 id="3-2-声音及其物理特性"><a href="#3-2-声音及其物理特性" class="headerlink" title="3.2 声音及其物理特性"></a>3.2 声音及其物理特性</h3><ul><li><p>声波</p><ul><li><p>振幅</p><ul><li>反映声音的强度</li></ul></li><li><p>频率</p><ul><li>反映声音的音调</li></ul></li><li><p>相位</p><ul><li>声音变化的方向</li></ul></li></ul></li><li><p>按特性分类</p><ul><li><p>规则声音</p><ul><li>语音、音乐、音效</li></ul></li><li><p>不规则声音</p><ul><li>噪声</li></ul></li></ul></li><li><p>按频率分类</p><ul><li>亚音信号（次音信号）</li><li>音频信号</li><li>超音频（超声波）信号</li></ul></li><li><p>声音信号（复合信号）的参数</p><ul><li><p>基频</p><ul><li>主频率</li></ul></li><li><p>谐音</p></li><li><p>分量信号</p></li><li><p>带宽</p></li></ul></li></ul><h3 id="3-3-声音的听觉心理特性"><a href="#3-3-声音的听觉心理特性" class="headerlink" title="3.3 声音的听觉心理特性"></a>3.3 声音的听觉心理特性</h3><ul><li><p>音调</p><ul><li>声音的高低，有（基）频率决定</li></ul></li><li><p>音强（响度）</p><ul><li>取决于振幅的大小</li><li>响度与人耳可闻程度有关</li></ul></li><li><p>等响曲线</p><ul><li>等响曲线同一条线上人耳感知一样</li><li>响度较小时，高、低频声音敏感度降低较明显，而低频段比高频段灵敏度降低更加剧烈，一般应重视加强低频音量</li></ul></li><li><p>听阈</p><ul><li>人能听到的最低声压级</li></ul></li><li><p>痛阈</p><ul><li>当声压级增大到一定强度时，人耳会感到不适或疼痛</li></ul></li><li><p>掩蔽效应</p><ul><li><p>一种频率的声音阻碍听觉系统感受另一种频率的声音的现象。人的耳朵只对最明显的声音反应敏感，而对于不明显的声音，反应则较不敏感</p></li><li><p>前者称为掩蔽声音，后者称为被掩蔽声音</p></li><li><p>频域掩蔽</p><ul><li>指一个强纯音会掩蔽在其附近同时发声的弱纯音</li></ul></li><li><p>时域掩蔽</p><ul><li>指在时间上相邻的声音之间也有掩蔽现象</li></ul></li></ul></li></ul><h3 id="3-4-声音信号数字化"><a href="#3-4-声音信号数字化" class="headerlink" title="3.4 声音信号数字化"></a>3.4 声音信号数字化</h3><ul><li><p>采样</p><ul><li>将声音信号在时间上离散化，即每隔相等的一段时间抽取一个信号样本</li></ul></li><li><p>量化</p><ul><li>将连续的信号幅度离散化。</li><li>均匀量化&#x2F;线性量化</li><li>非均匀量化&#x2F;非线性量化</li></ul></li><li><p>编码</p><ul><li>按一定格式将离散的数字信号记录下来，并在数据的前后加上同步、纠错等控制信号</li></ul></li><li><p>数字音频质量的决定因素</p><ul><li><p>采样频率</p><ul><li><p>Nyquist采样定理</p><ul><li>采样频率高于信号最高频率的两倍，就可以从采样中完全恢复原始信号的波。因此采样频率不一比高低与声音信号最高频率的两倍</li></ul></li></ul></li><li><p>采样精度&#x2F;量化位数</p><ul><li>描述每个采样点样值的二进制位数。常用8位、16位、32位</li><li>信号噪声比（信噪比）SNR，单位为分贝，信噪比越高越好</li></ul></li><li><p>声道数</p><ul><li>指声音记录为一组波形（即单声道）还是两组波形（即双声道立体声），甚至更多组波形（多声道）</li><li>由于立体声声音具有多声道、多方向的特征，因此，声音的播放在时间和空间性能方面都能显示更好的效果</li></ul></li></ul></li><li><p>对应图像音频质量的决定因素</p><ul><li>分辨率</li><li>颜色深度</li><li>颜色通道</li></ul></li><li><p>声音质量的等级</p><ul><li>根据声音的频带划分5个等级，以下由低到高排列</li><li>电话</li><li>调幅广播（AM）</li><li>调频广播（FM）</li><li>激光唱盘（CD-Audio）</li><li>数字录音带（DAT）</li></ul></li><li><p>采样数据量</p><ul><li>数据率(字节每秒)&#x3D;采样频率<em>样本精度</em>声道数&#x2F;8</li><li>采样数据量&#x3D;数据率*采样时间</li></ul></li></ul><h3 id="3-5-语音"><a href="#3-5-语音" class="headerlink" title="3.5 语音"></a>3.5 语音</h3><ul><li><p>语音处理的任务</p><ul><li>以语音的基本特性为基础，主要针对语音的成分进行相应处理，包括语音采样、识别、模拟、合成等技术</li></ul></li><li><p>人机语音通信的两项关键技术</p><ul><li><p>语音合成</p><ul><li>再生预存的语音信号</li><li>模拟发声</li></ul></li><li><p>语音识别</p></li></ul></li></ul><h3 id="3-6-MIDI音乐"><a href="#3-6-MIDI音乐" class="headerlink" title="3.6 MIDI音乐"></a>3.6 MIDI音乐</h3><ul><li><p>数字音乐</p><ul><li>由实现定义好的音色、音调、音符等编号组成的</li><li>数字音乐编码</li></ul></li><li><p>MIDI音乐是一种数字音乐，MIDI音乐通常被称为电子音乐或合成音乐</p></li><li><p>MIDI实质上是由MIDI控制器（或MIDI文件）产生的指示电子音乐合成器要做什么、怎么做的一套标准指令</p></li><li><p>特点</p><ul><li><p>优点</p><ul><li>生成文件比较小</li><li>容易编辑</li><li>可以作为背景音乐</li></ul></li><li><p>缺点</p><ul><li>播放效果因软、硬件而异</li><li>录制较复杂，还须有专门工具</li></ul></li></ul></li></ul><h3 id="3-7-音频文件的格式"><a href="#3-7-音频文件的格式" class="headerlink" title="3.7 音频文件的格式"></a>3.7 音频文件的格式</h3><ul><li>WAV</li><li>MIDI</li><li>MP3</li><li>ra(RealAudio) &amp; rm(RealMedia)</li><li>Widnows Media</li></ul><h2 id="4-动画视频技术"><a href="#4-动画视频技术" class="headerlink" title="4 动画视频技术"></a>4 动画视频技术</h2><h3 id="4-1-动态图像"><a href="#4-1-动态图像" class="headerlink" title="4.1 动态图像"></a>4.1 动态图像</h3><ul><li><p>概念</p><ul><li><p>原理</p><ul><li>利用了人眼的视觉暂留性</li></ul></li><li><p>帧</p></li><li><p>分类</p><ul><li><p>动画</p><ul><li>计算机生成的非真实场景</li></ul></li><li><p>视频</p><ul><li>外界信号，真实场景</li></ul></li></ul></li></ul></li><li><p>特点</p><ul><li><p>时间连续性</p></li><li><p>数据量大</p></li><li><p>相关性强</p></li><li><p>实时性高</p><ul><li>必须在规定的时间内完成更换画面播放的过程</li></ul></li></ul></li><li><p>动态图像参数</p><ul><li>视频纵横比、观察距离和图像细节</li></ul></li></ul><h3 id="4-2-动画基础"><a href="#4-2-动画基础" class="headerlink" title="4.2 动画基础"></a>4.2 动画基础</h3><ul><li><p>传统动画</p><ul><li>脚本编写与动画设计</li><li>关键帧设计</li><li>中间帧生成</li><li>扫描上色</li><li>检查、拍摄</li><li>后期制作</li></ul></li><li><p>计算机动画</p><ul><li><p>关键技术</p><ul><li>计算机动画制作软件及硬件</li></ul></li><li><p>计算机动画的分类</p><ul><li><p>根据运动的控制方式</p><ul><li><p>实时动画</p><ul><li>实时生成</li></ul></li><li><p>逐帧动画</p><ul><li>预先生成</li></ul></li></ul></li><li><p>根据视觉空间</p><ul><li><p>二维动画</p><ul><li>二维模型</li></ul></li><li><p>三维动画</p><ul><li>三维模型，得到的动画仍然是二维的图像数据</li></ul></li></ul></li><li><p>变形动画</p><ul><li><p>景物的形体变化</p></li><li><p>需要对各像素点的颜色、位置做变换</p></li><li><p>图形的变形采用插值算法来实现</p></li><li><p>变形过程</p><ul><li>关键帧选取</li><li>设定关键帧特征结构</li><li>参数设置</li><li>动画生成</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="4-3-视频基础"><a href="#4-3-视频基础" class="headerlink" title="4.3 视频基础"></a>4.3 视频基础</h3><ul><li><p>彩色空间变化</p><ul><li><p>YUV颜色模型</p><ul><li><p>YUV用于PAL制和SECAM彩色电视制式</p></li><li><p>Y为亮度，U、V是色差信号（B-Y, R-Y）</p></li><li><p>优点</p><ul><li>亮度信号Y解决了彩色电视机与黑白电视机的兼容问题</li><li>大量实验表明：人眼对彩色图像细节的分辨本领比对黑白的低得多，因此对色度信号U、V，可以采用“大面积着色原理”。数字化后通常为Y:U:V&#x3D;4:1:1(或者是Y:U:V&#x3D;4:2:2)（可用于数据压缩）</li></ul></li></ul></li><li><p>YIQ颜色模型</p><ul><li><p>YIQ用于NTSC彩色电视制式</p></li><li><p>Y是亮度，I和Q为色差信号，I代表红、黄之间颜色，Q代表蓝与紫之间的颜色</p></li><li><p>优点</p><ul><li>亮度信号Y解决了彩色电视机与黑白电视机的兼容问题</li><li>利用人眼的彩色视觉特性，可降低数字彩色图像所需要的存储容量。实验表明：人眼分辨红、黄之间颜色变化的能力最强，而分辨蓝与紫之间颜色变化的能力最弱（可用于数据压缩）</li></ul></li></ul></li><li><p>YCrCb用于连接在计算机上的显示器</p></li></ul></li><li><p>彩色电视制式</p><ul><li>NTSC制式</li><li>RAL制式</li><li>SECAM制式</li></ul></li></ul><h3 id="4-4-数字视频"><a href="#4-4-数字视频" class="headerlink" title="4.4 数字视频"></a>4.4 数字视频</h3><ul><li>数字视频（Digital Video-DV）是定义压缩图像和声音数据记录及回放过程的标准</li><li>模拟视像设备中的视频信号是模拟信号，如果要将模拟视像设备中的模拟视频信号转变为数字视频信号，就需要通过视频卡的处理</li><li>数字视频可以通过软件播放器在计算机上直接进行播放</li><li>如果要在摄像机、电视机上观看数字视频，需要一个D&#x2F;A数模转换器将二进制信息解码成模拟信号，才能进行播放</li></ul><h3 id="4-5-动画和视频文件格式"><a href="#4-5-动画和视频文件格式" class="headerlink" title="4.5 动画和视频文件格式"></a>4.5 动画和视频文件格式</h3><ul><li><p>动画文件格式</p><ul><li>GIF</li><li>SWF</li><li>FLI&#x2F;FLC</li></ul></li><li><p>常见视频文件格式</p><ul><li><p>微软的AVI</p></li><li><p>苹果的MOV</p></li><li><p>MPEG</p><ul><li>运动图像压缩算法的国际标准，有损压缩</li></ul></li><li><p>RealNetwork公司的RM</p><ul><li>流式视频文件格式</li></ul></li><li><p>ASF、WMV</p><ul><li>微软的流式视频文件格式</li></ul></li></ul></li><li><p>动画和视频制作软件</p><ul><li><p>Flash</p><ul><li>用于制作二维矢量动画</li></ul></li><li><p>3D Studio MAX</p><ul><li>用于制作三维动画</li></ul></li><li><p>Windows Movie Maker</p><ul><li>用于视频摄像和编辑</li></ul></li><li><p>Priemiere</p><ul><li>始于视频非线性编辑</li></ul></li></ul></li></ul><h2 id="5-多媒体数据压缩技术"><a href="#5-多媒体数据压缩技术" class="headerlink" title="5 多媒体数据压缩技术"></a>5 多媒体数据压缩技术</h2><h3 id="5-1-多媒体苏剧压缩的必要性和可能性"><a href="#5-1-多媒体苏剧压缩的必要性和可能性" class="headerlink" title="5.1 多媒体苏剧压缩的必要性和可能性"></a>5.1 多媒体苏剧压缩的必要性和可能性</h3><ul><li><p>必要性</p><ul><li>数字化后的图像、视频和音频等媒体信息的海量性</li><li>计算机存储资源和网络带宽难以满足需要</li></ul></li><li><p>可能性</p><ul><li><p>多媒体数据冗余</p><ul><li><p>统计冗余</p><ul><li>时间冗余</li><li>空间冗余</li></ul></li><li><p>感知冗余</p><ul><li>视觉冗余</li><li>听觉冗余</li></ul></li><li><p>结构冗余</p></li><li><p>知识冗余</p></li></ul></li><li><p>信息表达冗余</p><ul><li>信息熵冗余</li></ul></li></ul></li></ul><h3 id="5-2-数据压缩的基本原理和方法"><a href="#5-2-数据压缩的基本原理和方法" class="headerlink" title="5.2 数据压缩的基本原理和方法"></a>5.2 数据压缩的基本原理和方法</h3><ul><li><p>数据冗余</p><ul><li><p>统计冗余</p><ul><li><p>时间冗余</p><ul><li>视频的前后帧之间存在大量的区域相同或相近</li></ul></li><li><p>空间冗余</p><ul><li>同一个静态图像或画面中有部分区域数值一样或相差不大</li></ul></li></ul></li><li><p>结构冗余</p><ul><li>有些图像存在明显的分布模式（重复出现）</li></ul></li><li><p>知识冗余</p><ul><li>许多图像的理解与某些基础知识有相当大的相关性。如人脸的图像有固定的结构。比如嘴的上方有鼻子，鼻子上方有2个眼睛等</li></ul></li><li><p>感知冗余</p><ul><li><p>视觉冗余</p><ul><li><p>亮度和色度的差别</p><ul><li>人眼对亮度的敏感性比色度要强，所以在色度成分上，可以不要保留太多细节，这样可以使色度成分中出现更多的冗余</li></ul></li><li><p>高亮度区和非高亮度区差别</p><ul><li>在高亮度区，人眼的敏感度会下降。灰度值的量化可以更粗糙些</li></ul></li><li><p>边缘和非边缘区别</p><ul><li>人眼对急剧色彩和亮度变化的物体边缘的敏感度比非边缘区域强</li></ul></li></ul></li><li><p>听觉冗余</p></li></ul></li><li><p>信息熵冗余</p><ul><li><p>信源编码器模型</p><ul><li>X是消息集，由n个信源符号单元xj构成（j&#x3D;1, 2, …, n）</li><li>Am是符号集，由m个码元ai构成（i&#x3D;1, 2, …, m），符号集中的码元组成输出的码字</li><li>Z是输出集（码书），由n个码字zj构成（j&#x3D;1, 2, …, n），zj和xj一一对应</li></ul></li><li><p>压缩目标</p><ul><li>用尽量短的码字表达信源符号，且一一对应</li></ul></li><li><p>信息熵</p><ul><li><p>一组数据所携带的平均信息量（不确定性的度量）</p></li><li><ul><li>N为数据的种类（信源符号）的个数，Pi为第i个信源符号出现的概率</li></ul></li><li><p>平均信息量乘以数据的个数，就是整个一组数据的信息量</p></li><li><p>熵的性质</p><ul><li><p>熵是一个非负数，即总有H≥0</p></li><li><p>当其中一个符号i的出现概率pi&#x3D;1时，其余符号j出现概率pj &#x3D;0，H&#x3D;0，如p0&#x3D;1，则p1&#x3D;…&#x3D;p7&#x3D;0， H（x）&#x3D;0</p></li><li><p>当各个符号出现的概率相同时，则H最大，为log2N</p><ul><li>熵的范围为： 0≤H（x）≤log2N</li></ul></li></ul></li><li><ul><li>d &gt;&gt;H（x）有冗余，称为信息熵冗余</li><li>d &lt;H（x）不可能</li><li>d ≈H（x）最佳编码</li></ul></li><li><p>冗余度</p><p>  - </p></li><li><p>编码效率</p><ul><li></li></ul></li></ul></li></ul></li></ul></li><li><p>数据压缩方法分类</p><ul><li><p>压缩包括数字化过程中的压缩（采样和量化）和数字化后的数据的压缩</p><ul><li>压缩感知技术涉及数字化过程中的压缩</li><li>本课程主要涉及数字化后的数据的压缩</li></ul></li><li><p>根据解码后数据与原始数据是否完全一致</p><ul><li><p>可逆编码（无失真编码，无损编码）</p><ul><li>Huffman编码</li><li>算术编码</li><li>游程长度编码</li></ul></li><li><p>不可逆编码（有失真编码，有损编码）</p><ul><li>变换编码</li><li>预测编码</li></ul></li></ul></li><li><p>根据数据压缩的原理可以分为</p><ul><li><p>统计编码</p><ul><li>针对信息熵冗余</li></ul></li><li><p>预测编码</p><ul><li>针对统计冗余</li></ul></li><li><p>变换编码</p><ul><li>针对感知冗余</li></ul></li><li><p>其他编码</p><ul><li>混合编码</li><li>矢量化编码</li><li>LZW算法（词典编码）</li></ul></li></ul></li></ul></li><li><p>数据压缩方法评价</p><ul><li><p>压缩比（压缩效果）</p><ul><li>压缩前数据量&#x2F;压缩后数据量</li></ul></li><li><p>算法复杂性和运算速度（压缩速度）</p><ul><li><p>编码或解码的快慢程度</p></li><li><p>对称压缩和非对称压缩</p><ul><li>非对称压缩常常在解压缩方面要求是实时的，但压缩可以不是实时的</li></ul></li></ul></li><li><p>失真度（压缩质量）</p><ul><li>压缩以后对媒体的感知效果</li></ul></li></ul></li></ul><h3 id="5-3-统计编码"><a href="#5-3-统计编码" class="headerlink" title="5.3 统计编码"></a>5.3 统计编码</h3><ul><li><p>统计编码的基本原理</p><ul><li>数据压缩技术的理论基础是信息论</li><li>数据压缩的理论极限是信息熵</li><li>如果要求编码过程中不丢失信息量（无损编码），即要求保存信息熵，这种信息保持编码叫熵编码（统计编码）</li><li>熵编码（统计编码）要解决的问题是，如何利用信息熵理论减少数据在存储和传输中的冗余度。也就是要找到去除信源的相关性和概率分布的不均匀性的方法</li><li>无损压缩编码</li><li>根据信源符号出现概率的分布特性进行编码</li><li>统计编码需要在信源符号和码字之间确定严格的一一对应关系，以便准确无误地再现原来信源，同时使平均码长尽量小</li><li>如果所有的信源符号出现的概率相同，则说明平均信息量最大，也就不存在信源的冗余</li></ul></li><li><p>游程（RLE）编码</p><ul><li><p>将颜色值相同的相邻像素用一个计数值和那些像素的颜色值来代替</p></li><li><p>特点</p><ul><li>直观、经济</li><li>压缩比的大小主要取决于图像本身的特点</li><li>适用于计算机生成的图像</li><li>常与其他压缩编码技术联合应用</li></ul></li></ul></li><li><p>Huffman编码</p><ul><li><p>使用变长编码，对出现概率大的信源符号赋于短码字，而对于出现概率小的信源符号赋于长码字</p></li><li><p>概率最大的信源符号不一定只由1位码元编码</p></li><li><p>熵，平均码字长度</p><ul><li>需要考虑信源符号的概率，并非各信源符号的码长直接求平均值，即需要加权求熵</li></ul></li><li><p>整个编码过程实际上是建立二叉树的过程，所以编码时需要对原始数据扫描两遍</p><ul><li>第一遍扫描要精确地统计出原始数据中的每个值（信源符号）出现的频率</li><li>第二遍是通过合并最小概率来建立Huffman树，同时还要进行编码</li></ul></li><li><p>由于需要对多层次的二叉树节点进行编码，因此数据压缩和还原速度都较慢</p></li><li><p>压缩 &#x3D; 概率统计模型 + 编码</p><ul><li><p>概率统计模型</p><ul><li>在压缩程序中，用来处理输入信息，计算符号的概率的模型</li><li>固定概率表</li><li>静态统计模型</li><li>自适应模型</li></ul></li></ul></li><li><p>特点</p><ul><li>Huffman编码是最佳变长码，其优点是编码效率高</li><li>Huffman编码依赖于信源的统计特性</li><li>由于“0”和“1”的指定可以是任意的，所以Huffman编码所得到的编码不是唯一的</li><li>Huffman编码不需要附加同步代码，任何一个字符的编码，都不是另一个字符编码的前缀</li><li>在解码时需要有编码时采用的Huffman表，才能正确解码</li><li>如果信源符号数很大，需要存储的码表（码书）也需很大，从而会影响存储量、编码以及解码速度等各个方面的性能</li><li>Huffman编码是可变长度码，很难随意查找或调用压缩文件中间的内容</li><li>没有错误保护功能，会出现错误传播</li></ul></li><li><p>Huffman编码使用整数位的方法往往无法获得使用熵计算的位数，因此其压缩并非一定最佳</p></li></ul></li><li><p>算术编码</p><ul><li><p>基本原理</p><ul><li>将出现概率较多的“消息”(可以是字符或字符串)  ，用尽可能少的位或字节来表示</li></ul></li><li><p>一种变长码，主要针对出现概率高的消息序列标识的信息进行压缩</p></li><li><p>信源符号是表达消息的符号</p></li><li><p>将消息表示成实数轴上0和1之间的间隔，消息越长，这个间隔就越小，表示这一间隔所需的二进制位数就越多</p></li><li><p>算术编码用到的两个基本的参数是符号的概率和它的编码间隔。信源符号的概率决定压缩编码的效率，也决定编码过程中信源符号的间隔，间隔则决定了符号压缩后的输出</p></li><li><p>算术编码区别于Huffman编码</p><ul><li>它是根据信源符号估计出各个元素的概率，然后进行迭代计算。而不象Huffman编码必须预先得知信源的出现概率</li></ul></li><li><p>编码过程</p></li><li><p>解码过程</p></li><li><p>特点</p><ul><li>算术编码的精度在64位以内，对于运算中的溢出问题，可使用比例缩放方法解决</li><li>在解码器中需要添加一个专门的终止符，当解码器看到终止符时就停止解码，否则会无休止的解码</li><li>算术编码器对整个消息只产生一个码字</li><li>算术编码也是一种对错误很敏感的编码方法</li><li>算术编码可以是静态的或者自适应的</li><li>信源符号概率接近时，建议使用算术编码，这种情况下其效率高于Huffman编码，JPEG扩展系统采用</li></ul></li></ul></li></ul><h3 id="5-4-词典编码"><a href="#5-4-词典编码" class="headerlink" title="5.4 词典编码"></a>5.4 词典编码</h3><ul><li><p>在不知数据统计特性的前提下的通用编码算法，定长码</p></li><li><p>分类</p><ul><li>第一类:用已经出现过的字符串替代重复的部分，输出仅仅是指向早期出现过的字符串的“指针”。LZ77算法</li><li>第二类：创建一个“短语词典”。编码中遇到已在词典中出现的“短语”时，输出词典中的短语的“索引号” 。LZ78算法，后改进为LZW算法</li></ul></li><li><p>LWZ压缩编码算法</p><ul><li><p>查找冗余字符和用较短的符号标记替代冗余字符</p></li><li><p>原理</p></li><li><p>算法步骤</p></li><li><p>解压缩步骤</p></li><li><p>LZW不需要传输压缩编码时建立的词典，而是在解压缩时建立词典，此点不同于Huffman编码。但需要初始化词典&#x2F;表&#x2F;串表</p></li><li><p>特点</p><ul><li>处理过程比其他压缩过程复杂，但过程完全可逆</li><li>对于简单图像和平滑且噪音小的信号源具有较高的压缩比，并且有较高的压缩和解压缩速度。对机器硬件条件要求不高</li><li>可压缩任何类型和格式的数据，对于数据流中连续重复出现的字节和字串，LZW压缩技术具有很高的压缩比</li><li>LZW压缩技术有很多变体方法，常见的例如：ARC、RKARC、PKZIP高效压缩程序</li></ul></li></ul></li></ul><h3 id="5-5-预测编码"><a href="#5-5-预测编码" class="headerlink" title="5.5 预测编码"></a>5.5 预测编码</h3><ul><li><p>针对统计冗余</p></li><li><p>有损与无损</p><ul><li>量化差值：有损，压缩比高</li><li>不量化差值：无损，压缩比不高</li></ul></li><li><p>适合于声音和图像的压缩</p><ul><li>对于声音来讲，预测的对象是声波的下一个幅度、下一个音色</li><li>对于图像而言，预测的对象是下一个像点、下一条线或下一帧</li></ul></li><li><p>基本原理</p></li><li><p>根据预测器的设计分类</p><ul><li><p>线性预测</p><ul><li>为了预测的效率，一般采用</li></ul></li><li><p>非线性预测</p></li></ul></li><li><p>预测编码可以压缩的原因</p><ul><li>差值可能为0，或者较小，可以较少的位数表达</li><li>通过量化差值更可以实现压缩</li></ul></li><li><p>特点</p><ul><li>预测编码主要采用压缩数据的空间冗余和时间冗余的方法</li><li>简捷且易于实现</li><li>需要前面多个信号参与预测，要求数据传输速度很高</li><li>压缩能力有限，预测差值不一定可以大量压缩</li></ul></li></ul><h3 id="5-6-变换编码"><a href="#5-6-变换编码" class="headerlink" title="5.6 变换编码"></a>5.6 变换编码</h3><ul><li><p>针对感知冗余</p></li><li><p>有损压缩编码</p><ul><li>在不考虑运算误差的条件下，变换本身是一种无损且可逆的技术。为了能获得更好的编码效果，忽略了一些不重要的系数（或对于系数进行了量化），由此成为了有损的技术</li></ul></li><li><p>常用于音频信号压缩编码和图像&#x2F;视频压缩信号编码</p></li><li><p>基本原理</p><ul><li>对欲编码的原始数据所在的时间或空间域进行某种数学变换，从一种信号空间变换到另一种信号空间，产生一批变换系数，使得通过变换后能够突出原始数据中的重要部分，以便重点处理。然后再对这些系数进行编码处理</li><li>关键是要寻找一个最佳变换，使信息中最重要的部分易于识别</li><li>重要的系数在变换到其他空间域后，其编码的精确度高于次要的系数</li></ul></li><li><p>数据变换的方式</p><ul><li>傅里叶变换</li><li>沃尔什变换</li><li>正弦变换</li><li>余弦变换</li><li>斜变换</li><li>哈尔变换</li><li>K-L变换</li></ul></li></ul><h3 id="5-7-音频信号压缩技术"><a href="#5-7-音频信号压缩技术" class="headerlink" title="5.7 音频信号压缩技术"></a>5.7 音频信号压缩技术</h3><ul><li><p>音频信号冗余度</p><ul><li>幅度非均匀分布</li><li>样本之间的相关性</li><li>周期之间的相关性</li><li>基音之间的相关性</li><li>静止系数（话音间隙）</li><li>长期相关性</li><li>人类听觉感知冗余</li></ul></li><li><p>音频编译码器的分类</p><ul><li><p>音频编码常采用有损编码</p><ul><li>波形编码</li><li>参数编码</li><li>混合编码</li><li>声音信号数字化过程中，不同采样频率、量化位数本身就是一种压缩</li></ul></li><li><p>波形编译码器</p><ul><li>直接对波形信号进行采样和量化</li><li>根据采样定理对模拟语音信号进行采样，然后进行幅度量化与二进制编码（事实上没有压缩数字信号，但不同编码方式在模拟信号转换为数字信号过程中实现了不同压缩编码）</li><li>特点：简单，失真最小</li><li>典型方法：脉冲编码调制PCM、差分脉冲编码调制DPCM、自适应差分脉冲编码调制ADPCM等</li></ul></li><li><p>音源编译码器</p><ul><li>从话音波形信号中提取话音生成模型的参数，使用这些参数通过话音生成模型重构出话音</li><li>原理：以声音信号产生的模型为基础，将声音信号转换成参数后再进一步编码</li><li>基本参数：基音周期、共振峰、语音谱、声强等</li><li>特点：压缩率大，计算量大，保真度不高，保密性能好，用在军事上</li><li>典型方法：通道声码器、线性预测(LPC)声码器</li></ul></li><li><p>混合编译码器</p><ul><li>综合使用上述两种技术</li><li>MPEGⅠ中的音频部分是一种混合编码</li></ul></li></ul></li><li><p>脉冲编码调制（PCM）</p><p>  - </p><ul><li><p>量化分类</p><ul><li>均匀量化</li><li>非均匀量化</li></ul></li></ul></li><li><p>增量调制（DM）</p><ul><li><p>一种预测编码技术，对实际的采样信号与预测的采样信号之差的极性进行编码，将极性变成“0”和“1”这两种可能的取值之一（等价于对于实际值和预测值的差值进行二值量化）</p></li><li><p>如果实际的采样信号与预测的采样信号之差的极性为“正”，则用“1”表示；相反则用“0”表示</p></li><li><p>斜率过载</p><ul><li>增量调制器的输出不能保持跟踪输入信号的快速变化</li></ul></li><li><p>粒状噪声</p><ul><li>在输入信号缓慢变化部分，即输入信号与预测信号的差值接近零的区域，增量调制器的输出出现随机交变的“0”和“1”</li></ul></li></ul></li><li><p>自适应增量调制（ADM）</p><ul><li>在检测到斜率过载时开始增大量化阶Δ，而在输入信号的斜率减小时降低量化阶Δ</li></ul></li><li><p>自适应脉冲编码调制（APCM）</p><ul><li><p>根据输入信号幅度大小来改变量化阶大小的一种波形编码技术</p></li><li><p>改变量化阶大小的两种方法</p><ul><li><p>前向自适应</p><ul><li>根据未量化的样本值的均方根值来估算输入信号的电平，以此来确定量化阶的大小，并对其电平进行编码作为边信息(side information)传送到接收端</li></ul></li><li><p>后向自适应</p><ul><li>从量化器刚输出的过去样本中来提取量化阶信息。由于后向自适应能在发收两端自动生成量化阶，所以它不需要传送边信息</li></ul></li></ul></li></ul></li><li><p>差分脉冲编码调制（DPCM）</p><ul><li><p>利用样本与样本之间存在的信息冗余度来进行编码（预测编码）</p></li><li><p>PCM、DM、DPCM的不同</p><ul><li>PCM：量化绝对值</li><li>DM：量化相对值（2值量化）</li><li>DPCM：量化相对值（多值量化）</li></ul></li></ul></li><li><p>自适应差分脉冲编码调制（ADPCM）</p><ul><li>综合了APCM的自适应特性和DPCM系统的差分特性</li><li>利用自适应的思想改变量化阶的大小，即使用小的量化阶(step-size)去编码小的差值，使用大的量化阶去编码大的差值</li><li>使用过去的样本值估算下一个输入样本的预测值，使实际样本值和预测值之间的差值总是最小</li></ul></li><li><p>子带编码（SBC）</p><ul><li><p>使用一组带通滤波器(band-pass filter，BPF)把输入音频信号的频带分成若干个连续的频段，每个频段称为子带</p></li><li><p>对每个子带中的音频信号采用单独的编码方案去编码</p></li><li><p>在信道上传送时，将每个子带的代码复合起来</p></li><li><p>在接收端译码时，将每个子带的代码单独译码，然后把它们组合起来，还原成原来的音频信号</p></li><li><p>优点</p><ul><li>对每个子带信号分别进行自适应控制，量化阶(quantization step)的大小可以按照每个子带的能量电平加以调节</li><li>可根据每个子带信号在感觉上的重要性，对每个子带分配不同的位数，用来表示每个样本值</li></ul></li></ul></li><li><p>线性预测编码（LPC）</p><ul><li>通过分析话音波形来产生声道激励和转移函数的参数，对声音波形的编码实际就转化为对这些参数的编码</li><li>在接收端使用LPC分析得到的参数，通过话音合成器重构话音</li></ul></li></ul><h3 id="5-8-压缩感知技术"><a href="#5-8-压缩感知技术" class="headerlink" title="5.8 压缩感知技术"></a>5.8 压缩感知技术</h3><ul><li>解决数据采集设备廉价节能而压缩算法复杂和数据解压缩设备大型高效而解压缩算法相对简单的矛盾</li><li>压缩感知最核心的概念在于试图从原理上降低对一个信号进行测量的成本</li></ul><h2 id="6-多媒体数据压缩标准"><a href="#6-多媒体数据压缩标准" class="headerlink" title="6 多媒体数据压缩标准"></a>6 多媒体数据压缩标准</h2><h3 id="6-1-图像数据压缩标准"><a href="#6-1-图像数据压缩标准" class="headerlink" title="6.1 图像数据压缩标准"></a>6.1 图像数据压缩标准</h3><ul><li><p>种类</p><ul><li><p>JPEG</p><ul><li>静态图像压缩标准</li></ul></li><li><p>MPEG</p><ul><li>动态图像压缩标准</li></ul></li><li><p>H系列（H.261, H.263）</p><ul><li>视频压缩标准H.26x</li></ul></li></ul></li><li><p>JPEG</p><ul><li><p>采用的两种基本压缩算法</p><ul><li><p>以预测为基础的DPCM无损压缩算法</p><ul><li>不对差值量化</li></ul></li><li><p>以离散余弦变换DCT为基础的有损压缩算法</p><ul><li>JPEG压缩通常指此方法</li></ul></li></ul></li><li><p>4种运行模式</p><ul><li>基于DPCM的无损编码模式</li><li>基于DCT的有损顺序编码模式</li><li>基于DCT的递增编码模式</li><li>基于DCT的分层编码模式</li></ul></li><li><p>算法特点</p><ul><li><p>既可用于灰度图像，又可用于彩色图像</p></li><li><p>JPEG算法与色彩空间无关</p><ul><li>JPEG算法处理的彩色图像是单独的彩色分量图像，因此它可以压缩来自不同彩色空间的数据</li></ul></li><li><p>通常使用YUV模式</p></li><li><p>JPEG不仅适于静止图像的压缩，电视图像的帧内图像的压缩编码，也常采用此算法（作为动态图像压缩的一个组成部分）</p></li><li><p>JPEG标准还可以大范围地调节图像压缩比及其保真度</p></li><li><p>JPEG中的有损压缩利用了人的视觉系统的特性，使用变换编码+量化和无损压缩编码相结合来去掉视觉的冗余信息和数据本身的冗余信息</p></li></ul></li><li><p>主要步骤</p><ul><li><p>图像分块</p></li><li><p>正向离散余弦变换(FDCT)</p></li><li><p>量化(quantization)</p></li><li><p>Z字形编排(zigzag scan)</p></li><li><p>使用差分脉冲编码调制(differential pulse code modulation，DPCM)对直流系数(DC)进行编码</p></li><li><p>使用游程长度编码(run-length encoding，RLE)对交流系数(AC)进行编码</p></li><li><p>熵编码(entropy coding)</p><ul><li><p>Huffman编码</p><ul><li><p>交流系数熵编码的中间格式</p><ul><li><p>符号1（游程，尺寸）</p><ul><li>游程：前后两个非0的AC系数之间连续0的个数，1个字节的高4位存储</li><li>尺寸：后一个非0的AC系数复制幅值编码所需比特数，1个字节的低4位存储</li><li>游程取值范围为0-15，超过15用扩展符号（15，0）来扩充</li><li>尺寸的取值范围位0-10</li><li>编码结束用（0，0）来表示</li></ul></li><li><p>符号2（幅值）</p><ul><li>最长10位表示</li></ul></li></ul></li><li><p>直流系数的熵编码</p><ul><li><p>符号1（尺寸）</p></li><li><p>符号2（幅值）</p><ul><li>幅值可以以1位到11位表示</li></ul></li></ul></li></ul></li><li><p>自适应二进制算术编码</p></li></ul></li><li><p>组成位数据流</p></li><li><p>各种压缩技术的组合</p></li></ul></li><li><p>基于DCT的递增编码模式</p><ul><li><p>递增模式每个图像分量的编码要经过多次扫描才完成</p></li><li><p>递增模式</p><ul><li>按频段累进</li><li>按位累进</li></ul></li></ul></li><li><p>基于DCT的分层编码模式</p><ul><li>降低原始图像的空间分辨率</li></ul></li><li><p>基于DPCM的钨酸编码模式</p><ul><li>三领域二维预测编码和熵编码</li></ul></li><li><p>JPEG图像文件格式</p><ul><li>标记码</li><li>压缩数据</li></ul></li><li><p>EXIF格式</p></li></ul></li><li><p>MEPG</p><ul><li><p>M-JPEG技术（运动静止图像（或逐帧）压缩技术）</p><ul><li>M-JPEG只对帧内的空间冗余进行压缩。不对帧间的时间冗余进行压缩，故压缩效率不高</li></ul></li><li><p>MPEG-1和MPEG-2视频数据压缩算法</p><ul><li><p>在空间方向上，图像数据压缩采用JPEG压缩算法来去掉冗余信息</p></li><li><p>在时间方向上，图像数据压缩采用运动补偿(motion compensation)算法来去掉冗余信息</p></li><li><p>实际做法</p><ul><li><p>部分帧采用JPEG压缩，特点与M-JPEG相同</p></li><li><p>部分帧利用别的帧进行预测，依赖于别的帧，压缩比高，压缩质量稍差</p></li><li><p>具体分为I图像、P图像、B图像，需要考虑分布方式，三者图像压缩质量依次递减</p><ul><li><p>I图像（帧内图）</p><ul><li>采用帧内编码方式，即只利用了单帧图像内的空间相关性，而没有利用时间相关性</li></ul></li><li><p>P图像（预测图）</p><ul><li><p>用最近的前一个I图像(或P图像)预测编码得到</p><ul><li><p>以图像宏块为基本算法单元</p></li><li><p>参数</p><ul><li>当前要编码的图像宏块与参考图像的宏块之间的差值</li><li>宏块的运动矢量</li></ul></li></ul></li></ul></li><li><p>B图像（插补图，即双向预测图）</p><ul><li>B图像在预测时, 既可使用前一个图像作参照, 也可使用后一个图像做参照或同时使用前后两个图像作为参照图像(双向预测)</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>H.26x</p><ul><li>可用于低带宽网络上的视频传输</li></ul></li></ul><h3 id="6-2-音频数据压缩标准"><a href="#6-2-音频数据压缩标准" class="headerlink" title="6.2 音频数据压缩标准"></a>6.2 音频数据压缩标准</h3><ul><li><p>中国音视频编码技术标准</p><ul><li>AVS</li></ul></li></ul><h2 id="7-多媒体应用系统创作技术"><a href="#7-多媒体应用系统创作技术" class="headerlink" title="7 多媒体应用系统创作技术"></a>7 多媒体应用系统创作技术</h2><h3 id="7-1-多媒体应用系统设计基本过程"><a href="#7-1-多媒体应用系统设计基本过程" class="headerlink" title="7.1 多媒体应用系统设计基本过程"></a>7.1 多媒体应用系统设计基本过程</h3><ul><li>系统目标确定</li><li>编写系统脚本</li><li>进行脚本分析</li><li>脚本制作</li><li>脚本测试</li><li>系统评价等</li></ul><h3 id="7-2-多媒体系统创作"><a href="#7-2-多媒体系统创作" class="headerlink" title="7.2 多媒体系统创作"></a>7.2 多媒体系统创作</h3><ul><li><p>ToolBook</p><ul><li>面向对象的多媒体开发工具</li><li>设计过程如同构造一本书</li><li>主要通过使用程序设计语言OpenScript来编写脚本</li></ul></li><li><p>Authorware Professional</p><ul><li>基于流程图的可视化多媒体开发工具</li><li>整个过程以流程图为基本处理对象</li></ul></li><li><p>PowerPoint</p></li></ul><h3 id="7-3-多媒体程序设计基础"><a href="#7-3-多媒体程序设计基础" class="headerlink" title="7.3 多媒体程序设计基础"></a>7.3 多媒体程序设计基础</h3><ul><li><p>在Windows系统中，对多媒体设备进行控制主要有三种办法</p><ul><li>使用Microsoft提供的多媒体控制接口MCI</li><li>通过调用Windows的应用程序接口API多媒体相关函数</li><li>使用对象链接与嵌入OLE</li></ul></li></ul><h3 id="7-4-OpenGL"><a href="#7-4-OpenGL" class="headerlink" title="7.4 OpenGL"></a>7.4 OpenGL</h3><ul><li>OpenGL实际上是一种图形与硬件的接口</li></ul><h3 id="7-5-DirectX"><a href="#7-5-DirectX" class="headerlink" title="7.5 DirectX"></a>7.5 DirectX</h3><ul><li>DirectX是Microsoft开发的基于Windows平台的一组API，不仅支持图形&#x2F;图像编程，而且支持声音、视频等</li><li>它是为高速的实时动画渲染、交互式音乐和环境音效等高要求应用开发服务的</li></ul><h3 id="7-6-四大图像库"><a href="#7-6-四大图像库" class="headerlink" title="7.6 四大图像库"></a>7.6 四大图像库</h3><ul><li>OpenCV</li><li>FreeImage</li><li>CImg</li><li>CxImage_Advancing</li></ul>]]></content>
      
      
      <categories>
          
          <category> CQU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CQU </tag>
            
            <tag> 多媒体 </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CQU_软件需求分析</title>
      <link href="/2020/cqu-ruan-jian-xu-qiu-fen-xi/"/>
      <url>/2020/cqu-ruan-jian-xu-qiu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本的软件需求"><a href="#1-基本的软件需求" class="headerlink" title="1 基本的软件需求"></a>1 基本的软件需求</h1><h2 id="1-1-为什么要需求分析？"><a href="#1-1-为什么要需求分析？" class="headerlink" title="1.1 为什么要需求分析？"></a>1.1 为什么要需求分析？</h2><ol><li>它具有<strong>决策性，方向性，策略性</strong>的作用，它在软件开发的过程中，具有举足轻重的地位。在一个大型软件系统的开发中，它的作用要远远大于程序设计。</li><li>需求是<strong>软件产品的根源</strong>，需求工作的优劣对软件产品影响最大。</li></ol><h2 id="1-2-需求分析的任务"><a href="#1-2-需求分析的任务" class="headerlink" title="1.2 需求分析的任务"></a>1.2 需求分析的任务</h2><ol><li>需求分析的任务，就是解决“做什么”的问题，就是要全面地理解用户的各项要求。</li><li>需求分析模型如下：</li></ol><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B.jpg" alt="需求分析模型"></p><center>图1-1 需求分析模型</center><table><thead><tr><th></th><th>逻辑模型（本质模型、概念模型）</th><th>物理模型（实时模型、技术模型）</th></tr></thead><tbody><tr><td>现行系统</td><td>描述重要的业务功能，无论系统是如何实施的。</td><td>描述现实系统是如何在物理上实现的。</td></tr><tr><td>目标系统</td><td>描述新系统的主要业务功能和用户新的需求，无论系统应如何实施。</td><td>描述新系统是如何实施的（包括技术）。</td></tr></tbody></table><ol start="3"><li>软件需求活动</li></ol><ul><li>需求诱导</li><li>需求分析</li><li>需求传递</li><li>需求确认</li><li>需求演化</li></ul><span id="more"></span><h2 id="1-3-什么是需求分析？"><a href="#1-3-什么是需求分析？" class="headerlink" title="1.3 什么是需求分析？"></a>1.3 什么是需求分析？</h2><h3 id="1-3-1-软件需求的定义"><a href="#1-3-1-软件需求的定义" class="headerlink" title="1.3.1 软件需求的定义"></a>1.3.1 软件需求的定义</h3><p>IEEE 软件工程标准词汇表中定义软件需求为：</p><p>（1）用户为解决某个问题或达到目标而需具备的条件或能力。</p><p>（2）系统或系统部件为满足合同、标准、规范或其它正式文档而必须满足的条件或能力。</p><p>（3）上述（1）或（2）中定义的条件或能力的文档表达。</p><h3 id="1-3-2-简单理解"><a href="#1-3-2-简单理解" class="headerlink" title="1.3.2 简单理解"></a>1.3.2 简单理解</h3><p>分析软件用户的需求，细致的进行调查，把用户“做什么”的要求，最终转换为一个完全的、精细的软件逻辑模型。并写出软件的需求规格说明。准确地表达用户的要求.。</p><h3 id="1-3-3-需求的层次"><a href="#1-3-3-需求的层次" class="headerlink" title="1.3.3 需求的层次"></a>1.3.3 需求的层次</h3><ul><li>业务需求：表示组织或客户高层次的目标。描述了组织为什么要开发一个系统，即目标。可以用前景和范围文档表述。</li><li>用户需求：描述的是用户的目标，或用户要求系统必须能完成的任务，即用户能使用系统来做些什么。可以用用例、场景描述和事件-响应表表述。</li><li>功能需求：规定开发人员必须在产品中实现的软件功能，用户利用这些功能来完成任务，满足业务需求，即开发人员需要实现什么。</li></ul><h3 id="1-3-4-需求的级别"><a href="#1-3-4-需求的级别" class="headerlink" title="1.3.4 需求的级别"></a>1.3.4 需求的级别</h3><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E7%9A%84%E7%BA%A7%E5%88%AB.jpg" alt="需求的级别"></p><center>图1-2 需求的级别</center><h3 id="1-3-5-不属于需求的内容"><a href="#1-3-5-不属于需求的内容" class="headerlink" title="1.3.5 不属于需求的内容"></a>1.3.5 不属于需求的内容</h3><ul><li>设计和实现的细节</li><li>项目的计划信息</li><li>测试信息</li><li>以上信息包含在项目需求中。</li></ul><h2 id="1-4-优秀的团队遇到糟糕的需求"><a href="#1-4-优秀的团队遇到糟糕的需求" class="headerlink" title="1.4 优秀的团队遇到糟糕的需求"></a>1.4 优秀的团队遇到糟糕的需求</h2><h3 id="1-4-1-用户参与不足"><a href="#1-4-1-用户参与不足" class="headerlink" title="1.4.1 用户参与不足"></a>1.4.1 用户参与不足</h3><h3 id="1-4-2-用户需求扩展"><a href="#1-4-2-用户需求扩展" class="headerlink" title="1.4.2 用户需求扩展"></a>1.4.2 用户需求扩展</h3><ul><li>要控制项目范围的改变，首先应明确项目的业务目标、全局规划、范围、限制、成功标准以及产品的预计用途。然后参考这一框架对所有新特性和需求变更进行评估。</li><li>插入的代码可能导致模块违反强内聚和弱耦合这一设计原则。要减少需求变更对质量造成的影响，处理变更时应该先对结构和设计进行适当的修改，而不是直接修改代码。</li></ul><h3 id="1-4-3-有歧义的需求"><a href="#1-4-3-有歧义的需求" class="headerlink" title="1.4.3 有歧义的需求"></a>1.4.3 有歧义的需求</h3><h3 id="1-4-4-镀金问题"><a href="#1-4-4-镀金问题" class="headerlink" title="1.4.4 镀金问题"></a>1.4.4 镀金问题</h3><ul><li>开发人员为产品添加了一项需求说明中没有提到的功能，他认为“用户肯定会喜欢的”，则就是“镀金问题”。</li><li>开发人员和需求分析员不应擅自添加特性，应该把创意和备选方案提交给客户，让客户做决定。</li></ul><h3 id="1-4-5-过于抽象的需求"><a href="#1-4-5-过于抽象的需求" class="headerlink" title="1.4.5 过于抽象的需求"></a>1.4.5 过于抽象的需求</h3><h3 id="1-4-6-忽略了某类用户"><a href="#1-4-6-忽略了某类用户" class="headerlink" title="1.4.6 忽略了某类用户"></a>1.4.6 忽略了某类用户</h3><h3 id="1-4-7-不准确的计划"><a href="#1-4-7-不准确的计划" class="headerlink" title="1.4.7 不准确的计划"></a>1.4.7 不准确的计划</h3><h2 id="1-5-优质需求的好处"><a href="#1-5-优质需求的好处" class="headerlink" title="1.5 优质需求的好处"></a>1.5 优质需求的好处</h2><ul><li>减少需求缺陷</li><li>减少开发过程中的返工</li><li>减少不必要的特性</li><li>降低改进成本</li><li>加快开发进度</li><li>提高沟通效率</li><li>控制需求范围的改变</li><li>项目更有序</li><li>对系统测试的评估更准确</li><li>提高客户和开发人员的满意度</li></ul><h2 id="1-6-需求开发与需求管理"><a href="#1-6-需求开发与需求管理" class="headerlink" title="1.6 需求开发与需求管理"></a>1.6 需求开发与需求管理</h2><ol><li>把所有与需求直接相关单独活动统称为<strong>需求工程</strong>，需求工程中的活动可分为两大类，需求开发、需求管理。</li><li>需求开发，如图：</li></ol><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E5%BC%80%E5%8F%91.png" alt="需求开发"></p><center>图1-4 需求开发</center><p><strong>Tip：分别是获取、分析、编写规范、确认。</strong></p><ol start="3"><li>需求管理，如图：</li></ol><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86.jpg" alt="需求管理"></p><center>图1-4 需求管理</center><ol start="4"><li>需求开发与需求管理的分界，如图：</li></ol><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E5%BC%80%E5%8F%91%E4%B8%8E%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86%E7%9A%84%E5%88%86%E7%95%8C.png" alt="需求开发与需求管理的分界"></p><center>图1-5 需求开发与需求管理的分界</center><h2 id="1-7-优秀需求的特点"><a href="#1-7-优秀需求的特点" class="headerlink" title="1.7 优秀需求的特点"></a>1.7 优秀需求的特点</h2><h3 id="1-7-1-需求陈述的特点"><a href="#1-7-1-需求陈述的特点" class="headerlink" title="1.7.1 需求陈述的特点"></a>1.7.1 需求陈述的特点</h3><ul><li>完整性</li><li>正确性</li><li>可行性</li><li>必要性</li><li>有优先次序</li><li>无歧义</li><li>可验证性</li></ul><h3 id="1-7-2-需求规格说明的特点"><a href="#1-7-2-需求规格说明的特点" class="headerlink" title="1.7.2 需求规格说明的特点"></a>1.7.2 需求规格说明的特点</h3><ul><li>完整性</li><li>一致性：不会与同一类型的其他需求或更高层次的业务、系统或用户需求发生冲突。</li><li>可修改性</li><li>可跟踪性：可跟踪的需求都有一个固定的标识符对其唯一标识。</li></ul><h2 id="1-8-需求与其他软件项目过程的关系"><a href="#1-8-需求与其他软件项目过程的关系" class="headerlink" title="1.8 需求与其他软件项目过程的关系"></a>1.8 需求与其他软件项目过程的关系</h2><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E4%B8%8E%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="需求与其他软件项目过程的关系"></p><center>图1-6 需求与其他软件项目过程的关系</center><h1 id="2-客户的需求观"><a href="#2-客户的需求观" class="headerlink" title="2 客户的需求观"></a>2 客户的需求观</h1><h2 id="2-1-了解客户、最终用户、简介用户"><a href="#2-1-了解客户、最终用户、简介用户" class="headerlink" title="2.1 了解客户、最终用户、简介用户"></a>2.1 了解客户、最终用户、简介用户</h2><h3 id="2-1-1-基本概念"><a href="#2-1-1-基本概念" class="headerlink" title="2.1.1 基本概念"></a>2.1.1 基本概念</h3><p>用户是一种泛称，可细分为如下几个：</p><ol><li>客户：掏钱买软件的用户。</li><li>最终用户：真正操作软件的用户。</li><li>间接用户：间接用户既不掏钱买该软件产品，也不使用该软件，但是它可能对软件产品有很大的影响。一般为政府机构等。</li></ol><h3 id="2-1-2-涉众"><a href="#2-1-2-涉众" class="headerlink" title="2.1.2 涉众"></a>2.1.2 涉众</h3><p>涉众 (stakeholder) ，在软件开发项目中主要是指和这个项目有密切相关利益的人，他们共同感兴趣的就是需求分析阶段。</p><p>这些涉众包括如下：</p><ul><li>客户</li><li>用户</li><li>业务或需求分析员(负责收集客户需求并编写文档，以及负责客户与开发机构之间联系沟通的人)</li><li>开发人员</li><li>测试人员</li><li>用户文档编写者</li><li>项目管理者</li><li>客户管理者</li></ul><h2 id="2-2-客户的权利与义务"><a href="#2-2-客户的权利与义务" class="headerlink" title="2.2 客户的权利与义务"></a>2.2 客户的权利与义务</h2><h3 id="2-2-1-客户的权利"><a href="#2-2-1-客户的权利" class="headerlink" title="2.2.1 客户的权利"></a>2.2.1 客户的权利</h3><ol><li>要求分析人员使用符合客户语言习惯的表达。</li><li>要求分析人员了解客户系统的业务及目标。</li><li>要求分析人员组织需求获取期间所介绍的信息，并编写软件需求规格说明。</li><li>要求开发人员对需求过程中所产生的工作结果进行解释说明。</li><li>要求开发人员在整个交流过程中保持和维护一种合作的职业态度。</li><li>要求开发人员对产品的实现及需求都要提供建议，拿出主意。</li><li>描述产品使其具有易用、好用的特性。</li><li>可以调整需求，允许重用已有的软件组件。</li><li>当需要对需求进行变更时，对成本、影响、得失（ trade-off)有个真实可信的评估。</li><li>获得满足客户功能和质量要求的系统，并且这些要求是开发人员同意的。</li></ol><h3 id="2-2-2-客户的义务"><a href="#2-2-2-客户的义务" class="headerlink" title="2.2.2 客户的义务"></a>2.2.2 客户的义务</h3><ol><li>给分析人员讲解业务及说明业务方面的术语等专业问题。</li><li>抽出时间清楚地说明需求并不断完善。</li><li>当说明系统需求时，力求准确详细。</li><li>需要时要及时对需求做出决策。</li><li>要尊重开发人员的成本估算和对需求的可行性分析。</li><li>对单项需求、系统特性或使用实例划分优先级。</li><li>评审需求文档和原型。</li><li>一旦知道要对项目需求进行变更，要马上与开发人员联系。</li><li>在要求需求变更时，应遵照开发组织确定的工作过程来处理。</li><li>尊重需求工程中开发人员采用的流程（过程)。</li></ol><h1 id="3-需求工程的推荐方法"><a href="#3-需求工程的推荐方法" class="headerlink" title="3 需求工程的推荐方法"></a>3 需求工程的推荐方法</h1><p>7种类型：知识技能、需求获取、需求分析、规格说明、需求确认、需求管理、项目管理，共45种方法，后续章节一一讲述。</p><ul><li>需求工程的过程如图3-1：</li></ul><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="需求工程的过程"></p><center>图3-1 需求工程的过程</center><h1 id="4-需求分析员"><a href="#4-需求分析员" class="headerlink" title="4 需求分析员"></a>4 需求分析员</h1><h2 id="4-1-需求分析员的职责"><a href="#4-1-需求分析员的职责" class="headerlink" title="4.1 需求分析员的职责"></a>4.1 需求分析员的职责</h2><h3 id="4-1-0-需求分析员的概念"><a href="#4-1-0-需求分析员的概念" class="headerlink" title="4.1.0 需求分析员的概念"></a>4.1.0 需求分析员的概念</h3><ul><li>需求分析员，又叫系统分析员、需求工程师、需求经理、分析员。</li><li>需求分析员：<ul><li>对软件项目设计的需求进行收集、分析、记录和验证等工作的主要承担者。 </li><li>用户群体和软件开发团队之间进行需求沟通的桥梁。</li><li>是收集和传播的中心角色。</li></ul></li></ul><h3 id="4-1-1-需求分析员的任务"><a href="#4-1-1-需求分析员的任务" class="headerlink" title="4.1.1 需求分析员的任务"></a>4.1.1 需求分析员的任务</h3><ol><li>定义业务需求</li><li>确定项目承担者和用户类别</li><li>获取需求</li><li>分析需求</li><li>编制需求规格说明书</li><li>为需求建模</li><li>主持对需求的验证</li><li>引导对需求的优先级划分</li><li>管理需求</li></ol><h3 id="4-1-2-需求分析员的基本技能"><a href="#4-1-2-需求分析员的基本技能" class="headerlink" title="4.1.2 需求分析员的基本技能"></a>4.1.2 需求分析员的基本技能</h3><ol><li>倾听的技巧</li><li>交谈和提问的技巧</li><li>分析能力</li><li>协调的能力</li><li>观察能力</li><li>写作能力</li><li>组织能力</li><li>建模能力</li><li>人际交往能力</li><li>创造力</li></ol><h3 id="4-1-3-需求分析员的基本知识"><a href="#4-1-3-需求分析员的基本知识" class="headerlink" title="4.1.3 需求分析员的基本知识"></a>4.1.3 需求分析员的基本知识</h3><ol><li>掌握需求开发和需求管理的知识</li><li>理解项目关系、风险管理和质量工程</li><li>掌握一些领域的知识也是必要的</li></ol><h2 id="4-2-如何培养需求分析员"><a href="#4-2-如何培养需求分析员" class="headerlink" title="4.2 如何培养需求分析员"></a>4.2 如何培养需求分析员</h2><ul><li>需求分析员是培养出来的，而不是训练出来的，主要面向人，而不是面向“软件技术”。</li></ul><h3 id="4-2-1-从用户转为分析员"><a href="#4-2-1-从用户转为分析员" class="headerlink" title="4.2.1 从用户转为分析员"></a>4.2.1 从用户转为分析员</h3><ul><li><p>优点：用户对领域知识和工作环境非常熟悉。</p></li><li><p>缺点：对软件工程知识了解较少，阻碍了与技术人员的交流。</p></li></ul><h3 id="4-2-2-从开发人员转为分析员"><a href="#4-2-2-从开发人员转为分析员" class="headerlink" title="4.2.2 从开发人员转为分析员"></a>4.2.2 从开发人员转为分析员</h3><ul><li>优点：对软件工程知识熟悉，有利于项目的实施。</li><li>缺点：不少开发人员对用户没有耐心，对怎样有效的倾听、协商和引导等知识掌握不多。</li></ul><h3 id="4-2-3-应用领域专家"><a href="#4-2-3-应用领域专家" class="headerlink" title="4.2.3 应用领域专家"></a>4.2.3 应用领域专家</h3><ul><li>优点：精通领域知识，有利于准确的定义需求。</li><li>缺点：应用领域专家根据自己爱好定义需求。系统太复杂、通用性差。</li><li>解决办法：可以让应用领域专家作为用户代言人。</li></ul><h2 id="4-3-创造一个合作的环境"><a href="#4-3-创造一个合作的环境" class="headerlink" title="4.3 创造一个合作的环境"></a>4.3 创造一个合作的环境</h2><p>很多项目中项目承担者之间关系非常紧张，不利于成功开发项目。需求分析员<strong>应引导达成一致</strong>，获得三赢：</p><ul><li>客户对产品感到满意。</li><li>开发组织因产品的成功而感到高兴。</li><li>开发团队成员为自己参加该开发而自豪。</li></ul><h1 id="5-确定产品前景与项目范围"><a href="#5-确定产品前景与项目范围" class="headerlink" title="5 确定产品前景与项目范围"></a>5 确定产品前景与项目范围</h1><h1 id="5-0-基本概念"><a href="#5-0-基本概念" class="headerlink" title="5.0 基本概念"></a>5.0 基本概念</h1><h3 id="5-0-1-业务需求"><a href="#5-0-1-业务需求" class="headerlink" title="5.0.1 业务需求"></a>5.0.1 业务需求</h3><ul><li>代表了需求链中最高层的抽象，为软件系统定义了项目视图和范围。</li></ul><h3 id="5-0-2-功能需求"><a href="#5-0-2-功能需求" class="headerlink" title="5.0.2 功能需求"></a>5.0.2 功能需求</h3><ul><li>必须根据用户需求来考虑，且要与业务需求所设定的目标相一致。</li><li>在确定详细的功能需求之前，必须很好地解决项目的视图和范围问题。</li></ul><h3 id="5-0-3-领域分析（domain-analysis）"><a href="#5-0-3-领域分析（domain-analysis）" class="headerlink" title="5.0.3 领域分析（domain analysis）"></a>5.0.3 领域分析（domain analysis）</h3><ul><li>领域：是指客户希望使用软件的一般性商业或技术领域。</li><li>领域专家：在某个领域中，具有该领域深入知识的人。</li><li>专家系统：具有与该领域专家相同智能的计算机软件系统。</li><li>领域分析：是软件工程师了解背景信息的过程。</li><li>领域分析的工作价值：<ul><li>快速开发</li><li>优化系统</li><li>扩展预测</li></ul></li></ul><h3 id="5-0-4-软件项目的类型分析"><a href="#5-0-4-软件项目的类型分析" class="headerlink" title="5.0.4 软件项目的类型分析"></a>5.0.4 软件项目的类型分析</h3><ul><li>可以根据项目开始时，软件是否存在以及需求是否存在来划分项目的类型，如图5-1，可以分为四种情况：</li></ul><p><img src="http://img.fdchen.host/%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B.png" alt="项目的四种类型"></p><center>图5-1 项目的四种类型</center><ol><li>在A和B项目中，开发小组要从头开发的新的软件。有时称为零起点（green field development），即系统从头开始构建，要从头开发新的软件。</li><li>在C和D项目中，开发小组逐步改进一个现有的系统，这种情况是常见的。</li><li>在A和C项目中，开发小组必须确定软件的需求。必须明白客户要求解决的问题，从而找到最好的方法去解决问题。</li><li>在B和D项目中，客户要求开发小组设计和实现特定的要求，客户的机构已经做好了需求分析。</li></ol><h2 id="5-1-通过业务需求定义前景"><a href="#5-1-通过业务需求定义前景" class="headerlink" title="5.1 通过业务需求定义前景"></a>5.1 通过业务需求定义前景</h2><h3 id="5-1-1-项目视图"><a href="#5-1-1-项目视图" class="headerlink" title="5.1.1 项目视图"></a>5.1.1 项目视图</h3><ul><li>描述了产品所涉及的各个方面和最终所具有的功能。</li></ul><h3 id="5-1-2-项目范围"><a href="#5-1-2-项目范围" class="headerlink" title="5.1.2 项目范围"></a>5.1.2 项目范围</h3><ul><li>描述了产品应包括的部分和不应包括的部分。</li><li>说明了在包括的部分与不包括的部分之间的界线。</li></ul><h2 id="5-2-视图和范围文档"><a href="#5-2-视图和范围文档" class="headerlink" title="5.2 视图和范围文档"></a>5.2 视图和范围文档</h2><h3 id="5-2-1-基本概念"><a href="#5-2-1-基本概念" class="headerlink" title="5.2.1 基本概念"></a>5.2.1 基本概念</h3><p>项目视图和范围文档，包括：</p><ul><li>业务机遇的描述、项目的视图和目标、 产品适用范围和局限性的陈述、客户的特点、项目优先级别和项目成功因素的描述。</li><li>是一个相对简短的文档。</li></ul><h3 id="5-2-2-项目视图和范围文档模板"><a href="#5-2-2-项目视图和范围文档模板" class="headerlink" title="5.2.2 项目视图和范围文档模板"></a>5.2.2 项目视图和范围文档模板</h3><ol><li><p>业务需求</p><p>1.1 背景</p><p>1.2 业务机遇</p><p>1.3 业务目标</p><p>1.4 客户或市场需求</p><p>1.5 提供给客户的价值</p><p>1.6 业务风险</p></li><li><p>项目视图的解决方案</p><p>2.1 项目视图陈述</p><p>2.2 主要特性</p><p>2.3 假设和依赖环境</p></li><li><p>范围和局限性</p><p>3.1 首次发行的范围</p><p>3.2 随后发行的范围</p><p>3.3 局限性和专用性</p></li><li><p>业务环境</p><p>4.1 客户概貌</p><p>4.2 项目优先级</p></li><li><p>产品成功的因素</p></li></ol><h2 id="5-3-关联图"><a href="#5-3-关联图" class="headerlink" title="5.3 关联图"></a>5.3 关联图</h2><ol><li><p>关联图（0层DFD） ：确定了通过某一接口与系统相连的外部实体——有时，称为“端点”，以及外部实体和系统之间的数据流和物流。我们把关联图，作为结构化分析方法，形成数据流图的最高抽象层。 </p></li><li><p>可以把关联图，写入项目视图和范围文档，或软件需求规格说明中，或者作为系统数据流模型的一部分。</p></li></ol><h2 id="5-4-保证范围的适度"><a href="#5-4-保证范围的适度" class="headerlink" title="5.4 保证范围的适度"></a>5.4 保证范围的适度</h2><p>范围扩展，存在两个主要问题：</p><ol><li>全部的工作，必须重新进行，以适应变化。</li><li>当项目的范围增大时，如果没有调整原先所分配的资源和时间，则属性会遭到破坏。</li></ol><h1 id="6-获取客户的需求"><a href="#6-获取客户的需求" class="headerlink" title="6 获取客户的需求"></a>6 获取客户的需求</h1><h2 id="6-0-征求客户的意见，必须采取以下几步"><a href="#6-0-征求客户的意见，必须采取以下几步" class="headerlink" title="6.0 征求客户的意见，必须采取以下几步"></a>6.0 征求客户的意见，必须采取以下几步</h2><ol><li>明确项目用户需求的来源。</li><li>明确使用该产品的不同类型的用户。</li><li>与产品不同用户类的代表进行沟通。</li><li>遵从项目的最终决策者的意见。</li></ol><h2 id="6-1-需求的来源"><a href="#6-1-需求的来源" class="headerlink" title="6.1 需求的来源"></a>6.1 需求的来源</h2><p>软件需求的典型来源：</p><ol><li><p>访问并与有潜力的用户探讨</p></li><li><p>把对目前的或竞争产品的描述，写成文档</p></li><li><p>系统需求规格说明</p></li><li><p>对当前系统的问题分析，并增强要求</p></li><li><p>市场调查和用户问卷调查</p></li><li><p>观察正在工作的用户</p></li><li><p>用户工作的情景分析</p></li><li><p>事件和响应</p></li></ol><h2 id="6-2-用户类"><a href="#6-2-用户类" class="headerlink" title="6.2 用户类"></a>6.2 用户类</h2><ul><li>产品的用户在很多方面存在着差异，不同用户，有不同需求，根据这些差异，可以把用户分成用户小组，称为用户类。</li></ul><h2 id="6-3-寻找用户代言人"><a href="#6-3-寻找用户代言人" class="headerlink" title="6.3 寻找用户代言人"></a>6.3 寻找用户代言人</h2><ol><li><p>在获取用户需求时，要挑选合适的用户，来代表各类用户的需求。即：选择用户代言人。</p></li><li><p>用户代言人必须参加整个软件开发。</p></li><li><p>在用户代言人的参与下，广泛了解不同用户类和不同的专业层次的需求。</p></li></ol><h2 id="6-4-用户代言人"><a href="#6-4-用户代言人" class="headerlink" title="6.4 用户代言人"></a>6.4 用户代言人</h2><h3 id="6-4-0-基本概念"><a href="#6-4-0-基本概念" class="headerlink" title="6.4.0 基本概念"></a>6.4.0 基本概念</h3><ol><li>每一个工程项目，都包括为数不多的关键参与者，这些参与者来自相关的某方面用户团体，并提供客户的需求。我们称这些人为用户代言人或项目协调者。</li><li>用户代言人，可能是软件公司的一员 。</li><li>用户代言人要求必须对应用领域有彻底的了解，并在软件方面具有足够的经验。</li></ol><h3 id="6-4-1-外部用户代言人"><a href="#6-4-1-外部用户代言人" class="headerlink" title="6.4.1 外部用户代言人"></a>6.4.1 外部用户代言人</h3><ul><li>公司内部用户代言人比较困难；</li><li>公司外部用户代言人，如聘请一个具有丰富阅历的用户代言人，同时，为了获得更多的信息，有时需要给用户代言人，一些经济上的鼓励。</li></ul><h3 id="6-4-2-对用户代言人的要求"><a href="#6-4-2-对用户代言人的要求" class="headerlink" title="6.4.2 对用户代言人的要求"></a>6.4.2 对用户代言人的要求</h3><p>表6-1列出了用户代言人要进行的一些工作，不是每个代言人都需要做所有这些工作，可以该表为起点与每位代言人协商他的职责。</p><center>表6-1 用户代言人可能的活动</center><table><thead><tr><th>类别</th><th>工作</th></tr></thead><tbody><tr><td>计划</td><td>推敲产品的范围和限制<br />定义与其他系统的接口<br />评估新系统对业务操作的影响<br />定义从现有系统到新系统的过渡方案</td></tr><tr><td>需求</td><td>收集其他用户的需求<br />开发使用范例和用例<br />解决用户提出的需求种的冲突<br />确定实现的优先级<br />确定质量和性能需求<br />评估用户界面的原型</td></tr><tr><td>确认和验证</td><td>评审需求文档<br />定义用户接受系统的标准<br />根据使用情况开发测试用例<br />提供测试数据集<br />执行beta测试（一种验收测试）</td></tr><tr><td>用户辅助</td><td>编写用户手册和帮助文档<br />准备培训资料<br />向同行演示产品</td></tr><tr><td>变更控制</td><td>评估缺陷修改请求，确定其优先级<br />评估改进请求，确定其优先级<br />评估需求变更对用户和业务流程的影响<br />参与变更决策</td></tr></tbody></table><h3 id="6-4-3-设置多位用户代言人"><a href="#6-4-3-设置多位用户代言人" class="headerlink" title="6.4.3 设置多位用户代言人"></a>6.4.3 设置多位用户代言人</h3><p>一个人很难描述出所有用户对应用程序的需求。要从不同用户类中各挑选一名用户代言人。以图6-1为例，有3名分析员和这4名用户代言人一起工作、收集、分析并记录各用户类的需求。因为购买者和健康安全人员这两个用户类人数和需求都很少，所以由同一位需求分析员负责与这两类的用户代言人合作。最后由一名需求分析员将所有需求整理为一份需求规格说明。</p><p><img src="http://img.fdchen.host/%E5%8C%96%E5%AD%A6%E5%88%B6%E5%93%81%E8%B7%9F%E8%B8%AA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E4%BB%A3%E8%A8%80%E4%BA%BA%E6%A8%A1%E5%9E%8B.png" alt="化学制品跟踪系统中的用户代言人模型"></p><center>图6-1 化学制品跟踪系统中的用户代言人模型</center><h2 id="6-5-谁来做决策？"><a href="#6-5-谁来做决策？" class="headerlink" title="6.5 谁来做决策？"></a>6.5 谁来做决策？</h2><p>下面给出一些在项目中可能发生的决策问题：</p><ol><li>如果个别用户，不能在需求方面达成一致的意见，那么必须由产品代表者作出决策。 </li><li>如果不同的用户类，有不一致的需求，那么必须决策出，满足哪一类用户的需求更为重要。</li><li>运用项目的业务目标来决定那些是你最核心的客户。</li><li>有时，客户经理所提出的需求与他所在部门的真正用户提出的需求相冲突。</li><li>当开发者想象中的产品与客户需求冲突时，通常应该由客户作出决策。</li><li>如果市场部门所提出的需求与开发者所想要开发的系统发生冲突时，具体情况，具体处理。</li><li>没有简单的正确答案。</li></ol><h2 id="6-6-总结"><a href="#6-6-总结" class="headerlink" title="6.6 总结"></a>6.6 总结</h2><h3 id="6-6-1-准备调查"><a href="#6-6-1-准备调查" class="headerlink" title="6.6.1 准备调查"></a>6.6.1 准备调查</h3><ol><li><p>首先，需求分析员应当起草需求调查问题表，将调查重点锁定在该问题表内，否则调查工作将变得漫无边际。</p><ul><li>问题表可以有多份，随着调查的深入，问题表将不断地被细化。</li><li>根据经验，用户通常没有耐心回答复杂的论述题，所以问题表应当以“选择题”和“是非题”为主。</li><li>制定问题表最简便的方法就是从《用户需求说明书》的模板中提取需求问题</li></ul></li><li><p>其次，需求分析员应当确定需求调查的方式，例如：</p><ul><li>与用户交谈，向用户提问题。</li><li>向用户群体发调查问卷。</li><li>参观用户的工作流程，观察用户的操作。</li><li>与同行、专家交谈，听取他们的意见。</li><li>分析已经存在的同类软件产品，提取需求。</li><li>从行业标准、规则中提取需求。</li><li>从Internet上搜查相关资料。</li></ul></li><li><p>最后，需求分析员与被调查者建立联系，确定调查的时间、地点、人员等，撰写需求调查计划。要特别留意的是不要漏掉典型的用户。</p></li></ol><h3 id="6-6-2-执行调查"><a href="#6-6-2-执行调查" class="headerlink" title="6.6.2 执行调查"></a>6.6.2 执行调查</h3><ol><li>准备工作完毕后，需求分析员按照计划执行调查。在调查过程中随时记录（或存储）需求信息 。</li><li>需求分析员与用户面谈时应当注意以下事项：<ul><li>如果与用户约好了时间，切勿迟到或早退。要注意礼节，尽可能获得用户的好感，并为下次打扰他们埋下伏笔。</li><li>需求分析员应事先了解用户的身份、背景，以便随机应变。IT人士不可貌相，有些大企业的领导其外表很土气。如果你路上碰到他，以为是个勤杂工，说：“喂，老师傅，来帮我拎东西。”也许这笔生意就泡汤了。</li></ul></li><li>需求调查，应该先了解宏观问题，再了解细节问题。</li><li>如果双方气氛融洽，可以采用灵活的访谈形式，轻易不要打断用户的谈话。当双方对某些问题的交流合乎逻辑地结束后，即可继续讨论问题表中的其它问题。</li><li>尽可能避免为用户添麻烦，但也不能怕给用户添麻烦而降低需求调查的力度。</li><li>避免片面地听取某些用户的需求而忽视其它用户的需求。</li></ol><h3 id="6-6-3-《用户需求说明书》与《软件需求规格说明书》的主要区别与联系"><a href="#6-6-3-《用户需求说明书》与《软件需求规格说明书》的主要区别与联系" class="headerlink" title="6.6.3 《用户需求说明书》与《软件需求规格说明书》的主要区别与联系"></a>6.6.3 《用户需求说明书》与《软件需求规格说明书》的主要区别与联系</h3><ol><li>前者主要采用自然语言（和应用域术语）来表达用户需求，其内容相对于后者而言比较粗略，不够详细。</li><li>后者是前者的细化，更多地采用计算机语言和图形符号来刻画需求，产品需求是软件系统设计的直接依据。</li><li>两者之间可能并不存在一一影射关系，因为软件开发商会根据产品发展战略、企业当前状况适当地调整产品需求，例如用户需求可能被分配到软件的数个版本中。</li><li>软件开发人员应当依据《软件需求规格说明书》来开发当前产品。</li></ol><h1 id="7-聆听客户的需求"><a href="#7-聆听客户的需求" class="headerlink" title="7 聆听客户的需求"></a>7 聆听客户的需求</h1><p>需求获取是软件工程的核心任务，是在问题及其最终解决方案之间架设桥梁的第一步。 一旦理解了需求，分析者、开发者和客户就能探索出描述这些需求的多种解决方案。</p><h2 id="7-1-获取需求"><a href="#7-1-获取需求" class="headerlink" title="7.1 获取需求"></a>7.1 获取需求</h2><ol><li>需求获取在软件开发中，最重要、最关键，也是最困难、最易出错。</li><li>需求获取只有通过客户和开发者的合作，才能成功。它需要广泛的交流。为了方便清晰地进行交流，要列出的交流小组成员。</li><li>需求获取并不是客户所说的需求的简单誊本。</li><li>研究表明： <ul><li>一个成功的项目，在开发者和客户之间，采用了更多的交流方式。 </li><li>及早并经常进行座谈讨论，是需求获取成功的一个关键途径。</li></ul></li><li>需求获取的方式：面谈、小组讨论、解决冲突等</li></ol><h2 id="7-2-需求获取讨论会"><a href="#7-2-需求获取讨论会" class="headerlink" title="7.2 需求获取讨论会"></a>7.2 需求获取讨论会</h2><p>下列提示可用来指导有效的需求获取会议：</p><ol><li>建立基本规则</li><li>不超出范围——项目范围</li><li>使用活动挂图来捕获以后再考虑的一些，如：条目-停车场</li><li>时间盒讨论，为每一个讨论主题分配一个固定的时间段</li><li>保持较小的团队规模并找到合适的参与者</li><li>取保每个人都积极地参与讨论</li></ol><h2 id="7-3-将客户的意见归类"><a href="#7-3-将客户的意见归类" class="headerlink" title="7.3 将客户的意见归类"></a>7.3 将客户的意见归类</h2><p>用户给出需求不可能是一个简洁、完整、组织良好的需求清单。分析者必须把这些需求，分成不同的类型。这样就能合理地编写信息文档并把它们用最合适的方式表达。除以下情形之外，需求可分为9个类别。</p><p>不能归于9个类别的需求可能属于下列情形之一：</p><ol><li>与软件开发无关的需求。</li><li>项目所受的限制条件。</li><li>假设。</li><li>对数据的需求。</li><li>关于历史、背景或用于描述的附件信息。</li></ol><h3 id="7-3-1-业务需求"><a href="#7-3-1-业务需求" class="headerlink" title="7.3.1 业务需求"></a>7.3.1 业务需求</h3><ul><li>业务需求描述客户和开发组织希望从产品中获得的商业利益，如财务收入，市场份额等。</li></ul><h3 id="7-3-2-用例或场景"><a href="#7-3-2-用例或场景" class="headerlink" title="7.3.2 用例或场景"></a>7.3.2 用例或场景</h3><ul><li>用例是对用户目标或用户需要执行的业务工作的一般性描述。</li><li>使用场景则是某个用例的一条特定路径。</li></ul><h3 id="7-3-3-业务规则"><a href="#7-3-3-业务规则" class="headerlink" title="7.3.3 业务规则"></a>7.3.3 业务规则</h3><ul><li>有关业务过程的操作原则。</li></ul><h3 id="7-3-4-功能性需求"><a href="#7-3-4-功能性需求" class="headerlink" title="7.3.4 功能性需求"></a>7.3.4 功能性需求</h3><ul><li>功能性需求描述了系统在特定条件下表现得可观察的行为，以及系统允许用户执行的操作。</li></ul><h3 id="7-3-5-质量属性"><a href="#7-3-5-质量属性" class="headerlink" title="7.3.5 质量属性"></a>7.3.5 质量属性</h3><ul><li>质量属性是对系统实施某种行为时，或者让用户执行某种操作时，系统表现如何的陈述。</li></ul><h3 id="7-3-6-外部接口需求"><a href="#7-3-6-外部接口需求" class="headerlink" title="7.3.6 外部接口需求"></a>7.3.6 外部接口需求</h3><ul><li>这类需求描述了系统与外部世界的联系。</li></ul><h3 id="7-3-7-约束"><a href="#7-3-7-约束" class="headerlink" title="7.3.7 约束"></a>7.3.7 约束</h3><ul><li>对设计和实现的约束（constraint）合理地限制了开发人员可用地选择。</li></ul><h3 id="7-3-8-数据定义"><a href="#7-3-8-数据定义" class="headerlink" title="7.3.8 数据定义"></a>7.3.8 数据定义</h3><ul><li>当客户描述一个数据项或复杂的业务数据结构的格式、允许值或缺省值时，这种描述就是数据定义。</li></ul><h3 id="7-3-9-解决思路"><a href="#7-3-9-解决思路" class="headerlink" title="7.3.9 解决思路"></a>7.3.9 解决思路</h3><ul><li>很多被用户作为需求提出来的意见都属于解决思路，而非真正的需求。</li></ul><h2 id="7-4-需求获取中的注意事项"><a href="#7-4-需求获取中的注意事项" class="headerlink" title="7.4 需求获取中的注意事项"></a>7.4 需求获取中的注意事项</h2><ol><li>在需求获取的过程中，可能会发现以前的产品范围定义存在误差， 不是太大就是太小 。<ul><li>如果范围太大，此时获取过程，将会拖延。</li><li>如果范围太小，以致不能提供一个令人满意的产品</li></ul></li><li>需求的获取，应该把重点放在“做什么”。</li></ol><h2 id="7-5-寻找遗漏的需求"><a href="#7-5-寻找遗漏的需求" class="headerlink" title="7.5 寻找遗漏的需求"></a>7.5 寻找遗漏的需求</h2><p>在需求获取的过程中，遗漏的需求是不可避免的。应用下列方法可以发现遗漏的需求：</p><ol><li>将高层需求分解；</li><li>让用户类都提出意见；</li><li>跟踪系统的需求、用例、事件-响应表及业务规则等；</li><li>检查边界值，查找被遗漏的需求；</li><li>用多种方法表达需求信息；</li><li>应用CRUDL矩阵；</li></ol><p><img src="http://img.fdchen.host/%E7%94%A8%E4%BA%8E%E5%8C%96%E5%AD%A6%E5%93%81%E8%B7%9F%E8%B8%AA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84CRUDL%E5%AE%9E%E4%BD%93%E7%94%A8%E4%BE%8B%E7%9F%A9%E9%98%B5.png" alt="用于化学品跟踪管理系统的CRUDL实体/用例矩阵"></p><center>图7-1 用于化学品跟踪管理系统的CRUDL实体/用例矩阵</center><h2 id="7-6-如何判断需求获取是否已完成"><a href="#7-6-如何判断需求获取是否已完成" class="headerlink" title="7.6 如何判断需求获取是否已完成"></a>7.6 如何判断需求获取是否已完成</h2><p>下列的提示，可能标志需求获取的过程完成：</p><ol><li>如果用户不能想出更多的使用实例，也许你就完成了收集需求的工作。</li><li>如果用户提出新的使用实例，但你可以从其它使用实例的相关功能需求中，获得这些新的使用实例，这时也许你就完成了收集需求的工作。</li><li>如果用户开始重复原先讨论过的问题，此时，也许你就完成了收集需求的工作。</li><li>如果所提出的新需求，比你已确定的需求的优先级都低时，也许你就完成了收集需求的工作。</li><li>如果用户提出对将来产品的要求，而不是现在我们讨论的特定产品，也许你就完成了收集需求的工作。</li></ol><h1 id="8-理解用户需求"><a href="#8-理解用户需求" class="headerlink" title="8 理解用户需求"></a>8 理解用户需求</h1><ul><li>需求分析员们一直利用使用场景（usage scenario）来获取需求。场景是对系统的单个使用实例的描述。这种以使用场景为中心的方法称为用例法。</li><li>实时系统经常使用的一种需求获取方法是列出系统必须响应的外部事件以及相应的系统响应。</li></ul><h2 id="8-1-用例法"><a href="#8-1-用例法" class="headerlink" title="8.1 用例法"></a>8.1 用例法</h2><h3 id="8-1-0-基本概念"><a href="#8-1-0-基本概念" class="headerlink" title="8.1.0 基本概念"></a>8.1.0 基本概念</h3><ul><li><strong>用例：</strong>描述了系统与外部角色之间的一系列交互。</li><li><strong>角色：</strong>指与系统交互以实现某种目的的人、软件系统或硬件设备。</li><li><strong>用例法的目标：</strong>描述用户需要通过系统执行的所有工作。</li><li><strong>用例图：</strong>提供了对用户需求的高级可视化表示。</li></ul><h3 id="8-1-1-用例与使用场景"><a href="#8-1-1-用例与使用场景" class="headerlink" title="8.1.1 用例与使用场景"></a>8.1.1 用例与使用场景</h3><ol><li>用例描述中的基本内容包括：<ul><li>唯一的标识</li><li>一个用例名，简要地说明用户的任务，采用“动词+对象”的形式，如“下订单”。</li><li>用自然语言书写的简短的文字描述。</li><li>一组<strong>前置条件</strong>，只有满足这些条件才能使用用例。</li><li><strong>后置条件</strong>，描述用例成功完成后的系统状态。</li><li>一组带编号的步骤，描述从前置条件到后置条件过程中，系统与角色间的一系列会话步骤与交互。</li></ul></li><li><strong>主干过程：</strong>每个用例都有一个场景被确定为时间的主干过程，也称为主过程、基本过程、普通流、主场景、主要的成功场景和快乐之路（happy path）。</li><li><strong>分支过程：</strong>用例中的其他有效场景则被描述为分支过程或次要场景。</li><li><strong>子用例：</strong>有时多个用例都包含一组相同的步骤。为了避免在每个用例中都重复这些步骤，可以定义一个单独的用例来包括这些相同的功能，然后由其他用例来包含这个子用例。</li><li><strong>异常：</strong>妨碍任务成功的条件被称为异常。如果在需求获取过程中未能描述如何处理异常，就可能有两种结果：<ul><li>开发者尽量准确地推测出如何处理这些异常。</li><li>当用户遇到出错条件时，系统会发生故障，因为不曾有人想到过这种可能。</li></ul></li><li>系统崩溃通常不在用户的需求列表中。异常有时候会被视为一种分支过程，但最好还是将他们区别开来。</li><li><strong>宏用例：</strong>用户可以将一系列用例串联成一个宏用例来描述大型的任务。</li></ol><h3 id="8-1-2-确定用例"><a href="#8-1-2-确定用例" class="headerlink" title="8.1.2 确定用例"></a>8.1.2 确定用例</h3><p>可采用以下几种方式确定用例：</p><ol><li>首先明确有哪些角色，然后确定他们各自参与了哪些业务过程。</li><li>确定哪些外部事件是系统必须响应的，将它们与参与的角色和特定用例关联起来。</li><li>用特定场景来描述业务过程，将这些场景归纳为用例，并确定每项用例设计哪些角色。</li><li>从已有的功能性需求推导出可能的用例。如果不能从某些功能性需求推到出任何用力，则要1考虑是否真正需要它们。</li></ol><h3 id="8-1-3-编写用例"><a href="#8-1-3-编写用例" class="headerlink" title="8.1.3 编写用例"></a>8.1.3 编写用例</h3><ol><li>基本用例是比具体用例更高一层的抽象。后者讨论用户与系统交互时采用的具体动作。举例：<ul><li>具体：输入化学药品的标识号。</li><li>基本：指定所需的化学品。</li></ul></li><li>明确用例边界：检查用例的描述时，必须确定前置条件和后置条件准确界定了用例的范围，即用例的前置条件必须在启动第一个步骤前就已经满足，最后一个步骤刚好满足后置条件。</li></ol><h3 id="8-1-4-用例与功能性需求"><a href="#8-1-4-用例与功能性需求" class="headerlink" title="8.1.4 用例与功能性需求"></a>8.1.4 用例与功能性需求</h3><ol><li><strong>功能性需求</strong>是让用户得以执行用例并达成目标的系统行为。</li><li><strong>用例</strong>是从角色的角度来描述系统行为，省略了很多细节。</li><li>要根据自己记录和管理项目软件需求的方式来选择最合适的方法。<ul><li><strong>只使用用例：</strong>一种可能的办法是把功能性需求包含在每个用例描述中，不过还是需要一个单独的补充说明来记录非功能性需求，以及所有不与特定用例相关的功能性需求。对于出现在多个用例中的需求，应该使用交叉引用而不是重复需求。</li><li><strong>用例与软件需求规格说明：</strong>还有一种方法是写一个相当简单的用例描述，同时把从用例中推导出的功能性需求记录在软件需求规格说明中。如果采用这种方法，你需要在用例与相关的功能性需求之间建立起可追溯关系。</li><li><strong>只使用软件需求规格说明：</strong>第三种方法是根据用例或特性来组织软件需求规格说明，并把用例和功能性需求都记录在软件需求规格说明中。这种方式不需单独的用例文档。但是需要标出重复的功能性需求，或者对每项功能性需求只声明一次，当该需求再次出现与其他用例中时，都引用最初的需求声明</li></ul></li></ol><h3 id="8-1-5-用例的好处"><a href="#8-1-5-用例的好处" class="headerlink" title="8.1.5 用例的好处"></a>8.1.5 用例的好处</h3><ul><li>用例能够帮助需求分析员和开发人员理解用户业务和应用领域。</li><li>根据用例法可推导出让用户能够执行某些已知任务的功能性需求，这有助于避免出现“孤立功能”，这类在需求获取过程中看似很好的功能其实并没人使用，因为它们与用户的任务没有直接关系。</li><li>用例法还有技术方面的好处，能够揭示重要的域对象，以及相互间的职责。</li></ul><h3 id="8-1-6使用用例时应避免的问题"><a href="#8-1-6使用用例时应避免的问题" class="headerlink" title="8.1.6使用用例时应避免的问题"></a>8.1.6使用用例时应避免的问题</h3><ol><li>用例过多</li><li>用例过于复杂</li><li>在用例中包含用户界面设计</li><li>在用例中包含数据定义</li><li>用户无法理解用例</li><li>尚不存在的新业务流程</li><li>滥用包含和扩充关系</li></ol><h2 id="8-2-事件-响应表"><a href="#8-2-事件-响应表" class="headerlink" title="8.2 事件-响应表"></a>8.2 事件-响应表</h2><ol><li>事件是在用户环境中发生的某种变化或活动，它能激发软件系统做出响应。</li><li>事件-响应表（也称为事件表或事件列表）列出了所有这类事件和系统应对每个事件做出的反应。</li><li>事件-响应表特别适用于实时控制系统。</li><li>事件-响应表记录的时用户-需求层的信息。</li><li>描述事件的要素属于要素级描述，描述实现的细节属于实现级的描述。</li></ol><h1 id="9-遵守规则"><a href="#9-遵守规则" class="headerlink" title="9 遵守规则"></a>9 遵守规则</h1><h2 id="9-1-业务的规则"><a href="#9-1-业务的规则" class="headerlink" title="9.1 业务的规则"></a>9.1 业务的规则</h2><ul><li>对业务的某个方面进行定义或约束的语句称为业务规则。</li></ul><h3 id="9-1-1-事件"><a href="#9-1-1-事件" class="headerlink" title="9.1.1 事件"></a>9.1.1 事件</h3><ul><li>是对业务的真实陈述，常常描述重要业务术语的关联。</li></ul><h3 id="9-1-2-约束"><a href="#9-1-2-约束" class="headerlink" title="9.1.2 约束"></a>9.1.2 约束</h3><ul><li>限制了系统或它的用户可以执行哪些操作。</li></ul><h3 id="9-1-3-动作触发规则"><a href="#9-1-3-动作触发规则" class="headerlink" title="9.1.3 动作触发规则"></a>9.1.3 动作触发规则</h3><ul><li>在特定条件下触发某个动作的规则。</li></ul><h3 id="9-1-4-计算"><a href="#9-1-4-计算" class="headerlink" title="9.1.4 计算"></a>9.1.4 计算</h3><ul><li>有一类业务规则定义使用特定数学公式或算法进行计算。</li></ul><h3 id="9-1-5-推论"><a href="#9-1-5-推论" class="headerlink" title="9.1.5 推论"></a>9.1.5 推论</h3><ul><li>是根据某个条件的真实性得出得出新事物的规则，也称为推导出的知识。</li></ul><h2 id="9-2-在文档中记录业务规则"><a href="#9-2-在文档中记录业务规则" class="headerlink" title="9.2 在文档中记录业务规则"></a>9.2 在文档中记录业务规则</h2><ul><li>业务规则会影响多个应用程序，必要时建立业务规则数据库。</li></ul><h2 id="9-3-业务规则与需求"><a href="#9-3-业务规则与需求" class="headerlink" title="9.3 业务规则与需求"></a>9.3 业务规则与需求</h2><ul><li>可以通过研讨会发现业务规则，通过从不同角度提问发现业务规则，如图9-1：</li></ul><p><img src="http://img.fdchen.host/%E9%80%9A%E8%BF%87%E4%BB%8E%E4%B8%8D%E5%90%8C%E8%A7%92%E5%BA%A6%E6%8F%90%E9%97%AE%E5%8F%91%E7%8E%B0%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99.png" alt="通过从不同角度提问发现业务规则"></p><center>图9-1 通过从不同角度提问发现业务规则</center><h1 id="10编写需求文档"><a href="#10编写需求文档" class="headerlink" title="10编写需求文档"></a>10编写需求文档</h1><ul><li>需求开发的最终成果是：客户和开发小组对将要开发的产品，达成一致协议。这一协议综合了业务需求、用户需求和软件功能需求。而使用用例文档，则只包含了用户需求。必须应用文档把他们表示出来。即编写软件需求规格说明。</li><li>编写软件需求规格说明，有三种方法：<ul><li><strong>文档：</strong>用结构合理的自然语言来精心编写需求文档。</li><li><strong>图形化模型：</strong>这些模型可以描绘转换过程、系统状态和他们之间的变化、数据关系、逻辑流或者对象类及其关系。</li><li><strong>形式化规格说明：</strong>使用数学上精确的形式逻辑语言来定义需求。</li></ul></li></ul><h2 id="10-1-软件需求规格说明"><a href="#10-1-软件需求规格说明" class="headerlink" title="10.1 软件需求规格说明"></a>10.1 软件需求规格说明</h2><h3 id="10-1-0-基本概念"><a href="#10-1-0-基本概念" class="headerlink" title="10.1.0 基本概念"></a>10.1.0 基本概念</h3><ol><li>软件需求规格说明，有时也称为功能规格说明、产品规格说明、需求文档或系统规格说明。</li><li>软件需求规格说明精确地阐述了一个软件系统必须提供的功能和性能以及它必须遵守的约束。</li><li>软件需求规格说明是所有后续的项目规划、设计和编码的基础，也是系统测试和用户文档的基础。</li><li>必须去使用软件规格说明的受众有以下几类：<ul><li>客户、市场部和销售人员需要了解他们期望的得到什么样的产品。</li><li>项目经理根据产品描述来估计项目的进度、工作量和所需资源。</li><li>开发团队根据软件需求规格说明了解需要开发什么样的产品。</li><li>测试小组使用软件需求规格说明来开发测试计划、测试用例和测试过程。</li><li>软件维护和支持人员根据软件需求规格说明了解产品的每一部分的功能是什么。</li><li>文档编写人员根据软件需求规格说明和用户界面设计来编写用户手册和帮助屏幕。</li><li>培训人员根据软件规格说明和用户文档来编写培训材料。</li><li>公司律师要确保该需求遵守相应的法律法规。</li><li>分包商根据软件需求规格说明来进行工作，当然这要在合法的基础上。</li></ul></li><li>有关需求可读性的建议：<ul><li>对节、小节和单个需求的标记格式必须一致。</li><li>在右边部分留下文本注释区，而不要在两边全部写满。</li><li>允许不受限制地使用空白。</li><li>灵活明智地使用各种可视强调标志（例如，黑体、下划线、斜体和不同字体）。</li><li>创建目录表，也许还需要创建索引，这有助于读者找到他们所需要的信息。</li><li>对所有图和表及进行编号，并给出标题，根据编号来引用这些图和表。</li><li>使用字处理程序的交叉引用功能来引用文档中的其他位置，而不是通过页码或节号进行引用。</li><li>使用超链接使读者可以跳跃到软件需求规格说明或其他文档的相关部分。</li><li>引用合适的模板来组织所有的必要信息。</li></ul></li><li>软件需求规格说明的要求：<ul><li>作为产品需求的最终成果：<ul><li>必须具有综合性 </li><li>必须包括所有的需求</li></ul></li><li>如果任何所期望的功能或非功能需求，未写入软件需求规格说明，那么它将不能在产品中出现。</li><li>必须在开始设计和构造之前，编写出整个产品的软件需求规格说明。</li><li>针对每个需求的集合，必须有一个基准协议。<ul><li>基准：是指正在开发的软件需求规格说明，向已通过评审的软件需求规格说明的过渡过程。</li><li>必须通过项目中，所定义的变更控制过程，来更改基准软件需求规格说明。</li></ul></li></ul></li></ol><h2 id="10-1-1-需求的标识"><a href="#10-1-1-需求的标识" class="headerlink" title="10.1.1 需求的标识"></a>10.1.1 需求的标识</h2><ol><li>序列号：最简单的方法时赋予每个需求一个唯一的标识号，如UR-9或SRS-43。如果删除某个需求，则其序列号就不能再使用。这种方式并不能提供任何相关需求再逻辑上或层次上的信息，而且其标识也不能提供有关每个需求内容的信息。</li><li>层次型编号：如3.1.2等。这种方案不能产生永久性标识，一种改进是对需求中的主要部分进行层次性标号，然后用一个简短文本代码加上一个序列号来标识每个部分中的单个功能性需求。如：“3.5节——编辑功能”，那么这一节中的需求的编号可以是ED-1，ED-2等等。</li><li>层次型文本标签：基于文本的层次型标签方案，如一个需求为“当打印份数大于10份时必须让用户确认”，可标识为Print.ConfirmCopies。<ul><li>优点：具有一定含义，并且不受添加、删除或移动其他需求的影响。</li><li>缺点：比层次型数字编号更加复杂。</li></ul></li></ol><h3 id="10-1-2-处理不完整性"><a href="#10-1-2-处理不完整性" class="headerlink" title="10.1.2 处理不完整性"></a>10.1.2 处理不完整性</h3><ol><li>使用“待确定”（to be determined, TBD）符号来标记这些尚未确定的需求，</li><li>把每个TBD编号，并创建一个TBD列表，这有助于方便地跟踪每个项目。 </li><li>在构造需求集合之前，必须解决所有的TBD问题。如果有TBD问题尚未解决，而又要继续进行开发工作，那么尽可能推迟实现这些需求。</li></ol><h3 id="10-1-3-用户界面和软件需求规格说明"><a href="#10-1-3-用户界面和软件需求规格说明" class="headerlink" title="10.1.3 用户界面和软件需求规格说明"></a>10.1.3 用户界面和软件需求规格说明</h3><p>把用户界面的设计，编入软件需求规格说明。既有好处，也有坏处。</p><ol><li>积极方面：<ul><li>探索潜在的用户界面，有助于精化需求。</li><li>并使用户和系统的交互，对用户和开发人员更具有实在性。</li><li>用户界面的演示，也有助于项目计划的制定和预测。</li></ul></li><li>消极方面：<ul><li>屏幕映像和用户界面机制是解决方案（设计）的描述，而不是需求。</li><li>如果完成了用户界面的设计后,才能确定软件需求规格说明，那么需求开发的过程,将会花费很长的时间</li><li>这将会使那些只关心开发时间的经理、客户或开发人员失去耐心。</li></ul></li><li>一个合理的平衡点：在软件需求规格说明中，加入所选择的用户界面组件的概念映像草图，而在实<br>    现时，并不一定要精确地遵循这些方法。</li></ol><h2 id="10-2-软件需求规格说明模板"><a href="#10-2-软件需求规格说明模板" class="headerlink" title="10.2 软件需求规格说明模板"></a>10.2 软件需求规格说明模板</h2><p>在项目中,应采用标准的软件需求规格说明模板。可以根据项目的需要，来修改标准模板。如果模板中某一特定部分不适合你的项目，那么就在原处保留标题，并注明该项不适用。这将防止,认为是否遗漏了一些重要的部分。</p><ol><li><p>引言.<br>1.1 目的<br>1.2 文档约定<br>1.3 预期的读者和阅读建议<br>1.4 产品的范围<br>1.5 参考文献</p></li><li><p>综合描述<br>2.1 产品的前景<br>2.2 产品的功能<br>2.3 用户类和特征<br>2.4 运行环境<br>2.5 设计和实现上的限制<br>2.6 假设和依赖</p></li><li><p>外部接口需求<br>3.1 用户界面<br>3.2 硬件接口<br>3.3 软件接口<br>3.4 通信接口</p></li><li><p>系统特性<br>4.1 说明和优先级<br>4.2 激励&#x2F;响应序列<br>4.3 功能需求</p></li><li><p>其它非功能需求<br>5.1 性能需求<br>5.2 安全设施需求<br>5.3 安全性需求<br>5.4 软件质量属性<br>5.5 业务规则<br>5.6 用户文档</p></li><li><p>其它需求</p><p>附录A：词汇表<br>附录B：分析模型<br>附录C：待确定问题的列表</p></li></ol><p>每部分对应解释如下：</p><ul><li>引言：引言提出了对软件需求规格说明的纵览，有助于读者理解文档如何编写，且如何阅读和解释。</li><li>综合描述：概述了正在定义的产品以及它所运行的环境、使用产品的用户和已知的限制、假设和依赖。</li><li>外部接口需求：确定可以保证新产品与外部组件正确连接的需求。</li><li>系统特性：选择一种易于理解预期产品的组织方案。</li><li>其他非功能特性：列举出所有非功能需求，而不是外部接口需求和限制。</li><li>其他需求：定义在软件需求规格说明中的其它部分未出现的需求。例如：国际化需求或法律上的需求。</li><li>词汇表：定义所有必要的术语，以便读者可以正确地解释软件需求规格说明。包括：词头和缩写。</li><li>分析模型：包括或涉及到相关的分析模型的位置。例如：数据流程图、类图、状态转换图或实体-关系图。</li><li>待确定问题的列表：编辑一张在软件需求规格说明中待确定问题的列表，其中，每一表项都编上标号，以便于跟踪调查。</li></ul><h2 id="10-3-编写需求文档的原则"><a href="#10-3-编写需求文档的原则" class="headerlink" title="10.3 编写需求文档的原则"></a>10.3 编写需求文档的原则</h2><p>编写优秀的需求文档，没有固定的方法，一般是根据经验进行，应考虑一下几点：</p><ol><li>保持语句和段落的简短。</li><li>采用主动语态的表达方式。</li><li>编写具有正确的语法、拼写和标点的完整句子。</li><li>使用的术语与词汇表中所定义的应该一致。</li><li>需求陈述应该具有一致的样式。</li><li>减少不确定性，避免模糊的、主观的术语。</li><li>避免使用比较性的词汇。</li><li>需求文档，应使用有效的技术和用户术语，而不是计算机专业术语的方式，来编写。</li><li>由于需求的编写是层次化的，因此，可以把顶层不明确的需求，向低层详细分解，直到消除不明确性为止。但不要过于详细，而影响设计。</li><li>必须以相同的详细程度，编写每个需求文档。</li><li>不应该把多个需求集中在一个冗长的叙述段落中。</li><li>文档的编写人员，应考虑用最有效的方法表达每个需求。</li><li>软件需求规格说明中避免使用用有歧义的术语。</li></ol><h2 id="10-4-改进前后的需求"><a href="#10-4-改进前后的需求" class="headerlink" title="10.4 改进前后的需求"></a>10.4 改进前后的需求</h2><ul><li>重申高质量的需求特性：完整性、正确性、可行性、必要性、设定优先级、明确性和可验证性。</li><li>如果不具有这些特征，将会引起混淆，导致将来的返工。</li></ul><h2 id="10-5-数据字典"><a href="#10-5-数据字典" class="headerlink" title="10.5 数据字典"></a>10.5 数据字典</h2><ol><li>概念：定义应用程序中，使用的所有数据元素和结构的含义、类型、数据大小、格式、度量单位、精度以及允许取值范围的共享仓库。</li><li>好处：<ul><li>可以把不同的需求文档和分析模型紧密结合在一起。</li><li>如果所有的开发人员在数据字典上取得一致意见，那么就可以缓和集成性问题。而并不是在每个需求出现的地方定义每一个数据项。</li><li>数据字典的维护独立于软件需求规格说明，并且在产品的开发和维护的任何阶段，各个风险承担者都可以访问数据字典。</li><li>数据字典与数据流图配合，能清楚地表达数据处理的要求。</li></ul></li></ol><h1 id="11-需求的图形化分析"><a href="#11-需求的图形化分析" class="headerlink" title="11 需求的图形化分析"></a>11 需求的图形化分析</h1><p>软件系统中的图形化：</p><p><img src="http://img.fdchen.host/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E5%8C%96.png" alt="软件系统中的图形化"></p><center>图11-1 软件系统中的图形化</center><h2 id="11-1-需求建模"><a href="#11-1-需求建模" class="headerlink" title="11.1 需求建模"></a>11.1 需求建模</h2><ol><li>在需求分析方面或设计方面，是否使用模型取决于建模的目的。在需求开发中通过建立模型有利于理解需求</li><li>模型：描述了问题域的逻辑方面。如：数据组成、事务和转换、现实世界对象和允许的状态等。 方便了项目参与者在系统的某些方面的交流。</li><li>没有一种单一的需求视图能够提供对需求的全面理解，必须在需求中综合使用文本和图形表示法来完整地描述所需的系统。</li><li>分析模型应该补充完善用自然语言编写的需求规格说明，而不是替换它。</li><li>重复是系统建模成功的关键所在。</li></ol><h2 id="11-2-从客户需求到分析模型"><a href="#11-2-从客户需求到分析模型" class="headerlink" title="11.2 从客户需求到分析模型"></a>11.2 从客户需求到分析模型</h2><ol><li>通过认真听取客户如何陈述它们的需求，分析者可以挑选出关键字。这些关键字可以翻译成特定的分析模型元素。</li><li>当把客户输入转变为书面的需求或模型时，还可以根据模型的每个组件回溯到需求部分。</li></ol><h2 id="11-3-数据流图（Data-Flow-Diagram）"><a href="#11-3-数据流图（Data-Flow-Diagram）" class="headerlink" title="11.3 数据流图（Data Flow Diagram）"></a>11.3 数据流图（Data Flow Diagram）</h2><h3 id="11-3-1-基本概念"><a href="#11-3-1-基本概念" class="headerlink" title="11.3.1 基本概念"></a>11.3.1 基本概念</h3><ol><li>是结构化系统分析的基本工具。</li><li>确定了系统的转化过程、系统所操纵的数据或物质的存储。</li><li>可以在一个抽象的广泛范围内表示系统。</li><li>是分层次的，高层数据流图提供一个整体的统览，是对软件需求规格说明的精确、详细叙述的补充。</li><li>描述了功能需求怎样和使用户相结合</li><li>反馈的信息，有助于理解所探讨的任务流，进行提炼加工。</li></ol><h3 id="11-3-2-基本DFD标识符"><a href="#11-3-2-基本DFD标识符" class="headerlink" title="11.3.2 基本DFD标识符"></a>11.3.2 基本DFD标识符</h3><ul><li>矩形用于表示外部实体</li><li>圆表示应用于数据或控件的过程或转换</li><li>箭头表示数据流方向</li><li>平行线表示数据存储</li></ul><h3 id="11-3-3-示例"><a href="#11-3-3-示例" class="headerlink" title="11.3.3 示例"></a>11.3.3 示例</h3><p><img src="http://img.fdchen.host/DFD%E7%A4%BA%E4%BE%8B.png" alt="DFD示例"></p><center>图11-2 DFD示例</center><h2 id="11-4-实体-联系图（Entity-Relationship-Diagram）"><a href="#11-4-实体-联系图（Entity-Relationship-Diagram）" class="headerlink" title="11.4 实体-联系图（Entity-Relationship Diagram）"></a>11.4 实体-联系图（Entity-Relationship Diagram）</h2><h3 id="11-4-1-基本概念"><a href="#11-4-1-基本概念" class="headerlink" title="11.4.1 基本概念"></a>11.4.1 基本概念</h3><ol><li>实体联系图：<ul><li>描绘了系统的数据关系；</li><li>有助于对业务或系统数据组成的理解和交互；</li><li>用一个实体联系图和一个数据字典，来记录数据关系，可以为新的业务过程，提供一个数据组成的概念性框架。</li></ul></li></ol><h3 id="11-4-2-基本ERD元素"><a href="#11-4-2-基本ERD元素" class="headerlink" title="11.4.2 基本ERD元素"></a>11.4.2 基本ERD元素</h3><ul><li><strong>实体</strong>用单名词来命名。用矩形框表示。</li><li>每个实体要用几个<strong>属性</strong>来描述，每个实体的单个实例具有不同的属性值。</li><li><strong>关系</strong>用能描述关系的本质来命名，它确定了一对实体之间在逻辑上和数量上的连接。用菱形框表示。</li></ul><h3 id="11-4-5-示例"><a href="#11-4-5-示例" class="headerlink" title="11.4.5 示例"></a>11.4.5 示例</h3><p><img src="http://img.fdchen.host/ERD%E7%A4%BA%E4%BE%8B.png" alt="ERD示例"></p><center>图11-2 ERD示例</center><h3 id="11-5-状态转换图（State-Transition-Diagram）"><a href="#11-5-状态转换图（State-Transition-Diagram）" class="headerlink" title="11.5 状态转换图（State-Transition Diagram）"></a>11.5 状态转换图（State-Transition Diagram）</h3><h3 id="11-5-1-基本概念"><a href="#11-5-1-基本概念" class="headerlink" title="11.5.1 基本概念"></a>11.5.1 基本概念</h3><ol><li>状态转换图：<ul><li>为状态提供了一个简洁、完整、无二义性的表示。</li><li>表示处理结果可能的状态转换。对于软件系统中只能存在于特定状态的那一部分，可以使用状态转换图来建模。</li><li>有助于开发者理解系统的预期行为。<ul><li>测试者：可以从转换路径的状态转换图中获得测试用例。</li><li>用户：只要稍微学一些符号就可以读懂状态转换图。</li></ul></li></ul></li></ol><h3 id="11-5-2-基本STD元素"><a href="#11-5-2-基本STD元素" class="headerlink" title="11.5.2 基本STD元素"></a>11.5.2 基本STD元素</h3><p><img src="http://img.fdchen.host/STD%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0.png" alt="STD基本元素"></p><center>图11-3 基本STD元素</center><h3 id="11-5-3-示例"><a href="#11-5-3-示例" class="headerlink" title="11.5.3 示例"></a>11.5.3 示例</h3><p><img src="http://img.fdchen.host/STD%E7%A4%BA%E4%BE%8B.png" alt="STD示例"></p><center>图11-4 STD示例</center><h2 id="11-6-对话图（Dialog-Map）"><a href="#11-6-对话图（Dialog-Map）" class="headerlink" title="11.6 对话图（Dialog Map）"></a>11.6 对话图（Dialog Map）</h2><h3 id="11-6-1-基本概念"><a href="#11-6-1-基本概念" class="headerlink" title="11.6.1 基本概念"></a>11.6.1 基本概念</h3><ol><li>对话图（dialog map）：一种状态转换图。</li><li>对话图在较高的抽象层次上表示用户界面的设计，它展示了系统的对话元素及这些元素之间的导航连接，但没有展示详细的屏幕设计。</li><li>在对话图中将每个对话元素表示为一个状态（用矩形框表示），将每个允许的导航选项表示为一个转换（用箭头表示）。触发用户界面导航的条件表示为转换箭头上的文本标签。</li><li>对话图是表示用例中所描述的参与者与系统之间的交互的很好的方法。</li></ol><h3 id="11-6-2-示例"><a href="#11-6-2-示例" class="headerlink" title="11.6.2 示例"></a>11.6.2 示例</h3><p><img src="http://img.fdchen.host/DM%E7%A4%BA%E4%BE%8B.png" alt="DM示例"></p><center>图11-5 DM示例</center><h2 id="11-7-类图（Class-Diagram）"><a href="#11-7-类图（Class-Diagram）" class="headerlink" title="11.7 类图（Class Diagram）"></a>11.7 类图（Class Diagram）</h2><h3 id="11-7-1-基本概念"><a href="#11-7-1-基本概念" class="headerlink" title="11.7.1 基本概念"></a>11.7.1 基本概念</h3><ol><li>类图(class diagram)是用图形方式叙述面向对象分析所确定的类以及它们之间的关系。</li><li>利用面向对象方法开发的产品并不需要特殊的需求开发方法。这是因为需求开发强调用户需要系统做什么以及系统所应包含的功能，而并不关心系统如何做。</li><li>当考虑如何将问题域对象映射到系统对象，并进一步细化每个类的属性和操作时，面向对象技术可以方便需求开发到设计阶段的转换。</li></ol><h3 id="11-7-2-示例"><a href="#11-7-2-示例" class="headerlink" title="11.7.2 示例"></a>11.7.2 示例</h3><p><img src="http://img.fdchen.host/CD%E7%A4%BA%E4%BE%8B.png" alt="CD示例"></p><center>图11-6 CD示例</center><h2 id="11-8-决策表和决策树"><a href="#11-8-决策表和决策树" class="headerlink" title="11.8 决策表和决策树"></a>11.8 决策表和决策树</h2><h3 id="11-8-1-基本概念"><a href="#11-8-1-基本概念" class="headerlink" title="11.8.1 基本概念"></a>11.8.1 基本概念</h3><ol><li>决策表：应用表格的形式进行需求表达。判定表可列出影响系统行为的所有因素的各种取值，并表明对这些因素的每一种组合所期望的系统响应动作。</li><li>决策树：采用一种树形结构表达需求。用树形结构表示动作的各种分支。</li></ol><h3 id="11-8-2-示例"><a href="#11-8-2-示例" class="headerlink" title="11.8.2 示例"></a>11.8.2 示例</h3><ol><li>决策表示例</li></ol><p><img src="http://img.fdchen.host/%E5%86%B3%E7%AD%96%E8%A1%A8%E7%A4%BA%E4%BE%8B.png" alt="决策表示例"></p><center>图11-7 决策表示例</center><p>说明：</p><ul><li>第一行数字表示可能存在的各种需求，包括多种可能性，可以去掉一些不必要可能性，比如当前面行的条件无法满足时，后面行的条件可能无关紧要，此时后面行的可以用“-”表示。</li><li>“T”和“F”表示是否满足对应行的条件。</li><li>“X”表示动作入口，表示当列需求（条件）下系统采取的动作。</li></ul><ol start="2"><li>决策树示例</li></ol><p><img src="http://img.fdchen.host/%E5%86%B3%E7%AD%96%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt="决策树示例"></p><center>图11-8 决策树示例</center><h2 id="11-9-最后的提醒"><a href="#11-9-最后的提醒" class="headerlink" title="11.9 最后的提醒"></a>11.9 最后的提醒</h2><ol><li>所述的每一种建模都有其优点和局限性。</li><li>牢记，创建的分析模型可以提供对需求理解和通信的一个等级，而这却是文本方式下的软件需求规格说明和其它单一的表示法所不能提供的。</li><li>应该避免陷入在软件开发方法和模型中发生的教条的思维模式。</li></ol><h1 id="12-软件质量属性"><a href="#12-软件质量属性" class="headerlink" title="12 软件质量属性"></a>12 软件质量属性</h1><h2 id="12-0-基本概念"><a href="#12-0-基本概念" class="headerlink" title="12.0 基本概念"></a>12.0 基本概念</h2><ol><li>软件质量属性或质量引述是系统非功能性需求的一部分。</li><li>非功能需求(none-functional requirements)：描述系统展现给用户的行为和执行的操作等。包括:<ul><li>产品必须遵循的标准、规范和合约</li><li>外部界面的具体细节</li><li>性能要求</li><li>设计或实现的约束条件等</li></ul></li><li>质量属性通过多种角度对产品的特点进行描述，从而反映产品功能。</li><li>根据不同的设计，可把质量属性分类：<ul><li>一种方法是把在运行时，可识别的特性与那些不可识别的特性区分开。</li><li>另一种方法，是把对用户很重要的可见特性与对开发者和维护者很重要的不可见特性区分开。</li></ul></li><li>对开发者具有重要意义的属性有：使产品易于更改、验证，并易于移植到新的平台上，从而可以间接地满足客户需要的属性。</li></ol><h2 id="12-1-软件质量属性"><a href="#12-1-软件质量属性" class="headerlink" title="12.1 软件质量属性"></a>12.1 软件质量属性</h2><p>如表12-1，分两类描述每个项目都要考虑的一些质量属性：</p><center>表12-1 软件质量属性</center><table><thead><tr><th>主要对用户重要的属性</th><th>主要对开发人员重要的属性</th></tr></thead><tbody><tr><td>可用性<br />有效性<br />灵活性<br />完整性<br />互操作性<br />可靠性<br />健壮性<br />易用性</td><td>可维护性<br />可移植性<br />可重用性<br />可测试性</td></tr></tbody></table><h2 id="12-2-定义质量属性"><a href="#12-2-定义质量属性" class="headerlink" title="12.2 定义质量属性"></a>12.2 定义质量属性</h2><p>必须根据用户对系统的期望，来确定质量属性。分析员根据每一个属性设计出许多问题。利用这些问题询问每一个用户类的代表，可以把每个属性分成：一级（不必多加考虑的属性）到五级（极其重要的属性）。这些问题的回答有助于分析员决定哪些质量特性是最重要的。然后，分析员与用户一起，为每一属性确定需求。</p><h3 id="12-2-1-对用户重要的属性（理解）"><a href="#12-2-1-对用户重要的属性（理解）" class="headerlink" title="12.2.1 对用户重要的属性（理解）"></a>12.2.1 对用户重要的属性（理解）</h3><ol><li>可用性</li></ol><ul><li>系统能够正常运行的时间比例。经常用两次故障之间的时间长度或在出现故障时系统能够恢复正常的速度来表示。更正式地说，可用性等于系统的平均无故障时间（MTTF）除以平均无故障时间（MTTF）与故障修复时间（MTTR）之和。</li></ul><ol start="2"><li>有效性</li></ol><ul><li>用来衡量系统如何优化处理器、磁盘空间或通信带宽的。</li></ul><ol start="3"><li>灵活性</li></ol><ul><li>表明了在产品中，增加新功能时，所需工作量的大小。</li><li>对于通过一系列连续的发行版本，并采用渐增型和重复型方式开发的产品是很重要的。</li></ul><ol start="4"><li>完整性</li></ol><ul><li>主要涉及防止非法访问系统功能、防止数据丢失、防止病毒入侵，并防止私人数据进入系统。即数据和访问，必须通过特定的方法完全保护起来。</li></ul><ol start="5"><li>互操作性</li></ol><ul><li>表明了产品与其它系统交换数据和服务的难易程度。</li></ul><ol start="6"><li>可靠性</li></ol><ul><li>软件无故障执行一段时间的概率。</li><li>健壮性和有效性有时可看成是可靠性的一部分。</li></ul><ol start="7"><li>健壮性</li></ol><ul><li>指当系统或其组成部分遇到非法输入数据、相关软件或硬件组成部分的缺陷或异常的操作情况时，能继续正确运行功能的程度。</li><li>健壮的软件，可以从发生问题的环境中完好地恢复，并且可容忍用户的错误。</li></ul><ol start="8"><li>易用性</li></ol><ul><li>它所描述的是许多组成“用户友好”的因素。</li><li>衡量准备输入、操作和理解产品输出所花费的努力。</li><li>还包括对于新用户或不常使用产品的用户在学习使用产品时的难易程度。</li></ul><h3 id="12-2-2-对于开发人员重要的属性（理解）"><a href="#12-2-2-对于开发人员重要的属性（理解）" class="headerlink" title="12.2.2 对于开发人员重要的属性（理解）"></a>12.2.2 对于开发人员重要的属性（理解）</h3><ol><li>可维护性</li></ol><ul><li>表明了在软件中纠正一个缺陷或做一次更改的难易程度。</li><li>取决于理解软件、更改软件和测试软件的难易程度。</li></ul><ol start="2"><li>可移植性</li></ol><ul><li>度量把一个软件从一种运行环境转移到另一种运行环境中所花费的工作量。</li><li>对于工程的成功是不重要的。</li></ul><ol start="3"><li>可重用性</li></ol><ul><li>表明了一个软件组件，除了在最初开发的系统中使用之外，还可以在其它应用程序中使用的程度。</li><li>开发可重用软件的费用会更大些。</li></ul><ol start="4"><li>可测试性</li></ol><ul><li>指的是测试软件组件或集成产品时查找缺陷的难易程度。</li></ul><h2 id="12-3-性能需求"><a href="#12-3-性能需求" class="headerlink" title="12.3 性能需求"></a>12.3 性能需求</h2><ul><li>定义了系统必须多好和多快的完成专门的功能。包括：速度、吞吐量、处理能力、定时……</li></ul><h2 id="12-4-属性的折中方案"><a href="#12-4-属性的折中方案" class="headerlink" title="12.4 属性的折中方案"></a>12.4 属性的折中方案</h2><ul><li>为了达到产品特性的最佳平衡，必须在需求获取阶段识别、确定相关的质量属性，并且为之确定优先级。</li></ul><h1 id="13-通过原型法减少项目风险"><a href="#13-通过原型法减少项目风险" class="headerlink" title="13 通过原型法减少项目风险"></a>13 通过原型法减少项目风险</h1><h2 id="13-1-什么是原型和为什么要建立原型"><a href="#13-1-什么是原型和为什么要建立原型" class="headerlink" title="13.1 什么是原型和为什么要建立原型"></a>13.1 什么是原型和为什么要建立原型</h2><h3 id="13-1-1-原型的概念"><a href="#13-1-1-原型的概念" class="headerlink" title="13.1.1 原型的概念"></a>13.1.1 原型的概念</h3><ul><li>一个软件原型是所提出的新产品的部分实现。</li></ul><h3 id="13-1-2-建立原型的主要目的"><a href="#13-1-2-建立原型的主要目的" class="headerlink" title="13.1.2 建立原型的主要目的"></a>13.1.2 建立原型的主要目的</h3><ul><li>明确并完善需求</li><li>探索设计选择方案</li><li>发展为最终的产品</li></ul><h3 id="13-1-3-建立原型的主要原因"><a href="#13-1-3-建立原型的主要原因" class="headerlink" title="13.1.3 建立原型的主要原因"></a>13.1.3 建立原型的主要原因</h3><ul><li>是为了解决在产品开发的早期阶段不确定和二义性的问题。不确定和二义性的问题，使开发者对产品产生困惑。建立一个原型，有助于说明和纠正它们。原型，可以使问题更具体化。</li></ul><h2 id="13-2-水平原型"><a href="#13-2-水平原型" class="headerlink" title="13.2 水平原型"></a>13.2 水平原型</h2><ul><li><p>水平原型，也叫“行为原型”或“演示性模型” 。水平原型显示出用户界面的正面像，但是它仅包含少量的功能，并没有真正实现所有的功能，不深入到体系结构的所有层次。</p></li><li><p>水平原型，可以使用户判断是否有遗漏、  错误或不必要的功能。可以使用不同的屏幕设计工具或甚至使用纸和铅笔来建立水平原型。</p></li></ul><h2 id="13-3-垂直原型"><a href="#13-3-垂直原型" class="headerlink" title="13.3 垂直原型"></a>13.3 垂直原型</h2><ul><li><p>垂直原型，也叫“结构化原型”或“概念性模型”。它实现了一部分应用功能，主要在技术服务层次上实现应用程序用户界面的一部分功能，它触及到了系统实现的所有层次。</p></li><li><p>当不能确信所提出的构造软件的方法是否完善或者当需要优化算法，评价一个数据库的图表或测试临界时间需求时，就要开发一个垂直原型。</p></li></ul><h2 id="13-4-抛弃性原型"><a href="#13-4-抛弃性原型" class="headerlink" title="13.4 抛弃性原型"></a>13.4 抛弃性原型</h2><ul><li>在原型达到预期目的以后，将它抛弃，所以，可以花最小的代价，尽快地建立该原型。</li><li>抛弃型原型，忽略了很多具体的软件构造技术。不能将抛弃型原型中的代码，移植到产品系统中。否则，将在软件生存期中遭遇种种麻烦。</li><li>当遇到需求中的不确定性、二义性、不完整性或含糊性时。最合适的方法，是建立抛弃型原型。<ul><li>原型，可帮助用户和开发者想象如何实现需求和发现需求中的漏洞。</li><li>原型，还可以使用户判断出需求是否可以完成必要的业务过程。</li></ul></li></ul><h2 id="13-5-演化型原型"><a href="#13-5-演化型原型" class="headerlink" title="13.5 演化型原型"></a>13.5 演化型原型</h2><ul><li>演化型原型是螺旋式软件开发生命周期模型和某些面向对象软件开发过程的一个组成部分。</li><li>在已经清楚地定义了需求的情况下，进化型原型为产品提供了坚实的构造基础。</li><li>进化式模型，一开始就必须具有健壮性和产品质量级的代码。</li><li>建立进化型原型比建立抛弃型原型所花的时间要多。</li><li>一个进化型原型必须设计为易于升级和优化的。</li><li>从测试和首次使用中获得的信息，将引起下一次软件原型的更新，正是这样不断增长并更新，使软件才能从一系列进化型原型，发展为实现最终完整的产品。</li><li>这种原型提供了快速获得有用功能的方法。</li><li>软件原型的典型应用，如图13-1：</li></ul><p><img src="http://img.fdchen.host/%E8%BD%AF%E4%BB%B6%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8.png" alt="软件原型的典型应用"></p><center>图13-1 软件原型的典型应用</center><h2 id="13-6-书面和电子原型"><a href="#13-6-书面和电子原型" class="headerlink" title="13.6 书面和电子原型"></a>13.6 书面和电子原型</h2><ul><li>书面原型和电子原型：用平面工具把系统是如何实现的呈现在用户面前。</li></ul><h3 id="13-6-1-书面原型"><a href="#13-6-1-书面原型" class="headerlink" title="13.6.1 书面原型"></a>13.6.1 书面原型</h3><ol><li>是一种廉价、快速，并且不涉及高技术的方法。它可以把一个系统某部分，是如何实现的呈现在用户面前。</li><li>有助于判断用户和开发者，在需求上是否达成共识。可以使在开发产品代码前，对各种可能的解决方案进行试验性的尝试。</li><li>使用的工具：是纸张、索引卡、粘贴纸、塑料板、白板和标记器。在书面原型中，一个人可以充当计算机的角色。即模仿计算机的人，就会把关于显示方面的纸张和索引卡给用户看。</li><li>方便了原型的快速反复性，而在需求开发中反复性是一个关键的成功因素。对于精化需求，是一种优秀的技术。</li></ol><h3 id="13-6-2-电子原型"><a href="#13-6-2-电子原型" class="headerlink" title="13.6.2 电子原型"></a>13.6.2 电子原型</h3><ol><li>如果决定建立一个电子抛弃型原型，那么就有许多工具可以使用。这些工具包括：<ul><li>编程语言</li><li>脚本语言</li><li>商品化的建立原型的工具包、屏幕绘图器和图形用户界面构筑师。</li></ul></li></ol><h2 id="13-7-原型的评估"><a href="#13-7-原型的评估" class="headerlink" title="13.7 原型的评估"></a>13.7 原型的评估</h2><p>在原型评价时，可以提供一些相关的问题：</p><ul><li>这个原型所实现功能与你所期望的一致吗？</li><li>有遗漏的功能吗？</li><li>你能考虑一下这个原型所没涉及的一些出错情况吗？</li><li>有多余的功能吗？</li><li>这些导航对于你意味着怎样的逻辑性和完整性？</li><li>有更简单的方法来完成这一任务吗？</li></ul><h2 id="13-8-创建原型所带来的风险"><a href="#13-8-创建原型所带来的风险" class="headerlink" title="13.8 创建原型所带来的风险"></a>13.8 创建原型所带来的风险</h2><h3 id="13-8-1-风险"><a href="#13-8-1-风险" class="headerlink" title="13.8.1 风险"></a>13.8.1 风险</h3><ul><li>最大的风险是用户或者经理看到一个正在运行的原型，从而以为产品即将完成。</li><li>决不能把抛弃型原型，当作可交付的产品。</li></ul><h2 id="13-8-2-控制风险"><a href="#13-8-2-控制风险" class="headerlink" title="13.8.2 控制风险"></a>13.8.2 控制风险</h2><ol><li>一种方法利用书面原型，而不是电子原型。</li><li>另一种方法是使用不同于在真正开发时所用的原型法工具。这将有助于理解原型开发，并把它当作产品模型。</li></ol><h2 id="13-9-原型法成功的因素"><a href="#13-9-原型法成功的因素" class="headerlink" title="13.9 原型法成功的因素"></a>13.9 原型法成功的因素</h2><p>建立有效的原型，应遵循如下原则：</p><ol><li>在项目计划中，应包括原型风险。</li><li>计划开发多个原型，因为你很少能一次成功。</li><li>尽快并且廉价地建立抛弃型原型。</li><li>在抛弃型原型中，不应含有：代码注释、输入数据有效性检查、保护性编码技术，或者错误处理的代码。</li><li>对于已经理解的需求，不要建立原型。</li><li>不能随意地增加功能。</li><li>不要从水平原型的性能推测最终产品的性能。</li><li>在原型屏幕显示和报表中，使用合理的模拟数据。</li><li>不要期望原型可以代替需求文档。</li></ol><h1 id="14-设定需求优先级"><a href="#14-设定需求优先级" class="headerlink" title="14 设定需求优先级"></a>14 设定需求优先级</h1><h2 id="14-1-为什么设定需求优先级"><a href="#14-1-为什么设定需求优先级" class="headerlink" title="14.1 为什么设定需求优先级"></a>14.1 为什么设定需求优先级</h2><ul><li><p>尽早确定产品应具备的最重要功能。</p></li><li><p>权衡合理的项目范围和进度安排、预算以及质量目标的约束，以最少的费用提供产品的最大功能。</p></li></ul><h2 id="14-2-设定优先级的规则"><a href="#14-2-设定优先级的规则" class="headerlink" title="14.2 设定优先级的规则"></a>14.2 设定优先级的规则</h2><p>项目经理必须权衡合理的项目范围和进度安排、预算、人力资源以及质量目标的约束。把高优先级的需求放在前面，把低优先级的需求推迟到下一版本中去实现或者删除它们。</p><h2 id="14-3-设定优先级的等级"><a href="#14-3-设定优先级的等级" class="headerlink" title="14.3 设定优先级的等级"></a>14.3 设定优先级的等级</h2><p>设定优先级的一般方法是：把需求分成三类：高、中、低。如表14-1描述了需求的4种可能性。</p><center>表14-1 根据重要性和紧迫性来设定需求优先级</center><table><thead><tr><th></th><th>重要</th><th>不重要</th></tr></thead><tbody><tr><td>紧迫</td><td>高优先级</td><td>低优先级</td></tr><tr><td>不紧迫</td><td>中优先级</td><td>低优先级</td></tr></tbody></table><h2 id="14-4-根据价值、成本和风险来设定优先级"><a href="#14-4-根据价值、成本和风险来设定优先级" class="headerlink" title="14.4 根据价值、成本和风险来设定优先级"></a>14.4 根据价值、成本和风险来设定优先级</h2><h3 id="14-4-1-设定优先级过程中的参与者有："><a href="#14-4-1-设定优先级过程中的参与者有：" class="headerlink" title="14.4.1 设定优先级过程中的参与者有："></a>14.4.1 设定优先级过程中的参与者有：</h3><ol><li>项目经理：他指导全过程，解决冲突，并且在必要的时候调整其它参与者的方案。</li><li>重要的客户代表：例如：产品的代言人，他可以提供受益和损失程度。</li><li>开发者代表：例如：开发组的技术指导者，他提供了费用和风险程度。</li></ol><h2 id="14-4-2-优先级设定的步骤"><a href="#14-4-2-优先级设定的步骤" class="headerlink" title="14.4.2 优先级设定的步骤"></a>14.4.2 优先级设定的步骤</h2><ol><li><p>列出要设定优先级的所有需求、特性或使用实例；</p><ul><li>所有项都必须在同一抽象级别上；</li><li>如果某些特性有逻辑上的联系，在分析中只要列出驱动较全面的项。</li><li>如果有更多的项，那么就把相关的特性归成一类，并建立一个可管理的初始化列表。</li><li>如果需要的话，可以在更详细的级别上进行第二轮分析。</li></ul></li><li><p>估计每一个特性提供给客户或业务的相关利益，并用1～9划分等级，1代表可忽略的利益，9代表最大的价值。</p><ul><li>这些利益等级表明了与产品的业务需求的一致性。</li><li>由客户代表来判断这些利益的优先级。</li></ul></li><li><p>估计出如果没有把应该实现的特性包括到产品中，将会给客户或业务上带来的损失。使用1 ～ 9划分等级。1代表基本无损失，9代表严重损失。</p><ul><li>注意：对于具有低利润低损失的需求只会增加费用，而不会增加价值。</li></ul></li><li><p>总价值栏是相对利润和相对损失的总和。总价值&#x3D; 相对利益*利益权值+ 相对损失*损失权值。</p><ul><li>作为一种精化，可以更改这两个因素的相对权值。</li></ul></li><li><p>估计实现每个特性的相对费用，使用1（低）～9（高）划分等级。</p><ul><li>计算出由每一个特性所构成的总费用的百分比。</li><li>根据需求的复杂度，所需求的用户界面的实现情况、所需要的测试量和文档等，开发者可以估算出费用。</li></ul></li><li><p>开发者要估计出与每个特性相关的技术或风险相对程度，并利用1～9划分等级。1级表示可以轻而易举地实现编程，而9级表示需要极大努力实现编程或者使用不成熟或不熟悉的工具和技术。</p><ul><li>计算出每个特性所产生的风险百分比。</li><li>在一般情况下，利润损失，费用和风险的权值是相等的，但是可以调整其权值。</li><li>如果无需在模型中考虑风险，就把风险的权值设为0</li></ul></li><li><p>一旦把所有的估算写入平面图，就可以利用如下公式计算出每一特性的优先级：</p></li></ol><p><img src="http://img.fdchen.host/%E9%9C%80%E6%B1%82%E4%BC%98%E5%85%88%E7%BA%A7%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png" alt="需求优先级计算公式"></p><center>图14-1 需求优先级计算公式</center><ol start="8"><li>按计算出的优先级的降序排列表中的特性。<ul><li>处于列表最顶端的特性，必须具有最高优先级。</li><li>计算出来的优先级序列，只能作为一种指导策略的参考。</li><li>客户和开发者代表应该讨论，从而达成共识。并根据使用情况来校正。</li><li>可以适当调整每一因素的权值，直到所计算出的优先级序列与后来对测试集中需求的重要性评估相吻合为止。</li><li>评估这些需求的优先级，以指明它们与现存的需求之间的一致性。</li><li>在把需求优先级的设定，应以客观和分析为基础。</li></ul></li></ol><ul><li>如图14-2，化学品跟踪系统优先级计算示例：</li></ul><p><img src="http://img.fdchen.host/%E4%BC%98%E5%85%88%E7%BA%A7%E8%AE%A1%E7%AE%97%E7%A4%BA%E4%BE%8B.png" alt="优先级计算示例"></p><center>图14-2 优先级计算示例</center><h1 id="15-需求确认"><a href="#15-需求确认" class="headerlink" title="15 需求确认"></a>15 需求确认</h1><h2 id="15-0-基本概念"><a href="#15-0-基本概念" class="headerlink" title="15.0 基本概念"></a>15.0 基本概念</h2><ol><li>需求确认是指开发方和客户方共同对《产品需求规格说明书》进行评审，双方对需求达成共识后作出承诺。</li><li>需求确认包含两个重要工作：“需求评审”和“需求承诺”。</li><li>需求评审面临的困难：<ul><li>需求评审的一个通病是“虎头蛇尾”。需求评审的确乏味，也比较费脑子。刚开始评审时，大家都比较认真，越到后头越马虎。</li><li>需求评审涉及的人员可能比较多，有些时候让这么多人聚在一起花费比较长的时间开会并不容易。</li><li>需求评审也可以分段进行。这样每次评审的时间比较短，参加评审的人员也少一些，组织会议就比较容易。</li></ul></li><li>评审会议：<ul><li>开评审会议时经常会“跑题”，导致评审效率很低。有时话匣子一打开后关不上，大家越扯越远，结果评审会议变成了聊天会议。</li><li>主持人应当控制话题，避免大家讨论与主题无关的东西。</li><li>开评审会议时经常会发生争议。适当的争议有利于澄清问题，比什么东西都一致赞成要好。然而当争议变为争吵时就坏事了，争吵不仅对评审工作没有好处，而且会无意中伤害伙伴之间的感情。</li></ul></li><li>需求承诺：<ul><li>是指开发方和客户方的责任人对通过了正式技术评审的《产品需求规格说明书》作出承诺，该承诺具有商业合同的效果。</li></ul></li><li>需求确认中的问题：<ul><li>需求确认，确保了需求规格说明的良好特性。</li><li>需求确认，是对渐增型软件需求规格说明的反复评审，将贯穿着反复获取需求、分析和编写规格说明的整个过程。</li><li>需求确认，可以减少返工，并加快系统测试，从而真正缩短了开发时间。</li></ul></li><li>需求确认的主要活动有以下几方面：<ul><li>软件需求规格说明是否正确描述了预期的系统行为和特征？</li><li>从系统需求或其它来源中得到软件需求的正确性。</li><li>需求是否是完整的和高质量的？</li><li>所有对需求的看法是否一致？</li><li>需求为继续进行产品设计、构造和测试是否提供了足够的基础？</li></ul></li></ol><h2 id="15-1-需求评审"><a href="#15-1-需求评审" class="headerlink" title="15.1 需求评审"></a>15.1 需求评审</h2><ul><li><p>需求文档的评审是一项精益求精的技术。它可以发现二义性的需求和不确定的需求。需求评审分为正式评审和非正式评审。</p></li><li><p>非正式评审是非系统化的，不彻底的，或者在实施过程中具有不一致性。不需要记录备案。可以根据个人爱好的方式进行评审</p></li><li><p>正式评审遵循预先定义好的一系列步骤。内容需要记录在案。正式评审小组的成员，对评审的质量负责。</p></li></ul><h3 id="15-1-1-审查过程"><a href="#15-1-1-审查过程" class="headerlink" title="15.1.1 审查过程"></a>15.1.1 审查过程</h3><ul><li>审查是一个定义明确的分多个阶段完成的过程，由一小组受过培训的参与者完成。</li></ul><ol><li>参与者（5-9人）</li></ol><p>参与者应该代表3种人的观点：</p><ul><li>工作产品的作者，也有可能是作者同级伙伴。</li><li>先前所有的其中有条目正在接受审查的工作产品或规格说明的作者。</li><li>需要根据正在审查的条目来开展工作的人。</li></ul><ol start="2"><li>审查种每个成员所扮演的角色</li></ol><ul><li>作者</li><li>仲裁者</li><li>读者</li><li>记录员</li></ul><ol start="3"><li>进入审查的标准</li></ol><ul><li>文档符合标准模板。</li><li>文档已经做过拼写检查和语法检查。</li><li>作者已经检查了文档在版面安排上所存在的错误。</li><li>已经获得了审查员所需要的先前或参考文档。</li><li>在文档中打印了行序号以方便在审查中对特定位置的查阅。</li><li>所有未解决的问题都被标记为TBD（待确定）。</li><li>包括了文档中使用到的术语词汇表。</li></ul><ol start="4"><li>审查阶段</li></ol><p><img src="http://img.fdchen.host/%E5%AE%A1%E6%9F%A5%E8%BF%87%E7%A8%8B%E9%98%B6%E6%AE%B5.png" alt="审查过程阶段"></p><center>图15-1 审查过程阶段</center><ol start="5"><li>结束审查的标准</li></ol><ul><li>已经明确阐述了审查员提出的所有问题。</li><li>已经正确修改了文档。</li><li>修订过的文档已经进行了拼写检查和语法检查。</li><li>所有TBD的问题已经全部解决，或者已经记录下每个待确定问题的解决过程，目标日期和提出问题的人。</li><li>文档已经登记入项目的配置管理系统。 </li><li>检查是否已将审查过的资料送到有关收集处。</li></ul><ol start="6"><li>需求审查清单</li></ol><ul><li>审查员对所审查每一类型的需求文档，应建立一份清单。这些清单可以提醒审查员以前经常发生的需求问题。</li><li>使用用例文档审查清单</li></ul><p>使用用例是否是独立的分散任务？<br>使用用例的目标或价值度量是否明确？<br>使用用例给操作者带来的益处是否明确？<br>使用用例是否处于抽象级别上，而不具有详细的情节？<br>使用用例中是否不包含设计和实现的细节？<br>是否记录了所有可能的可选过程？<br>是否记录了所有可能的例外条件？<br>是否存在一些普通的动作序列可以分解成独立的使用用例？<br>是否简明书写、无二义性和完整地记录了每个过程的对话？<br>使用用例中的每个操作和步骤是否都与所执行的任务相关？<br>使用用例中定义的每个过程是否都可行？<br>使用用例中定义的每个过程是否都可确认？</p><ul><li>软件需求规格说明的缺陷检查清单</li></ul><p><strong>组织和完整性</strong><br>所有对其它需求的内部交叉引用是否正确？<br>所有需求的编写在细节上是否都一致或者合适？<br>需求是否能为设计提供足够的基础？<br>是否包括了每个需求的实现优先级？<br>是否定义了所有外部硬件、软件和通信接口？<br>是否定义了功能需求内在的算法？<br>软件需求规格说明中是否包括了所有客户代表或系统的需求？<br>是否在需求中遗漏了必要的信息？如果有的话，就把它们标记为待确定的问题。<br>是否记录了所有可能的错误条件所产生的系统行为？<br><strong>正确性</strong><br>是否有需求与其它需求相冲突或重复？<br>是否简明、简洁、无二义性地表达每个需求的？<br>是否每个需求都能通过测试、演示、审查得以确认或分析？<br>是否每个需求都在项目的范围内？<br>是否每个需求都没有内容上和语法上的错误？<br>在现有的资源限制内，是否能实现所有的需求？<br>是否任一个特定的错误信息都具有唯一性和明确的意义？<br><strong>质量属性</strong><br>是否合理地确定了性能目标？<br>是否合理地确定了安全与保密方面的考虑？<br>在确定了合理的折衷情况下，是否详实地记录了其它相关的质量属性？<br><strong>可跟踪性</strong><br>是否每个需求都具有唯一性并且可以正确地识别它？<br>是否可以根据高层需求（如系统需求或使用用例）跟踪到软件功能需求？<br><strong>特殊的问题</strong><br>是否所有的需求都是名副其实的需求而不是设计或实现方案？<br>是否确定了对时间要求很高的功能并且定义了它们的时间标准？<br>是否已经明确地阐述了国际化问题？</p><h3 id="15-1-2-需求评审面临的困难"><a href="#15-1-2-需求评审面临的困难" class="headerlink" title="15.1.2 需求评审面临的困难"></a>15.1.2 需求评审面临的困难</h3><ol><li>大型的需求文档：可以分成几个小组，分别审查材料的不同部分。</li><li>庞大的审查小组：参与者任务明确；理解审查员所代表的观点；把审查组分成若干小组。</li><li>审查员在地域上的分散：视频会议；电话会议；共享网络文件夹中的电子文件，进行文档评审；基于Web的聊天工具，进行实时的远程讨论。</li></ol><h2 id="15-2-测试需求"><a href="#15-2-测试需求" class="headerlink" title="15.2 测试需求"></a>15.2 测试需求</h2><ul><li>软件需求在概念上的测试是通过在开发早期的阶段，寻找需求错误，从而成为一种控制项目费用和进度的强有力的技术。</li><li>如果能把早期的黑盒子测试设计、非正式需求评审、软件需求规格说明审查和其它需求确认技术相结合。将花比以前更少的时间、更低的费用,来构造质量更高的系统。</li></ul><h2 id="15-3-定义验收标准"><a href="#15-3-定义验收标准" class="headerlink" title="15.3 定义验收标准"></a>15.3 定义验收标准</h2><ul><li>按接收要求制定</li><li>重点放在功能需求上</li></ul><h1 id="16-需求开发面临的特殊难题（了解）"><a href="#16-需求开发面临的特殊难题（了解）" class="headerlink" title="16 需求开发面临的特殊难题（了解）"></a>16 需求开发面临的特殊难题（了解）</h1><h2 id="16-1-维护项目的需求"><a href="#16-1-维护项目的需求" class="headerlink" title="16.1 维护项目的需求"></a>16.1 维护项目的需求</h2><h3 id="16-1-1-开始捕获信息"><a href="#16-1-1-开始捕获信息" class="headerlink" title="16.1.1 开始捕获信息"></a>16.1.1 开始捕获信息</h3><ol><li><p>现有系统：文档不全；开发人员调离或辞职。</p><p>采用“逆向工程”方法从代码来理解系统。</p></li><li><p>增强性维护：在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。</p></li></ol><h3 id="16-1-2-亲身实践一下新的需求技术"><a href="#16-1-2-亲身实践一下新的需求技术" class="headerlink" title="16.1.2 亲身实践一下新的需求技术"></a>16.1.2 亲身实践一下新的需求技术</h3><h3 id="16-1-3-遵循跟踪链"><a href="#16-1-3-遵循跟踪链" class="headerlink" title="16.1.3 遵循跟踪链"></a>16.1.3 遵循跟踪链</h3><h2 id="16-2-软件包解决方案的需求"><a href="#16-2-软件包解决方案的需求" class="headerlink" title="16.2 软件包解决方案的需求"></a>16.2 软件包解决方案的需求</h2><h3 id="16-2-1-开发用例"><a href="#16-2-1-开发用例" class="headerlink" title="16.2.1 开发用例"></a>16.2.1 开发用例</h3><h3 id="16-2-2-考虑业务规则"><a href="#16-2-2-考虑业务规则" class="headerlink" title="16.2.2 考虑业务规则"></a>16.2.2 考虑业务规则</h3><h3 id="16-2-3-定义质量需求"><a href="#16-2-3-定义质量需求" class="headerlink" title="16.2.3 定义质量需求"></a>16.2.3 定义质量需求</h3><h2 id="16-3-外包项目的需求"><a href="#16-3-外包项目的需求" class="headerlink" title="16.3 外包项目的需求"></a>16.3 外包项目的需求</h2><p>准备需求文档，要记住以下几点：</p><ul><li>提供细节——精确地给出请求</li><li>避免二义性  </li><li>安排与承包方的接触点</li><li>定义双方都能接受的变更控制过程</li><li>为需求的多次迭代和评审预留时间</li><li>制定验收标准</li></ul><h2 id="16-4-突发型项目的需求"><a href="#16-4-突发型项目的需求" class="headerlink" title="16.4 突发型项目的需求"></a>16.4 突发型项目的需求</h2><h3 id="16-4-1-非正式用户需求规格说明"><a href="#16-4-1-非正式用户需求规格说明" class="headerlink" title="16.4.1 非正式用户需求规格说明"></a>16.4.1 非正式用户需求规格说明</h3><h3 id="16-4-2-现场客户"><a href="#16-4-2-现场客户" class="headerlink" title="16.4.2 现场客户"></a>16.4.2 现场客户</h3><h3 id="16-4-3-尽早地而且要经常地设定优先级"><a href="#16-4-3-尽早地而且要经常地设定优先级" class="headerlink" title="16.4.3 尽早地而且要经常地设定优先级"></a>16.4.3 尽早地而且要经常地设定优先级</h3><h3 id="16-4-4-简单的变更管理"><a href="#16-4-4-简单的变更管理" class="headerlink" title="16.4.4 简单的变更管理"></a>16.4.4 简单的变更管理</h3><h1 id="17-超越需求开发（了解）"><a href="#17-超越需求开发（了解）" class="headerlink" title="17 超越需求开发（了解）"></a>17 超越需求开发（了解）</h1><h2 id="17-1-从需求到项目规划"><a href="#17-1-从需求到项目规划" class="headerlink" title="17.1 从需求到项目规划"></a>17.1 从需求到项目规划</h2><h3 id="17-1-1-需求和评估"><a href="#17-1-1-需求和评估" class="headerlink" title="17.1.1 需求和评估"></a>17.1.1 需求和评估</h3><p>以下是一些常用的预估度量标准：</p><ul><li>功能点和特性点的多少</li><li>图形用户界面元素的数量、类型和复杂度</li><li>用于实现特定需求所需的源代码行数</li><li>对象类的数量或者其它面向对象系统的衡量标准</li><li>单个可测试需求的数量</li></ul><h3 id="17-1-2-需求和进度安排"><a href="#17-1-2-需求和进度安排" class="headerlink" title="17.1.2 需求和进度安排"></a>17.1.2 需求和进度安排</h3><p>正确的规划，需要考虑以下几点：</p><ul><li>根据对需求的清楚理解，来估计产品规模的大小。</li><li>根据历史记录，了解开发小组的工作效率。</li><li>需要一张综合的任务列表，以完整实现和验证每一特性或使用实例。</li><li>有效的预测和规划过程。</li><li>经验。</li></ul><h2 id="17-2-从需求到设计和编码"><a href="#17-2-从需求到设计和编码" class="headerlink" title="17.2 从需求到设计和编码"></a>17.2 从需求到设计和编码</h2><p>需求转化为设计和代码时，可能遇到下列问题：</p><ul><li>可能会遇到不确定和混淆的需求。</li><li>如果不能马上解决问题，那么所做出的假设，猜想或解释，都要编写成文档记录下来，并由客户代表评审。</li><li>如果遇到许多诸如此类的问题，说明需求还不十分清晰或具体。</li><li>在这种情况下，最好安排人员，对剩余的需求进行评审，然后在开展工作。</li></ul><h2 id="17-3-从需求到测试"><a href="#17-3-从需求到测试" class="headerlink" title="17.3 从需求到测试"></a>17.3 从需求到测试</h2><ul><li>详尽的需求，是系统测试的基础。反过来，只能通过测试，来判断软件是否满足了需求。</li></ul><h2 id="17-4-从需求到成功"><a href="#17-4-从需求到成功" class="headerlink" title="17.4 从需求到成功"></a>17.4 从需求到成功</h2><ul><li>项目的成功之处，在于把需求文档作为发行产品的基础。</li><li>需求是从产品概念，通向用户满意之路的最本质的一步。</li></ul><h1 id="18-需求管理的原则与实现"><a href="#18-需求管理的原则与实现" class="headerlink" title="18 需求管理的原则与实现"></a>18 需求管理的原则与实现</h1><h2 id="18-0-基本概念"><a href="#18-0-基本概念" class="headerlink" title="18.0 基本概念"></a>18.0 基本概念</h2><h3 id="18-0-1-需求管理是什么"><a href="#18-0-1-需求管理是什么" class="headerlink" title="18.0.1 需求管理是什么"></a>18.0.1 需求管理是什么</h3><p>需求管理：</p><ul><li>是一种获取、组织并记录系统需求的系统化方案，以及一个使客户与项目团队对不断变更的需求达成并保持一致的过程。</li><li>是对所有相关活动的规划和控制。</li><li>准确地强调了追踪变更以保持涉众与项目团队之间共识的重要性。</li><li>包括：在工程进展过程中维持需求约定集成性和精确性的所有活动。</li></ul><h3 id="18-0-2-需求管理主要内容"><a href="#18-0-2-需求管理主要内容" class="headerlink" title="18.0.2 需求管理主要内容"></a>18.0.2 需求管理主要内容</h3><ul><li>控制对需求基线的变动。</li><li>保持项目计划与需求一致。</li><li>控制单个需求和需求文档的版本情况。</li><li>管理需求和联系链之间的联系或管理单个需求和其它项目之间的依赖关系。</li><li>跟踪基线中需求的状态。</li></ul><h3 id="18-0-3-主要的需求管理活动"><a href="#18-0-3-主要的需求管理活动" class="headerlink" title="18.0.3 主要的需求管理活动"></a>18.0.3 主要的需求管理活动</h3><p><img src="http://img.fdchen.host/%E4%B8%BB%E8%A6%81%E7%9A%84%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86%E6%B4%BB%E5%8A%A8.png" alt="主要的需求管理活动"></p><center>图18-1 主要的需求管理活动</center><h2 id="18-1-需求基线"><a href="#18-1-需求基线" class="headerlink" title="18.1 需求基线"></a>18.1 需求基线</h2><ul><li><p>需求基线是某一特定产品版本中实现的功能性和非功能性需求的一组集合。</p></li><li><p>需求基线在客户和开发人员之间建立了计划产品功能需求和非功能需求的一个约定。</p></li></ul><h2 id="18-2-需求管理过程"><a href="#18-2-需求管理过程" class="headerlink" title="18.2 需求管理过程"></a>18.2 需求管理过程</h2><p>需求管理过程，可考虑下列内容：</p><ul><li>用于控制各种需求文档和单个需求版本的工具、技术和约定。</li><li>建议、处理、协商、通告新的需求和变更给有关的功能域的方法。</li><li>如何制定需求基线。</li><li>使用的需求状态是谁允许作出的变更。</li><li>需求状态跟踪和报告过程。</li><li>分析已建议变动的影响应遵循的步骤。</li><li>在何种情况下，需求变更将会怎样影响项目计划和约定。</li></ul><h2 id="18-3-需求版本控制"><a href="#18-3-需求版本控制" class="headerlink" title="18.3 需求版本控制"></a>18.3 需求版本控制</h2><h3 id="18-3-1-概念"><a href="#18-3-1-概念" class="headerlink" title="18.3.1 概念"></a>18.3.1 概念</h3><ol><li>版本控制是管理需求的一个必要方面。需求文档的每一个版本，必须被统一确定。开发组内每个成员，必须得到需求的当前版本。</li><li>每一个公布的需求文档版本，应该包括一个修正版本的历史情况。即：已做变更的内容、变更日期、变更人的姓名以及变更的原因。</li><li>可以使用标准修改符：例如：<ul><li>中划线代表取消</li><li>下化线代表添加</li><li>在页边空白的竖划线指示每个变动的位置等等</li></ul></li></ol><h3 id="18-3-2-基本方法"><a href="#18-3-2-基本方法" class="headerlink" title="18.3.2 基本方法"></a>18.3.2 基本方法</h3><p>最简单方法是，根据标准约定，手工标记软件需求规格说明的每一次修改。</p><p>如：</p><ul><li>任何新文档的第一版当标记为“1.0版(草案1)”</li><li>下一稿标记为“1.0版（草案2）”</li><li>文档被采纳后被标记为“1.0正式版”</li><li>若只有较小的修改，可认为是“1.1版(草案1)”</li><li>若有较大的修改时，可认为是“2.0版(草案1)”</li></ul><h3 id="18-3-3-更高级别的方法"><a href="#18-3-3-更高级别的方法" class="headerlink" title="18.3.3 更高级别的方法"></a>18.3.3 更高级别的方法</h3><ul><li>用版本控制工具来存储需求文档，例如：用登录和退出程序，来管理源代码。</li></ul><h2 id="18-4-需求属性"><a href="#18-4-需求属性" class="headerlink" title="18.4 需求属性"></a>18.4 需求属性</h2><p>每个功能需求，应该有一些相关的信息或属性。对于每个需求，可考虑如下的属性：</p><ul><li>创建需求的日期</li><li>需求的版本号</li><li>创建需求的作者</li><li>负责认可该需求的人员</li><li>需求状态</li><li>需求的原因或根据（或信息的出处）</li><li>需求涉及的子系统</li><li>需求涉及的产品版本号</li><li>使用的验证方法或接受的测试标准</li><li>产品的优先级或重要程度</li><li>需求的稳定性</li></ul><h2 id="18-5-跟踪需求的状态"><a href="#18-5-跟踪需求的状态" class="headerlink" title="18.5 跟踪需求的状态"></a>18.5 跟踪需求的状态</h2><p>在整个开发过程中，跟踪每个需求的状态，是需求管理的一个重要方面。跟踪每个需求的状态，是一种精确地测量项目进度的方法。</p><center>表18-1 建议的需求状态表</center><table><thead><tr><th>状态值</th><th>定义</th></tr></thead><tbody><tr><td>已建议</td><td>该需求已被有权提出需求的人建议</td></tr><tr><td>已批准</td><td>该需求已被分析，估计了其对项目余下部分的影响（包括成本和对项目其余部分的干扰)，已用一个确定的产品版本号或创建编号分配到相关的基线中，软件开发团队已同意实现该项需求</td></tr><tr><td>已实现</td><td>已实现需求代码的设计、编写和单元测试</td></tr><tr><td>已验证</td><td>使用所选择的方法已验证了实现的需求，例如测试和检测，审查该需求跟踪与测试用例相符。该需求现在被认为完成</td></tr><tr><td>已删除</td><td>计划的需求已从基线中删除，但包括一个原因说明和做出删除决定的人员</td></tr><tr><td>已否决</td><td>需求已被提议，但并不计划在下一版本中实现它。要解释为什么否决这一需求，以及是谁决定否决的</td></tr></tbody></table><h2 id="18-6-评估需求管理的工作量"><a href="#18-6-评估需求管理的工作量" class="headerlink" title="18.6 评估需求管理的工作量"></a>18.6 评估需求管理的工作量</h2><p>度量需求管理的情况，一般考虑下列活动的效果：</p><ul><li>提出需求变更和已建议的新需求。</li><li>评估已建议的变更，包括影响分析。</li><li>变更控制委员会活动。</li><li>更新需求文档或数据库。</li><li>在涉及人员或团队中交流需求的变更。</li><li>跟踪和报告需求状态。</li><li>定义和更新需求跟踪能力信息。</li></ul><h2 id="18-7-需求管理与能力成熟度模型（CMM）"><a href="#18-7-需求管理与能力成熟度模型（CMM）" class="headerlink" title="18.7 需求管理与能力成熟度模型（CMM）"></a>18.7 需求管理与能力成熟度模型（CMM）</h2><p>CMM需求管理的目标是：</p><ol><li>控制指定给软件的系统需求，为软件工程和管理应用建立基线；</li><li>保持软件计划、产品和活动与指定给软件的系统需求一致。</li></ol><h1 id="19-变更管理"><a href="#19-变更管理" class="headerlink" title="19 变更管理"></a>19 变更管理</h1><p>不被控制的变更,是引起项目陷入混乱、不能按进度执行或软件质量低劣的原因。为了使开发组织能够控制软件项目，应确保以下事项：</p><ul><li>应仔细评估已建议的变更。</li><li>挑选合适的人选对变更做出决定。</li><li>变更应及时通知所有涉及的人员。</li><li>项目要按一定的程序来采纳需求变更。</li></ul><h2 id="19-1-管理范围蔓延"><a href="#19-1-管理范围蔓延" class="headerlink" title="19.1 管理范围蔓延"></a>19.1 管理范围蔓延</h2><ol><li>业务过程、市场机会、竞争性的产品和软件技术在开发系统期间是可以变更的。</li><li>扩展需求是指在软件需求基线已经确定后，又要增添新的功能或进行较大改动。要是每个建议的需求都被采纳，对于项目出资者、参与者与客户来说项目将永远也不会完成。在项目进度表中，应对必要的需求改动留有余地。若不控制范围的扩展，将使不断地采纳新的功能，而且要不断地调整资源、进度、或质量目标。因此，项目就不可能按客户预期的进度和预期质量交付使用了。</li><li>控制需求扩展的一个有效技术是原型法。</li></ol><h2 id="19-2-变更控制过程"><a href="#19-2-变更控制过程" class="headerlink" title="19.2 变更控制过程"></a>19.2 变更控制过程</h2><ol><li>一个好的变更控制过程，给项目承担者提供了正式的建议需求变更机制。</li><li>通过变更控制过程来跟踪已建议变更的状态，确保不会丢失或疏忽已建议的变更。</li><li>它是一个渠道和过滤器，通过它可以确保采纳最合适的变更，使变更产生的负面影响减少到最小。</li><li>变更过程应该做成文档，尽可能简单，当然首要的是有效性。</li><li>避免变更过程，效率低，且冗长，又很复杂。否则，宁愿用旧方法来做出变更决定。</li></ol><h2 id="19-2-1-变更控制策略"><a href="#19-2-1-变更控制策略" class="headerlink" title="19.2.1 变更控制策略"></a>19.2.1 变更控制策略</h2><p>下述需求变更的策略是有用的：</p><ul><li>所有需求变更，必须遵循一定的过程。如果一个变更需求未被采纳,其后过程不予考虑。</li><li>对于未获批准的变更，除可行性论证之外，不应再做其它设计和实现工作。</li><li>简单请求一个变更不能保证能实现变更，要由项目CCB决定实现哪些变更。</li><li>项目承担者，应该了解变更数据库的内容。</li><li>绝不能从数据库中删除或修改变更请求的原始文档。</li><li>每一个的需求变更，能够跟踪到一个经核准的变更请求。</li></ul><h3 id="19-2-2-变更控制过程描述"><a href="#19-2-2-变更控制过程描述" class="headerlink" title="19.2.2 变更控制过程描述"></a>19.2.2 变更控制过程描述</h3><ol><li><p>绪论<br>1.1 目的<br>1.2 范围<br>1.3 定义</p></li><li><p>角色和责任</p></li><li><p>变更请求状态</p></li><li><p>开始条件</p></li><li><p>任务<br>5.1 产生变更请求<br>5.2 评估变更请求<br>5.3 作出决策<br>5.4 通知变更人员</p></li><li><p>验证</p></li><li><p>结束条件</p></li><li><p>变更控制状态报告</p></li></ol><p>  附录：存储的数据项</p><h2 id="19-3-变更控制委员会"><a href="#19-3-变更控制委员会" class="headerlink" title="19.3 变更控制委员会"></a>19.3 变更控制委员会</h2><ul><li><p>变更控制委员会也称为配置控制委员会（configuration control board，CCB）。</p></li><li><p>变更控制委员会：可以由一个小组担任，也可由多个不同的组担任。负责做出决定：哪一些需求变更或新产品特性付诸应用；决定在哪一些版本中纠正哪一些错误。</p></li></ul><h3 id="19-3-1-CCB的组成"><a href="#19-3-1-CCB的组成" class="headerlink" title="19.3.1 CCB的组成"></a>19.3.1 CCB的组成</h3><p>变更控制委员会，包括如下几方面的代表：</p><ul><li>产品或计划管理部门。</li><li>项目管理部门。</li><li>开发部门。</li><li>测试或质量保证部门。</li><li>市场部或客户代表。</li><li>制作用户文档的部门。</li><li>技术支持部门。</li><li>帮助桌面或用户支持热线部门。</li><li>配置管理部门。</li></ul><p>应该在保证权威性的前提下，尽可能地精简CCB人员。</p><h3 id="19-3-2-CCB规章"><a href="#19-3-2-CCB规章" class="headerlink" title="19.3.2 CCB规章"></a>19.3.2 CCB规章</h3><p>设立变更控制委员会的第一步是写一个总则。描述变更控制委员会的目的、授权范围、成员构成、做出决策的过程及操作步骤。</p><ol><li>制定决策</li><li>交流情况</li><li>重新协商约定</li></ol><h3 id="19-3-3-变更控制工具"><a href="#19-3-3-变更控制工具" class="headerlink" title="19.3.3 变更控制工具"></a>19.3.3 变更控制工具</h3><p>挑选工具时，可以考虑以下几个方面：</p><ul><li><p>可以定义变更请求的数据项。</p></li><li><p>可以定义变更请求生存期的状态转换图。</p></li><li><p>可以加强状态转换图使经授权的用户仅能做出所允许的状态变更。</p></li><li><p>记录每一种状态变更的数据，确认出变更的人员。</p></li><li><p>可定义在提交新请求或请求状态被更新后应该自动通知的设计人员</p></li><li><p>可以根据需要生成标准的或定制的报告和图表。</p></li></ul><h2 id="19-5-测量变更活动"><a href="#19-5-测量变更活动" class="headerlink" title="19.5 测量变更活动"></a>19.5 测量变更活动</h2><p>测量变更活动是评估需求的稳定性和确定某种过程改进时机的一种方法。需求变更活动考虑以下几方面：</p><ul><li>接收、未作决定、结束处理的变更请求的数量。</li><li>已实现需求变更的合计数量。</li><li>每个方面发出的变更请求的数量。</li><li>每一个已应用的需求建议变更和实现变更的数量。</li><li>投入处理变更的人力、物力。</li></ul><h2 id="19-6-变更需要付出代价：影响分析"><a href="#19-6-变更需要付出代价：影响分析" class="headerlink" title="19.6 变更需要付出代价：影响分析"></a>19.6 变更需要付出代价：影响分析</h2><p>影响分析可以提供对建议的变更的准确理解，帮助做出信息量充分的变更批准决策。通过对变更内容的检验，确定对现有的系统做出是修改或抛弃的决定，或者创建新系统以及评估每个任务的工作量。进行影响分析的能力依赖于跟踪能力数据的质量和完整性。没有人愿意做一个费时费力还要担心意想不到情况的需求变更。</p><h3 id="19-6-1-影响分析的过程"><a href="#19-6-1-影响分析的过程" class="headerlink" title="19.6.1 影响分析的过程"></a>19.6.1 影响分析的过程</h3><p>影响分析有3个方面：</p><ol><li>理解进行变更可能涉及的问题。</li><li>确定如果团队将提议的变更包括到产品中，可能必须对哪些文件、模型和文档进行修改。</li><li>确定实现变更所需执行的任务。</li></ol><h2 id="19-6-2-影响分析报告模板"><a href="#19-6-2-影响分析报告模板" class="headerlink" title="19.6.2 影响分析报告模板"></a>19.6.2 影响分析报告模板</h2><p>如图19-1：</p><p><img src="http://img.fdchen.host/%E5%BD%B1%E5%93%8D%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF.png" alt="影响分析报告模板"></p><center>图19-1 影响分析报告模板</center><h1 id="20-需求链中的联系链"><a href="#20-需求链中的联系链" class="headerlink" title="20 需求链中的联系链"></a>20 需求链中的联系链</h1><ul><li>需求跟踪包括编制每个需求同系统元素之间的联系文档。这些元素包括：别的需求、体系结构、其他设计部件、源代码模块、测试、帮助文件、文档等。</li></ul><h2 id="20-1-需求跟踪"><a href="#20-1-需求跟踪" class="headerlink" title="20.1 需求跟踪"></a>20.1 需求跟踪</h2><ol><li>跟踪联系链是能跟踪一个需求使用期限的全过程。即从需求源到实现的前后生存期。跟踪能力是优秀需求规格说明书的一个特征。</li><li>跟踪联系链，记录了单个需求之间的父层、互连、依赖的关系。当某个需求变更（被删除或修改）后，这种信息能够确保正确的变更传播，并将相应的任务作出正确的调整。</li><li>如图20-1，</li></ol><p><img src="http://img.fdchen.host/%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9C%80%E6%B1%82%E8%B7%9F%E8%B8%AA.png" alt="四种类型的需求跟踪"></p><center>图20-1 四种类型的需求跟踪</center><h2 id="20-2-需求跟踪动机"><a href="#20-2-需求跟踪动机" class="headerlink" title="20.2 需求跟踪动机"></a>20.2 需求跟踪动机</h2><p>下面是在项目中使用需求跟踪能力的一些好处：</p><ul><li>审核（certification） </li><li>变更影响分析</li><li>维护</li><li>项目跟踪</li><li>再设计（重新建造） </li><li>重复利用</li><li>减小风险</li><li>测试</li></ul><h2 id="20-3-需求跟踪矩阵"><a href="#20-3-需求跟踪矩阵" class="headerlink" title="20.3 需求跟踪矩阵"></a>20.3 需求跟踪矩阵</h2><p>表示需求和别的系统元素之间的联系链的最普遍方式是使用需求跟踪能力矩阵。如图20-2：</p><p><img src="http://img.fdchen.host/%E4%B8%80%E7%A7%8D%E9%9C%80%E6%B1%82%E8%B7%9F%E8%B8%AA%E8%83%BD%E5%8A%9B%E7%9F%A9%E9%98%B5.png" alt="一种需求跟踪能力矩阵"></p><center>图20-2 一种需求跟踪能力矩阵</center><h2 id="20-4-需求跟踪工具"><a href="#20-4-需求跟踪工具" class="headerlink" title="20.4 需求跟踪工具"></a>20.4 需求跟踪工具</h2><ul><li>需求跟踪能力，不能完全自动化。然而，一旦已确定联系链，特定工具就能帮我们管理巨大的跟踪能力信息。</li><li>可以在工具的数据库中存储需求和其他信息，定义不同对象间的联系链，甚至包括同类需求的对等联系链。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CQU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 软件需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_基本用法</title>
      <link href="/2020/java-ji-ben-yong-fa/"/>
      <url>/2020/java-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-二维数组传参"><a href="#1-二维数组传参" class="headerlink" title="1. 二维数组传参"></a>1. 二维数组传参</h3><ul><li>不同于C&#x2F;C++，Java二维数组传参必须使用array[] []，而不能使用array[] [2]。</li></ul><h3 id="2-List-add"><a href="#2-List-add" class="headerlink" title="2. List.add()"></a>2. List.add()</h3><ul><li>List.add()加入的元素为对应元素的引用，而不是值，示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// EdgeNode的变量为x0,deltaX,yMax</span><span class="token class-name">EdgeNode</span> edgeNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EdgeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EdgeNode</span><span class="token punctuation">></span></span> NET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EdgeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NET<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edgeNode<span class="token punctuation">)</span><span class="token punctuation">;</span>edgeNode<span class="token punctuation">.</span><span class="token function">setX0</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NET<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edgeNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>NET<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>NET<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果如下：</span><span class="token number">2.0</span> <span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-交换函数"><a href="#3-交换函数" class="headerlink" title="3. 交换函数"></a>3. 交换函数</h3><ul><li>直接交换和用包装类交换都不能交换两个数的值，而采用数组交换和成员变量交换是可以做到的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据分析_分布式计算框架MapReduce</title>
      <link href="/2020/da-shu-ju-fen-xi-fen-bu-shi-ji-suan-kuang-jia-mapreduce/"/>
      <url>/2020/da-shu-ju-fen-xi-fen-bu-shi-ji-suan-kuang-jia-mapreduce/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MapReduce概述"><a href="#1-MapReduce概述" class="headerlink" title="1 MapReduce概述"></a>1 MapReduce概述</h1><h2 id="1-1-MapReduce定义"><a href="#1-1-MapReduce定义" class="headerlink" title="1.1 MapReduce定义"></a>1.1 MapReduce定义</h2><ol><li>MapReduce是一个<strong>分布式运算程序的编程框架</strong>，是用户开发“基于Hadoop的<br>数据分析应用”的核心框架。</li><li>MapReducet核心功能是<strong>将用户编写的业务逻辑代码和自带默认组件整合成一个<br>完整的分布式运算程序，并发运行在一个Hadoop集群上。</strong></li></ol><h2 id="1-2-MapReduce优缺点"><a href="#1-2-MapReduce优缺点" class="headerlink" title="1.2 MapReduce优缺点"></a>1.2 MapReduce优缺点</h2><h3 id="1-2-1-优点"><a href="#1-2-1-优点" class="headerlink" title="1.2.1 优点"></a>1.2.1 优点</h3><ol><li><p>MapReduce易于编程<br>它简单的实现一些接口，就可以完成一个分布式程序，这个分布式程序可以分布到大量廉价的PC机器上运行。也就是说你写一个分布式程序，跟写一个简单的串行程序是一模一样的。就是因为这个特点使得MapReduce编程变得非常流行。</p></li><li><p>良好的扩展性<br>当尔的计算资源不能得到满足的时候，你可以通过简单的增加机器来扩展它的计算能力。</p></li><li><p>高容错性<br>MapReduce设计的初衷就是使程序能够部署在廉价的PC机器上，这就要求它具有很高的容错性。比如其中一台机器挂了，它可以把上面的计算任务转移到另外一个节点上运行，不至于这个任务运行失败，而且这个过程不需要人工参与，而完全是由Hadoop内部完成的。</p></li><li><p>适合PB级以上海量数据的离线处理<br>可以实现上千台服务器集群并发工作，提供好据处理能力。</p></li></ol><h3 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h3><ol><li>不擅长实时计算<br>MapReduce无法像MySQL一样，在毫秒或者秒级内返回结果。</li><li>不擅长流式计算<br>流式计算的输入数据是动态的，而MapReduce的输入数据集是静态的，不能动态变化。这是因为MapReduce自身的设计特点决定了数据源必须是静态的。</li><li>不擅长DAG（有向图）计算<br>多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情兄下，MapReduce并不是不能做，而是使用后，每个MapReducef作业的输出结果都会写入到磁盘，会造成大量的磁盘I&#x2F;O，导致性能非常的低下。</li></ol><span id="more"></span><h2 id="1-3-MapReduce核心思想"><a href="#1-3-MapReduce核心思想" class="headerlink" title="1.3 MapReduce核心思想"></a>1.3 MapReduce核心思想</h2><p><img src="http://img.fdchen.host/MapReduce%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3.png" alt="MapReduce核心编程思想"></p><center>图1.1 MapReduce核心编程思想</center><ul><li>分布式的运算程序往往需要分成至少2个阶段。</li></ul><ol><li>第一个阶段的MapTask并发实例，完全并行运行，互不相干。</li><li>第二个阶段的ReduceTask并发实例互不相干，但是他们的数据依赖于上一个阶段的所有MapTask并发实例的输出。</li><li>MapReduce编程模型<strong>只能包含一个Map阶段和一个Reduce阶段</strong>，如果用户的业务逻辑非常复杂，那就只能<strong>多个MapReduce程序，串行运行</strong>。</li></ol><h2 id="1-4-MapReduce进程"><a href="#1-4-MapReduce进程" class="headerlink" title="1.4 MapReduce进程"></a>1.4 MapReduce进程</h2><ul><li>一个完整的MapReduce程序分布式运行时有三类实例进程：</li></ul><ol><li><strong>MrAppMaster：</strong>负责整个程序的过程调度及状态协调。</li><li><strong>MapTask：</strong>负责Map阶段的整个数据处理流程。</li><li><strong>ReduceTask：</strong>负责Reduce阶段的整个数据处理流程。</li></ol><h2 id="1-5-官方WordCount源码"><a href="#1-5-官方WordCount源码" class="headerlink" title="1.5 官方WordCount源码"></a>1.5 官方WordCount源码</h2><p>采用反编译工具反编译源码，发现WordCount案例有Map类、Reduce类和驱动类。且数据的类型是Hadoop自身封装的序列化类型。</p><p><strong>Tip：</strong></p><ul><li><strong>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。详情见第2章。</strong></li></ul><h2 id="1-6-常用数据序列化类型"><a href="#1-6-常用数据序列化类型" class="headerlink" title="1.6 常用数据序列化类型"></a>1.6 常用数据序列化类型</h2><center>表1.1 常用的数据类型对应的Hadoop数据序列化类型</center><table><thead><tr><th><strong>Java类型</strong></th><th><strong>Hadoop Writable类型</strong></th></tr></thead><tbody><tr><td>boolean</td><td>BooleanWritable</td></tr><tr><td>byte</td><td>ByteWritable</td></tr><tr><td>int</td><td>IntWritable</td></tr><tr><td>float</td><td>FloatWritable</td></tr><tr><td>long</td><td>LongWritable</td></tr><tr><td>double</td><td>DoubleWritable</td></tr><tr><td>String</td><td>Text</td></tr><tr><td>map</td><td>MapWritable</td></tr><tr><td>array</td><td>ArrayWritable</td></tr></tbody></table><p><strong>Tip：有关IntWritable等序列化类型使用详见博客<a href="https://blog.csdn.net/ghuilee/article/details/45705169">《IntWritable详解》</a></strong></p><h2 id="1-7-MapReduce编程规范"><a href="#1-7-MapReduce编程规范" class="headerlink" title="1.7 MapReduce编程规范"></a>1.7 MapReduce编程规范</h2><ul><li>用户编写的程序分成三个部分：Mapper、Reducer和Driver。</li></ul><ol><li><strong>Mapper阶段</strong></li></ol><p>（1）用户自定义的Mapper要继承自己的父类<br>（2）Mapper的输入数据是KV(Key-Value)对的形式(KV的类型可自定义)<br>（3）Mapper中的业务逻辑写在map()方法中<br>（4）Mapper的输出数据是KV(Key-Value)对的形式(KV的类型可自定义)<br>（5）map()方法（MapTask进程）对<strong>每一个初始输入数据的&lt;K,V&gt;调用一次</strong></p><ol start="2"><li><strong>Reduce阶段</strong></li></ol><p>（1）用户自定义的Reducer要继承自己的父类<br>（2）Reducer的输入数据类型对应Mapper的输出数据类型，也是KV对<br>（3）Reducer的业务逻辑写在reduce()方法中<br>（4）ReduceTask进程对<strong>Mapper阶段输出的每一组相同k的&lt;k,v&gt;组调用一次</strong>reduce()方法</p><ol start="3"><li><strong>Driver阶段</strong></li></ol><p>相当于YARN集群的客户端，用于提交我们整个程序到YARN集群，提交的是封装了MapReduce程序相关运行参数job对象。</p><h2 id="1-8-WordCount案例实操"><a href="#1-8-WordCount案例实操" class="headerlink" title="1.8 WordCount案例实操"></a>1.8 WordCount案例实操</h2><ol><li><strong>需求</strong></li></ol><p>在给定的文本文件中统计输出每一个单词出现的总次数</p><p>（1）输入数据为文本文件：<a href="http://img.fdchen.host/hello.txt">hello.txt</a><br>（2）期望输出数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">atguigu<span class="token number">2</span>banzhang<span class="token number">1</span>cls<span class="token number">2</span>hadoop<span class="token number">1</span>jiao<span class="token number">1</span>ss<span class="token number">2</span>xue<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>需求分析</strong></li></ol><p>按照MapReduce编程规范，分别编写Mapper，Reducer，Driver，如图1.2：<br><img src="http://img.fdchen.host/WordCount%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="WordCount案例需求分析"></p><center>图1.2 WordCount案例需求分析</center><ol start="3"><li><strong>环境准备</strong></li></ol><p>（1）创建maven工程</p><p>（2）在pom.xml文件中添加如下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-hdfs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在项目的src&#x2F;main&#x2F;resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入如下内容：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m%n</span><span class="token attr-name">log4j.appender.logfile</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.FileAppender</span><span class="token attr-name">log4j.appender.logfile.File</span><span class="token punctuation">=</span><span class="token attr-value">target/spring.log</span><span class="token attr-name">log4j.appender.logfile.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.logfile.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>编写程序</strong></li></ol><p>（1）编写Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sound<span class="token punctuation">.</span>sampled<span class="token punctuation">.</span></span><span class="token class-name">Line</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span>  <span class="token comment">// 注意导入正确jar包：xxx.io.Text</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span></span><span class="token class-name">StackMapTable_attribute</span><span class="token punctuation">.</span>verification_type_info<span class="token punctuation">;</span><span class="token comment">/** * Map阶段 * @param  * KEYIN 输入数据的key * VALUEIN 输入数据的value * KEYOUT 输出数据的key的类型 * VALUEOUT 输出数据的value类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">Text</span> k <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntWritable</span>  v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span><span class="token comment">// 文本内容为： atguigu atguigu</span><span class="token comment">// 1  获取1行</span><span class="token class-name">String</span> line <span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 切割单词</span>        <span class="token comment">// 注意切割符号要正确，不然结果会出现偏差</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 循环写出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token operator">:</span>words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// set()将word设置为Text的值</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）编写Redcuer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span>  <span class="token comment">// 注意导入正确的jar包：xxx.mapreduce.Reducer</span><span class="token comment">// KEYIN VALUEIN map阶段输出的key和value</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">IntWritable</span>  v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Iterable&lt;IntWritable>为类型为IntWritable的迭代器</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span><span class="token comment">// 输入数据为： &lt;atguigu,1> &lt;atguigu,1></span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1 累加求和</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 写出atguigu 2</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写Driver驱动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>  <span class="token comment">// 注意导入正确jar包：xxx.conf.Configuration</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span>  <span class="token comment">// 注意导入正确jar包：xxx.mapreduce.Job</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span> <span class="token comment">// 注意导入正确jar包：xxx.lib.input.FileInputFormat</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token comment">// 注意导入正确jar包：xxx.lib.output.FileOutputFormat</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Configuration</span> conf<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 获取job对象</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar存储位置</span><span class="token comment">// setJar()表示设置固定的jar存储位置</span><span class="token comment">// setJarByClass()表示设置随主类变化的动态jar存储位置</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">WordCountDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关联Map和Reduce类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">WordCountMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">WordCountReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4  设置Mapper阶段输出数据的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出数据的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入路径和输出路径，路径设置为传参</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交job</span><span class="token comment">// job.submit();  过时方法</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果传参为true，在成功提交后会打印相关信息</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result<span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>本地测试</strong></li></ol><p>（1）如果电脑系统是win7的就将win7的hadoop jar包解压到非中文路径，并在Windows环境上配置HADOOP_HOME环境变量。如果是电脑win10操作系统，就解压win10的hadoop jar包，并配置HADOOP_HOME环境变量。</p><p><strong>Tip：win8电脑和win10家庭版操作系统可能有问题，需要重新编译源码或者更改操作系统。</strong></p><p>（2）在Eclipse&#x2F;Idea上运行程序，如图1.3：</p><p><img src="http://img.fdchen.host/RunConfiguration%E8%AE%BE%E7%BD%AE.jpg" alt="RunConfiguration设置"></p><center>图1.3 RunConfiguration设置</center><p><strong>Tip：输出路径目录必须未创建，不然会报错。</strong></p><ol start="6"><li><strong>集群上测试</strong></li></ol><p>（0）用maven打jar包，需要添加的打包插件依赖</p><p><strong>Tip：</strong></p><ul><li><strong>标记红颜色的部分需要替换为自己工程主类。</strong></li><li><strong>如果工程上显示红叉。在项目上右键-&gt;maven-&gt;update project即可。</strong></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.atguigu.mr.WordcountDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）将程序打成jar包，然后拷贝到Hadoop集群中</p><p><strong>步骤详情：右键-&gt;Run as-&gt;maven install。</strong>等待编译完成就会在项目的target文件夹中生成jar包。如果看不到。在项目上右键–&gt;Refresh，即可看到。修改不带依赖的jar包名称为wc.jar，并拷贝该jar包到Hadoop集群。</p><p>（2）启动Hadoop集群，<strong>可以启动伪分布式模式，但是一定要先启动NameNode和DataNode进程，再启动yarn进程，否则DataNode进程会yarn进程被屏蔽。</strong></p><p>（3）执行WordCount程序</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop jar wc<span class="token punctuation">.</span>jar mr<span class="token punctuation">.</span>WordCountDriver <span class="token operator">/</span>user/atguigu/input <span class="token operator">/</span>user/atguigu/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Tip：</strong></p><ul><li><p><strong>com.atguigu.wordcount.WordcountDriver为驱动类的全类名，在Eclipse里面右键点击类名选择”Copy Qualified Name”即可。</strong></p></li><li><p><strong>输入输出路径是本地路径还是集群路径由集群的运行模式决定，如果是本地模式则输入本地路径，伪分布式和完全分布式输入集群路径。</strong></p></li><li><p><strong>如图1.4报错无法操作存储节点，原因是DataNode被yarn进程屏蔽</strong></p></li></ul><p><img src="/" alt="DataNode被yarn进程屏蔽报错无法操作存储节点"></p><center>图1.4 DataNode被yarn进程屏蔽报错无法操作存储节点</center><ul><li><strong>如图1.5报错无法连接，原因是未启动yarn</strong></li></ul><p><img src="http://img.fdchen.host/DataNode%E8%A2%AByarn%E8%BF%9B%E7%A8%8B%E5%B1%8F%E8%94%BD%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E6%93%8D%E4%BD%9C%E9%9B%86%E7%BE%A4%E5%AD%98%E5%82%A8%E8%8A%82%E7%82%B9.jpg" alt="未启动yarn报错无法连接"></p><center>图1.5 未启动yarn报错无法连接</center><h1 id="2-Hadoop序列化"><a href="#2-Hadoop序列化" class="headerlink" title="2 Hadoop序列化"></a>2 Hadoop序列化</h1><h2 id="2-1-序列化概述"><a href="#2-1-序列化概述" class="headerlink" title="2.1 序列化概述"></a>2.1 序列化概述</h2><h3 id="2-1-1-什么是序列化"><a href="#2-1-1-什么是序列化" class="headerlink" title="2.1.1 什么是序列化"></a>2.1.1 什么是序列化</h3><ol><li><strong>序列化</strong>就是<strong>把内存中的对象，转换成字节序列（或其他数据传输协议）</strong>以便于存储到磁盘（持久化）和网络传输。</li><li><strong>反序列化</strong>就是将收到字节序列（或其他数据传输协议）或者是<strong>磁盘的持久化数据，转换成内存中的对象</strong>。</li></ol><h3 id="2-1-2-为什么要序列化"><a href="#2-1-2-为什么要序列化" class="headerlink" title="2.1.2 为什么要序列化"></a>2.1.2 为什么要序列化</h3><p>一般来说，“活的”对象只生存在内存里，关机断电就没有了。而且“活的”对象只能由本地的进程使用，不能被发送到网络上的另外一台计算机。然而<strong>序列化可以存储“活的”对象，可以将“活的”对象发送到远程计算机。</strong></p><h3 id="2-1-3-为什么不用Java的序列化"><a href="#2-1-3-为什么不用Java的序列化" class="headerlink" title="2.1.3 为什么不用Java的序列化"></a>2.1.3 为什么不用Java的序列化</h3><p>Java的序列化是一个重量级序列化框架(Serializable)，<strong>一个对象被序列化后，会附带很多额外的信息（各种校验信息，Header，继承体系等），不便于在网络中高效传输</strong>。所以，Hadoop自己开发了一套序列化机制(Writable) 。</p><h3 id="2-1-4-Hadoop排序列化特点"><a href="#2-1-4-Hadoop排序列化特点" class="headerlink" title="2.1.4 Hadoop排序列化特点"></a>2.1.4 Hadoop排序列化特点</h3><ul><li><strong>紧凑：</strong>高效使用存储空间。</li><li><strong>快速：</strong>读写数据的额外开销小。</li><li><strong>可扩展：</strong>可随着通信协议的升级而升级。</li><li><strong>互操作：</strong>支持多语言的交互。</li></ul><p><strong>Tip：读写数据的额外开销指的是由于提供检索而额外产生的存储开销等。</strong></p><h2 id="2-2-自定义bean对象实现序列化接口（Writable）"><a href="#2-2-自定义bean对象实现序列化接口（Writable）" class="headerlink" title="2.2 自定义bean对象实现序列化接口（Writable）"></a>2.2 自定义bean对象实现序列化接口（Writable）</h2><p>在企业开发中往往常用的基本序列化类型不能满足所有需求，比如在Hadoop框架内部传递一个bean对象，那么该对象就需要实现序列化接口。</p><p><strong>Tip：JavaBean简单的讲就是实体类，用来封装对象，这个类里面全部都是属性值和get，set方法。</strong></p><p>具体实现bean对象序列化步骤如下6步。</p><ol><li><p>必须实现Writable接口</p></li><li><p>反序列化时，需要反射调用空参构造函数，所以必须有空参构造</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重写序列化方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>sumFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>重写反序列化方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>upFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>downFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sumFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：注意反序列化的顺序和序列化的顺序要求完全一致，理由是序列化存储到磁盘采用的是队列式传输，先进先出，则先序列化的对象先存储，在磁盘读取时先反序列化最先序列化的对象。</strong></p><ol start="5"><li><p>要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用。</p></li><li><p>如果需要将自定义的bean放在key中传输，则还需要实现Comparable接口，因为<strong>MapReduce框中的Shuffle过程要求对key必须能排序</strong>。详见后面排序案例。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 倒序排列，从大到小</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-序列化案例实操"><a href="#2-3-序列化案例实操" class="headerlink" title="2.3 序列化案例实操"></a>2.3 序列化案例实操</h2><h3 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1 需求"></a>2.3.1 需求</h3><ul><li>目标：统计每一个手机号耗费的总上行流量、下行流量、总流量。</li></ul><ol><li>输入数据：<a href="http://img.fdchen.host/phone_data%20.txt">phone_data.txt</a></li><li>输入数据格式</li></ol><pre class="line-numbers language-none"><code class="language-none">7 13560436666120.196.100.991116 954200id手机号码网络ip上行流量  下行流量     网络状态码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>期望输出数据格式</li></ol><pre class="line-numbers language-none"><code class="language-none">13560436666    1116      954 2070手机号码    上行流量        下行流量总流量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-1-需求分析"><a href="#2-3-1-需求分析" class="headerlink" title="2.3.1 需求分析"></a>2.3.1 需求分析</h3><ol><li><strong>Map阶段</strong></li></ol><p>（1）读取一行数据，切分字段</p><pre class="line-numbers language-none"><code class="language-none">7 13560436666120.196.100.991116 954200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）抽取手机号、上行流量、下行流量</p><pre class="line-numbers language-none"><code class="language-none">13560436666   1116    954手机号码上行流量  下行流量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）以手机号为key，bean对象为value输出，即context.write(手机号,bean);</p><p>（4）bean对象要想能够传输，必须实现序列化接口</p><ol start="2"><li><strong>Reduce阶段</strong></li></ol><p>（1）累加上行流量和下行流量得到总流量。</p><pre class="line-numbers language-none"><code class="language-none">13560436666   1116 +  954   &#x3D;  2070手机号码上行流量  下行流量   总流量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-3-编写MapReduce程序"><a href="#2-3-3-编写MapReduce程序" class="headerlink" title="2.3.3 编写MapReduce程序"></a>2.3.3 编写MapReduce程序</h3><ol><li><strong>编写流量统计的Bean对象</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Writable</span><span class="token punctuation">;</span><span class="token comment">// 1 实现writable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowBean</span> <span class="token keyword">implements</span> <span class="token class-name">Writable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">long</span> upFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> sumFlow<span class="token punctuation">;</span><span class="token comment">// 2 反序列化时，需要反射调用空参构造函数，所以必须定义空参构造函数</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 注意补充this.sumFlow = upFlow + downFlow;</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">,</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> upFlow <span class="token operator">+</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3  序列化方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>sumFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4 反序列化方法</span><span class="token comment">// 反序列化方法读顺序必须和写序列化方法的写顺序必须一致</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 6 编写toString方法，方便后续打印到文本，注意使用"\t"隔开</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> upFlow <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> downFlow <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getUpFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDownFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDownFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSumFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> sumFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：构造函数和get与set方法可以由Eclipse自动生成，点击右键–&gt;”source”–&gt;选择想要生成的方法，然后选择需要传入的参数即可。</strong></p><ol start="2"><li><strong>编写Mapper类</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token comment">// 注意导入正确jar包，Text类的包很容易导入错误</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token comment">// LongWritable代表行的偏移量，Text代表这一行的内容</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">// map方法需要循环多次调用，所以两个输出变量定义在map方法外</span><span class="token class-name">FlowBean</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用Text类型变量代表手机号</span><span class="token comment">// 1 获取1行</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span><span class="token class-name">Text</span> value<span class="token punctuation">,</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取1行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 切割字段</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 封装对象</span><span class="token comment">// 取出手机号码</span><span class="token class-name">String</span> phoneNum <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 取出上行流量和下行流量</span><span class="token keyword">long</span> upFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> downFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phoneNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// v.setUpFlow(upFlow);</span><span class="token comment">// v.setDownFlow(downFlow);</span><span class="token comment">// 也可在FlowBean里面定义set(downFlow,upFlow);</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">,</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>编写Reducer类</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token comment">// 注意导入正确jar包，Text类的包很容易导入错误</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> sum_upFlow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> sum_downFlow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1 遍历所有bean，将其中的上行流量，下行流量分别累加</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> flowBean<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum_upFlow<span class="token operator">+=</span>flowBean<span class="token punctuation">.</span><span class="token function">getUpFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum_downFlow<span class="token operator">+=</span>flowBean<span class="token punctuation">.</span><span class="token function">getDownFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2 封装对象</span><span class="token class-name">FlowBean</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span>sum_upFlow<span class="token punctuation">,</span>sum_downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resultBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>编写Driver驱动类</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token comment">// 注意导入正确jar包，Text类的包很容易导入错误</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 加入此行代码后在本地测试时不必再设置run configuration</span>        <span class="token comment">// 但在集群运行时需要把此行代码删去</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"d:/input/inputFlow"</span><span class="token punctuation">,</span><span class="token string">"d:/outputFlow"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 获取job对象</span><span class="token class-name">Job</span> job<span class="token operator">=</span><span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关联mapper和reducer</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置mapper输出的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入输出路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交job</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-MapReduce框架原理"><a href="#3-MapReduce框架原理" class="headerlink" title="3 MapReduce框架原理"></a>3 MapReduce框架原理</h1><h2 id="3-1-InputFormat数据输入"><a href="#3-1-InputFormat数据输入" class="headerlink" title="3.1 InputFormat数据输入"></a>3.1 InputFormat数据输入</h2><h3 id="3-1-1-切片与MapTask并行度决定机制"><a href="#3-1-1-切片与MapTask并行度决定机制" class="headerlink" title="3.1.1 切片与MapTask并行度决定机制"></a>3.1.1 切片与MapTask并行度决定机制</h3><ol><li>问题引出</li></ol><ul><li>MapTask的并行度决定Map阶段的任务处理并发度，进而影响到整个Job的处理速度。</li><li>1G的数据，启动8个MapTask，可以提高集群的并发处理能力。那么1K的数据，也启动8个MapTask，会提高集群性能吗？MapTask并行任务是否越多越好呢？哪些因素影响了MapTask并行度？</li></ul><ol start="2"><li>MapTask并行度决定机制</li></ol><ul><li><strong>数据块：</strong>Block是HDFS物理上把数据分成一块一块。</li><li><strong>数据切片：</strong>数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。</li><li>MapTask并行度决定机制如图3.1：</li></ul><p><img src="http://img.fdchen.host/MapTask%E5%B9%B6%E8%A1%8C%E5%BA%A6%E5%86%B3%E5%AE%9A%E6%9C%BA%E5%88%B6.png" alt="MapTask并行度决定机制"></p><center>图3.1 MapTask并行度决定机制</center><ul><li>当切片大小为BlockSize时效率最高，因为此时的I&#x2F;O开销很小。</li></ul><h3 id="3-1-2-Job提交流程源码和切片源码详解"><a href="#3-1-2-Job提交流程源码和切片源码详解" class="headerlink" title="3.1.2 Job提交流程源码和切片源码详解"></a>3.1.2 Job提交流程源码和切片源码详解</h3><ol><li><strong>Job提交流程源码详解</strong></li></ol><p>（1）源码结构如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1建立连接</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1）创建提交Job的代理</span><span class="token keyword">new</span> <span class="token class-name">Cluster</span><span class="token punctuation">(</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （1）判断是本地yarn还是远程</span><span class="token function">initialize</span><span class="token punctuation">(</span>jobTrackAddr<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 提交job</span>submitter<span class="token punctuation">.</span><span class="token function">submitJobInternal</span><span class="token punctuation">(</span><span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token comment">// 1）创建给集群提交数据的Stag路径</span><span class="token class-name">Path</span> jobStagingArea <span class="token operator">=</span> <span class="token class-name">JobSubmissionFiles</span><span class="token punctuation">.</span><span class="token function">getStagingDir</span><span class="token punctuation">(</span>cluster<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2）获取jobid ，并创建Job路径</span><span class="token class-name">JobID</span> jobId <span class="token operator">=</span> submitClient<span class="token punctuation">.</span><span class="token function">getNewJobID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3）拷贝jar包到集群</span><span class="token function">copyAndConfigureFiles</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> submitJobDir<span class="token punctuation">)</span><span class="token punctuation">;</span>rUploader<span class="token punctuation">.</span><span class="token function">uploadFiles</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> jobSubmitDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4）计算切片，生成切片规划文件</span><span class="token function">writeSplits</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> submitJobDir<span class="token punctuation">)</span><span class="token punctuation">;</span>maps <span class="token operator">=</span> <span class="token function">writeNewSplits</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> jobSubmitDir<span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">getSplits</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5）向Stag路径写XML配置文件</span><span class="token function">writeConf</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> submitJobFile<span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">writeXml</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6）提交Job,返回提交状态</span>status <span class="token operator">=</span> submitClient<span class="token punctuation">.</span><span class="token function">submitJob</span><span class="token punctuation">(</span>jobId<span class="token punctuation">,</span> submitJobDir<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> job<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）Job提交流程图解，如图3.2：</p><p><img src="http://img.fdchen.host/Job%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="Job提交流程图解"></p><center>图3.2 Job提交流程图解</center><ol start="2"><li><strong>FileInputFormat切片源码解析(input.getSplits(job))</strong></li></ol><p>（1）<strong>程序先找到数据存储的目录。</strong><br>（2）<strong>开始遍历处理（规划切片）目录下的每一个文件。</strong><br>（3）<strong>遍历第一个文件ss.txt</strong></p><ul><li>获取文件大小fs.sizeOf(ss.txt)；</li><li>计算切片大小；<br>computeSplitSize(Math.max(minSize, Math.min(maxSize, blocksze)))&#x3D;blocksize&#x3D;128M</li><li>默认情况下，切片大小&#x3D;blodksize；</li><li>开始切，形成第1个切片: ss.txt—0:128M第2个切片ss.txt—128:256M第3个切片ss.txt—256M:300M；<br>(每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分成一块切片</li><li>将切片信息写到一个切片规划文件中；</li><li>整个切片的核心过程在getSplit()方法中完成；</li><li>lnputSplit只记录了切片的元数据信息，比如起始位置、长度以及所在的节点列表等。</li></ul><p>（4）<strong>提交切片规划文件到YARN上，YARN上的MapReducer就可以很据切片规划文件计算开启MapTask个数。</strong></p><p><strong>Tip：本地模式的BlockSize为32M，Hadoop 1.x为64M，Hadoop 2.x为128M。</strong></p><h3 id="3-1-3-FileInputFormat切片机制"><a href="#3-1-3-FileInputFormat切片机制" class="headerlink" title="3.1.3 FileInputFormat切片机制"></a>3.1.3 FileInputFormat切片机制</h3><ol><li><strong>切片机制</strong></li></ol><p>（1）简单地按照文件的内容长度进行切片；</p><p>（2）切片大小，默认等于Block大小；</p><p>（3）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片。</p><ol start="2"><li><strong>FileInputFormat切片大小的参数配置</strong></li></ol><p>（1）<strong>源码中计算切片大小的公式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minSize<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span>blockSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// mapreduce.input.fileinputformat.split.minize=1，默认值为1</span><span class="token comment">// mapreduce.input.fileinputformat.split.maxsize=Long.MAXValue，默认值是Long.MAXValue</span><span class="token comment">// 默认情况下，切片大小=blockSize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<strong>切片大小设置</strong></p><p>maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。</p><p>minsize（切片最小值）参数如果调得比blocksize大，则可以让切片变得比blockSize还大。</p><p>（3）<strong>获取切片信息API</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取切片的文件名称</span><span class="token class-name">String</span> name <span class="token operator">=</span> inputSplit<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据文件类型获取切片信息</span><span class="token class-name">FileSplit</span> inputSplit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FileSplit</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getInputSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-4-CombineTextInputFormat切片机制"><a href="#3-1-4-CombineTextInputFormat切片机制" class="headerlink" title="3.1.4 CombineTextInputFormat切片机制"></a>3.1.4 CombineTextInputFormat切片机制</h3><p>框架默认的TextInputFormat切片机制是对任务按文件规划切片，<strong>不管文件多小，都会是一个单独的切片</strong>，都会交给一个MapTask，这样<strong>如果有大量小文件，就会产生大量的MapTask</strong>，处理效率极其低下。</p><ol><li><strong>应用场景</strong></li></ol><p>CombineTextInputFormat用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask处理。</p><ol start="2"><li><strong>虚拟存储切片最大值设置</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">4194304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Tip：虚拟存储切片最大值设置最好根据实际的小文件大小分布情况来设置具体的值。</strong></p><ol start="3"><li><strong>切片机制</strong></li></ol><ul><li>生成切片过程包括：<strong>虚拟存储过程和切片过程二部分</strong>。</li></ul><p><img src="http://img.fdchen.host/CombineTextInputFormat%E5%88%87%E7%89%87%E6%9C%BA%E5%88%B6.png" alt="CombineTextInputFormat切片机制"></p><center>图3.3 CombineTextInputFormat切片机制</center><p>（1）<strong>虚拟存储过程：</strong></p><p>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。<strong>如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</strong><br>例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。</p><p>（2）<strong>切片过程：</strong></p><p>（a）判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。<br>（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。<br>（c）测试举例：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：<br>1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）<br>最终会形成3个切片，大小分别为：<br>（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</p><h3 id="3-1-5-CombineTextInputFormat案例实操"><a href="#3-1-5-CombineTextInputFormat案例实操" class="headerlink" title="3.1.5 CombineTextInputFormat案例实操"></a>3.1.5 CombineTextInputFormat案例实操</h3><ol><li><strong>需求：</strong>将输入的大量小文件合并成一个切片统一处理。</li></ol><p>（1）输入数据：准备4个小文件</p><p>（2）期望：期望1个切片处理4个文件</p><ol start="2"><li><strong>实现过程</strong></li></ol><p>（1）<strong>不做任何处理，运行WordCount案例程序（自行准备4个小文件，大小对应3.1.4节中四个小文件大小），在控制台观察打印信息，显示切片个数为4。</strong></p><pre class="line-numbers language-none"><code class="language-none">number of splits:4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）<strong>在WordcountDriver中增加如下代码，运行程序，并观察运行的切片个数为3。</strong></p><ul><li>在驱动类中添加代码如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果不设置InputFormat，它默认用的是TextInputFormat.class</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虚拟存储切片最大值设置4m</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">4194304</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在控制台观察打印信息，运行结果为3个切片</li></ul><pre class="line-numbers language-none"><code class="language-none">number of splits:3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）<strong>在WordcountDriver中增加如下代码，运行程序，并观察运行的切片个数为1。</strong></p><ul><li>在驱动类中添加代码如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果不设置InputFormat，它默认用的是TextInputFormat.class</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虚拟存储切片最大值设置20m</span><span class="token class-name">CombineTextInpu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在控制台观察打印信息，运行结果为3个切片</li></ul><pre class="line-numbers language-none"><code class="language-none">number of splits:1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-6-FileInputFormat实现类"><a href="#3-1-6-FileInputFormat实现类" class="headerlink" title="3.1.6 FileInputFormat实现类"></a>3.1.6 FileInputFormat实现类</h3><ul><li><strong>Q：</strong>在运行MapReduce程序时，输入的文件格式包括:基于行的日志文件、二进制格式文件、数据库表等。那么，针对不同的数据类型，MapReduce是如何读取这些数据的呢?</li><li><strong>A：</strong>FileInputFormat常见的接口实现类包括：<strong>TextInputFormat 、KeyValueTextInputFormat、NLineInputF ormat、CombineTextInputFormat和自定义InputFormat</strong>等。</li></ul><p><strong>Tip：在Eclipse中点击FileInputFormat类，然后按下“CTRL+T”可查看FileInputFormat类的层级结构，如图3.4：</strong></p><p><img src="http://img.fdchen.host/FileInputFormat%E7%B1%BB%E7%9A%84%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84.jpg" alt="FileInputFormat类的层级结构"></p><center>图3.4 FileInputFormat类的层级结构</center><ol><li><strong>TextInputFormat</strong></li></ol><ul><li><p>TextInputFormat是默认的FileIrputFormat实现类。<strong>按行读取每条记录。键是存储该行在整个文件中的起始字节偏移量（相对于文档开始位置的偏移量，包括换行符和回车符），LongWritable类型。值是这行的内容，不包括任何行终止符（换行符和回车符〉，Text类型。</strong></p></li><li><p>文本示例如下：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">Rich learning formIntelligent learning engineLearning more convenientFrom the real demand for more close to the enterprise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每条记录表示为以下键&#x2F;值对：</li></ul><pre class="line-numbers language-none"><code class="language-none">(0,Rich learning form)(19,Intelligent learning engine)(47,Learning more convenient)(72,From the real demand for more close to the enterprise)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>KeyValueFormat实现类</strong></li></ol><ul><li>每一行均为一条记录，被分隔符分割为key , value。可以通过在驱动类中设置conf.set(KeyValueLineRecordReaderKEY_VALUE_SEFERATOR,”\t”);来设定分隔符。默认分隔符是tab (\t)。</li><li>以下是一个示例，输入是一个包含4条记录的分片。其中——&gt;表标一个(水平方向的)制表符。</li></ul><pre class="line-numbers language-none"><code class="language-none">linel——&gt;Rich learning formlinez——&gt;Intelligent learning engineline3——&gt;Learning more convenientline4——&gt;From the real demand for more close to the enterprise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每条记录表示为以下键&#x2F;值对</li></ul><pre class="line-numbers language-none"><code class="language-none">(linel,Rich learning form )(line2,Intelligent learning enginej)(line3,Learning more convenient)(line4,From the real demand for more close to the enterprise)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：此时的键是每行排在分隔符（制表符）之前的Text序列。</strong></p><ol start="3"><li><strong>NLineInputFormat</strong></li></ol><ul><li>如果使用NlineInputFormat，代表每个map进程处理的InputSplit不再按Block块去划分，而是按NineInptFormat指定的行数N味划分。即输入文件的总行数N&#x3D;切片数，如果不整除，切片数&#x3D;商+1。</li><li>以下是一个示例，仍然以上面的4行输入为例：</li></ul><pre class="line-numbers language-none"><code class="language-none">Rich learning formIntelligent learning engineLearning more convenientFrom the real demand for more close to the enterprise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如，如果N是2，则每个输入分片包含2行，开启两个MapTask。</li></ul><pre class="line-numbers language-none"><code class="language-none">(0,Rich learning form)(19,Intelligent learning engine)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">(47,Learning more convenient)(72,From the real demand for more close to the enterprise)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Tip：这里的键和值与TextInputFormat生成的一样。</strong></p><h3 id="3-1-7-KeyValueTextInputFormat使用案例"><a href="#3-1-7-KeyValueTextInputFormat使用案例" class="headerlink" title="3.1.7 KeyValueTextInputFormat使用案例"></a>3.1.7 KeyValueTextInputFormat使用案例</h3><ol><li><strong>需求：</strong>统计输入文件每一行的第一个单词相同的行数。</li></ol><p>（1）输入数据</p><pre class="line-numbers language-none"><code class="language-none">banzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）期望结果数据</p><pre class="line-numbers language-none"><code class="language-none">banzhang2xihuan2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>案例分析</strong></li></ol><p><img src="http://img.fdchen.host/KeyValueTextInputFormat%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="KeyValueTextInputFormat使用案例分析"></p><center>图3.5 KeyValueTextInputFormat使用案例分析</center><ol start="3"><li><strong>编写代码</strong></li></ol><p>（1）编写Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KVTextMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">// 1 封装对象</span><span class="token class-name">LongWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入数据格式：bangzhang ni hao</span><span class="token comment">// 2 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）编写Reducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KVTextReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">LongWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入数据格式：&lt;bangzhang, 1></span><span class="token comment">// 1 求和统计</span><span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// get()方法获取LongWritable类型的值</span>sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 输出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写Driver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token comment">// 以下jar包务必保证正确，采用mapreduce下的jar包，mapred下的jar包已经过时</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">KeyValueLineRecordReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">KeyValueTextInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KVTextDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 本地模式下设置输入输出路径</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"d:/input/inputKVText"</span><span class="token punctuation">,</span><span class="token string">"d:/outputKVText"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置切割符号为空格</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">KeyValueLineRecordReader</span><span class="token punctuation">.</span>KEY_VALUE_SEPERATOR<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1  获取job对象</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar包位置</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">KVTextDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关联Mapper类和Reducer类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">KVTextMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">KVTextReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置Map阶段输出数据的key-value类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出数据的key-value类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入输出数据路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置输入格式</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">KeyValueTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-8-NLineInputFormat使用案例"><a href="#3-1-8-NLineInputFormat使用案例" class="headerlink" title="3.1.8 NLineInputFormat使用案例"></a>3.1.8 NLineInputFormat使用案例</h3><ol><li><strong>需求：</strong>对每个单词进行个数统计，要求根据每个输入文件的行数来规定输出多少个切片。此案例要求每三行放入一个切片中。</li></ol><p>（1）输入数据</p><pre class="line-numbers language-none"><code class="language-none">banzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhang banzhang ni haoxihuan hadoop banzhang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）期望输出数据</p><pre class="line-numbers language-none"><code class="language-none">控制台显示：Number of splits:4文件输出：banzhang12hadoop6hao6ni6xihuan6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>需求分析</strong></li></ol><p><img src="http://img.fdchen.host/NLineInputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="NLineInputFormat案例分析"></p><center>图3.6 NLineInputFormat案例分析</center><p>3 <strong>代码实现</strong></p><p>（1）编写Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NLineTextMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">// 定义输出键值对</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LongWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入数据格式 Rich learning form</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 按照空格切分</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 循环写出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>splits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>splits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）编写Reducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token comment">// Reduce</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NLineTextReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">LongWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">LongWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入数据格式：&lt;Rich,1> &lt;learning,1></span><span class="token comment">// 1 汇总求和</span><span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 输出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写Driver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">NLineInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NLineTextDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>args<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"d:/input/inputNLineText"</span><span class="token punctuation">,</span><span class="token string">"d:/outputNLineText"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 获取job对象</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar包位置</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">NLineTextDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关联Mapper和Reducer类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">NLineTextMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">NLineTextReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置Mpper阶段的输出key-value数据格式</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出key-value数据格式</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入输出路径，注意修改输入格式</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置输入格式</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">NLineInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置每个切片划分三行记录</span><span class="token class-name">NLineInputFormat</span><span class="token punctuation">.</span><span class="token function">setNumLinesPerSplit</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）<strong>测试</strong></p><ul><li>输入数据如下</li></ul><pre class="line-numbers language-none"><code class="language-none">banzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhangbanzhang ni haoxihuan hadoop banzhang banzhang ni haoxihuan hadoop banzhang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台运行结果如下</li></ul><p><img src="http://img.fdchen.host/NLineInputFormat%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE.jpg" alt="NLineInputFormat使用案例运行截图"></p><center>图3.7 NLineInputFormat使用案例运行截图</center><ul><li>输出结果如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">banzhang12hadoop6hao6ni6xihuan6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-9-自定义InputFormat"><a href="#3-1-9-自定义InputFormat" class="headerlink" title="3.1.9 自定义InputFormat"></a>3.1.9 自定义InputFormat</h3><ul><li>在企业开发中，Hadoop框架自带的InputF ormmat类型不能满足所有应用场，需要自定义InputFormat来解决实际问题。</li><li>自定义InputFormat步骡如下:<br>（1）自定义一个类继承FileInputFormat。<br>（2）改写RecordReader，实现一次读取一个完整文件封装为KV。<br>（3）在输出时使用SequenceFileOutPutFormat输出合并文件。</li></ul><h3 id="3-1-10-自定义InputFormat案例实操"><a href="#3-1-10-自定义InputFormat案例实操" class="headerlink" title="3.1.10 自定义InputFormat案例实操"></a>3.1.10 自定义InputFormat案例实操</h3><ul><li>无论HDFS还是MapReduce，在处理小文件时效率都非常低，但又难免面临处理大量小文件的场景，此时，就需要有相应解决方案。可以自定义InputFormat实现小文件的合并。</li></ul><ol><li><strong>需求</strong></li></ol><p>将多个小文件合并成一个SequenceFile文件（<strong>SequenceFile文件是Hadoop用来存储二进制形式的key-value对的文件格式</strong>），SequenceFile里面存储着多个文件，<strong>存储的形式为文件路径+名称为key，文件内容为value</strong>。</p><p>（1）输入数据</p><ul><li>三个小文件：<a href="http://img.fdchen.host/one.txt">one.txt</a>，<a href="http://img.fdchen.host/two.txt">two.txt</a>，<a href="http://img.fdchen.host/three.txt">three.txt</a></li></ul><p>（2）期望输出文件格式，SequenceFile文件</p><ul><li><a href="http://img.fdchen.host/WholeFileInputFormat-part-r-00000">part-0000</a></li></ul><p>内容如下</p><pre class="line-numbers language-none"><code class="language-none">SEQorg.apache.hadoop.io.Text&quot;org.apache.hadoop.io.BytesWritable      ?奀Wu授X@鼧?   W   &quot;!file:&#x2F;e:&#x2F;inputinputformat&#x2F;one.txt   1yongpeng weidong weinansanfeng luozong xiaoming   Y   $#file:&#x2F;e:&#x2F;inputinputformat&#x2F;three.txt   1shuaige changmo zhenqiang dongli lingu xuanxuan   €   &quot;!file:&#x2F;e:&#x2F;inputinputformat&#x2F;two.txt   Zlonglong fanfanmazong kailun yuhang yixinlonglong fanfanmazong kailun yuhang yixin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>需求分析</strong></li></ol><p><img src="http://img.fdchen.host/%E8%87%AA%E5%AE%9A%E4%B9%89InputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="自定义InputFormat案例分析"></p><center>图3.8 自定义InputFormat案例分析</center><ol start="3"><li><strong>程序实现</strong></li></ol><p>（1）自定义InputFormat</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BytesWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">InputSplit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">JobContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">RecordReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">TaskAttemptContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WholeFileInputFormat</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputFormat</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">// 一定不能漏</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSplitable</span><span class="token punctuation">(</span><span class="token class-name">JobContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Path</span> filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RecordReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span> <span class="token function">createRecordReader</span><span class="token punctuation">(</span><span class="token class-name">InputSplit</span> split<span class="token punctuation">,</span> <span class="token class-name">TaskAttemptContext</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token class-name">WholeRecordReader</span> recordReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WholeRecordReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recordReader<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> recordReader<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）自定义RecordReader类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">FSDataInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">FileSystem</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BytesWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">InputSplit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">RecordReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">TaskAttemptContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileSplit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WholeRecordReader</span> <span class="token keyword">extends</span> <span class="token class-name">RecordReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">FileSplit</span> split<span class="token punctuation">;</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span><span class="token class-name">Text</span> k <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BytesWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isProgress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 依据map源码设置</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">InputSplit</span> split<span class="token punctuation">,</span> <span class="token class-name">TaskAttemptContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 初始化</span><span class="token keyword">this</span><span class="token punctuation">.</span>split<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">FileSplit</span><span class="token punctuation">)</span>split<span class="token punctuation">;</span><span class="token comment">// 通过上下文获取配置信息</span>configuration <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">nextKeyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 核心业务逻辑处理</span><span class="token keyword">if</span><span class="token punctuation">(</span>isProgress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>split<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1  获取fs对象</span><span class="token class-name">Path</span> path <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2  获取输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 拷贝</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> buf <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 封装v</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 封装k</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>isProgress<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Text</span> <span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">BytesWritable</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：依据Mapper类的run函数源码，需要设置标志位来保证nextKeyValue只执行一次，即保证一个文件只读取一次。run函数源码如下：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">nextKeyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">map</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BytesWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputFormatMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span><span class="token class-name">BytesWritable</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 直接写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）编写Reducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BytesWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputFormatReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BytesWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 循环写出</span>        <span class="token comment">// 因为Driver类中设置的输出类是SequenceFileOutputFormat类，所以Reducer输出只需要按文件名-文件内容的键值对形式输出即可</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">BytesWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）编写Driver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BytesWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">SequenceFileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputFormatDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"d:/input/inputInputFormat"</span><span class="token punctuation">,</span> <span class="token string">"d:/outputInputFormat"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token comment">// 1 获取job对象</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 2 设置jar包存储位置、关联自定义的mapper和reducer</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">InputFormatDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">InputFormatMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">InputFormatReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 7 设置输入的inputFormat，设置为自定义的InputFormat类</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">WholeFileInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 8 设置输出的outputFormat，设置为SequenceFileOutputFormat类</span>job<span class="token punctuation">.</span><span class="token function">setOutputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">SequenceFileOutputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 3 设置map输出端的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">BytesWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 4 设置最终输出端的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">BytesWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 5 设置输入输出路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 6 提交job</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-MapReduce工作流程"><a href="#3-2-MapReduce工作流程" class="headerlink" title="3.2 MapReduce工作流程"></a>3.2 MapReduce工作流程</h2><h3 id="3-2-1-MapReduce工作流程示意图"><a href="#3-2-1-MapReduce工作流程示意图" class="headerlink" title="3.2.1 MapReduce工作流程示意图"></a>3.2.1 MapReduce工作流程示意图</h3><p><img src="http://img.fdchen.host/MapReduce%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89.png" alt="MapReduce工作流程（一）"></p><center>图3.9 MapReduce工作流程（一）</center><p><img src="http://img.fdchen.host/MapReduce%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89.png" alt="MapReduce工作流程（二）"></p><center>图3.10 MapReduce工作流程（二）</center><h3 id="3-2-2-MapReduce工作流程详解"><a href="#3-2-2-MapReduce工作流程详解" class="headerlink" title="3.2.2 MapReduce工作流程详解"></a>3.2.2 MapReduce工作流程详解</h3><p>上面的流程是整个MapReduce最全工作流程，但是Shuffle过程只是从第7步开始到第16步结束，具体Shuffle过程详解，如下：</p><ol><li>MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中；</li><li>从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件；</li><li>多个溢出文件会被合并成大的溢出文件；</li><li>在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序；</li><li>ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据；</li><li>ReduceTask会取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）；</li><li>合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</li></ol><h3 id="3-2-3-注意点"><a href="#3-2-3-注意点" class="headerlink" title="3.2.3 注意点"></a>3.2.3 注意点</h3><ol><li><p>Shuffle中的缓冲区大小会影响到MapReduce程序的执行效率，原则上说，缓冲区越大，<strong>磁盘IO的次数越少，执行速度就越快</strong>。</p></li><li><p>缓冲区的大小可以通过参数调整，参数：io.sort.mb默认100M。</p></li></ol><h3 id="3-2-4-源码解析工作流程"><a href="#3-2-4-源码解析工作流程" class="headerlink" title="3.2.4 源码解析工作流程"></a>3.2.4 源码解析工作流程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按照层级结构依次调用的主要函数如下</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span>partitioner<span class="token punctuation">.</span><span class="token function">getPartition</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> partitions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashPartitioner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>collect<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">sortAndSpill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token class-name">QuickSort</span><span class="token function">mergeParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>collector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-Shuffle机制"><a href="#3-3-Shuffle机制" class="headerlink" title="3.3 Shuffle机制"></a>3.3 Shuffle机制</h2><h3 id="3-3-1-Shuffle机制"><a href="#3-3-1-Shuffle机制" class="headerlink" title="3.3.1 Shuffle机制"></a>3.3.1 Shuffle机制</h3><ul><li>Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。如图3.11所示：</li></ul><p><img src="http://img.fdchen.host/Shuffle%E6%9C%BA%E5%88%B6.png" alt="Shuffle机制"></p><center>图3.11 Shuffle机制</center><h3 id="3-3-2-Partition分区"><a href="#3-3-2-Partition分区" class="headerlink" title="3.3.2 Partition分区"></a>3.3.2 Partition分区</h3><ol><li><strong>分区概念：</strong>将统计结果输出到不同文件中（分区）。</li><li><strong>默认Partition分区</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashPartitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">R</span> key<span class="token punctuation">,</span> v value<span class="token punctuation">,</span> <span class="token keyword">int</span> numReduceTasks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>hashCode <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token operator">%</span> numReduceTasks<span class="token punctuation">;</span>        <span class="token comment">// key.hashCode () &amp; Integer.MAX_VALUE是为了控制hashCode在int类型的取值范围内</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认分区是根据key日的hashCode对ReduceTasks个数取模得到的。用户没法控制哪个key存储到哪个分区。</li></ul><ol start="3"><li><strong>自定义Partition步骤</strong></li></ol><p>（1）自定义类继承Partitioner，重写getPartition()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// kv类型为map阶段输出数据的kv类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustonPartitioner</span> cxtends <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span><span class="token class-name">Flowbean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key，<span class="token class-name">FlowBean</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> numPartitions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 控制分区代码逻辑</span>        ······<span class="token keyword">return</span> partition<span class="token punctuation">;</span> <span class="token comment">// 分区索引从0开始计算</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在Job驱动中，设置自定义Partitioner</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">CustomPartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）自定义Patition后，要根据自定义Partitiorer的逻辑设置相应数量的ReduceTask</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>分区总结</strong></li></ol><p>（1）如果<strong>ReduceTask的数量 &gt; getPatitian的结果数</strong>，则会多产生几个空的输出文件part-r-000xx；</p><p>（2）如果<strong>1&lt;ReduceTask的数量&lt;getPartition的结果数</strong>，则有一部分分区数据无处安放，会报错Exception；</p><p>（3）如果<strong>ReduceTask的数量&#x3D;1</strong>，则不管MapTask端输出多少个分区文件，最终结果都交给一个ReduceTask，最终也就具会产生一个结果文件part-r-00000；</p><p>（4）<strong>分区号必须从零开始，逐一累加。</strong></p><ol start="5"><li><strong>案例分析</strong></li></ol><p>例如：假设自定义分区数为5，则<br>（1）job.setNumReduceTasks(1)，会正常运行，只不过会产生一个输出文件；</p><p>（2）job.setNumReduceTasks2)，会报错；</p><p>（3）job.setNumReduceTasks(6)；大于5，程序会正常运行，会产生空文件。</p><h3 id="3-3-3-Partition分区案例"><a href="#3-3-3-Partition分区案例" class="headerlink" title="3.3.3 Partition分区案例"></a>3.3.3 Partition分区案例</h3><ol><li><strong>需求：</strong>将统计结果按照手机归属地不同省份输出到不同文件中（分区）。</li></ol><p>（1）输入数据：<a href="http://img.fdchen.host/phone_data.txt">phone_data.txt</a></p><p>（2）期望输出数据：手机号136、137、138、139开头都分别放到一个独立的4个文件中，其他开头的放到一个文件中。</p><ol start="2"><li><strong>需求分析</strong></li></ol><p>（1）增加一个ProvicePartitioner进行自定义分区</p><pre class="line-numbers language-none"><code class="language-none">136分区0137分区1138分区2139分区3其他分区4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）Driver驱动类修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定自定义数据分区</span>job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">ProvincePartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定ReduceTask个数</span>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>代码实现</strong></li></ol><p>（1）增加一个分区类ProvicePartitioner</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Partitioner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProvincePartitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span><span class="token class-name">FlowBean</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> numPartition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取电话号码的前三位</span><span class="token class-name">String</span> preNum<span class="token operator">=</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> partition<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 2 判断是哪个省</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"136"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"137"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"138"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"139"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> partition<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在驱动类中添加以下内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置partition类</span>job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">ProvincePartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置ReduceTask个数</span>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-WritableComparable排序"><a href="#3-3-4-WritableComparable排序" class="headerlink" title="3.3.4 WritableComparable排序"></a>3.3.4 WritableComparable排序</h3><ol start="0"><li><strong>排序概述</strong></li></ol><p>（1）排序是MapReduce框架中最重要的操作之一。</p><p>（2）MapTask和ReduceTask均会对数据<strong>按照key进行排序</strong>。该操作属于Hadoop的默认行为。<strong>任何应用程序中的数据均会被排序，而不管逻辑上是否需要。</strong></p><p>（3）默认排序是<strong>按照字典顺序排序</strong>，且<strong>实现该排序的方法是快速排序</strong>。</p><p>（4）对于MapTask，它会将处理的结果暂时放到环形缓冲区中，<strong>当环形缓冲区使用率达到一定阈值后，再对缓冲区中的数据进行一次快速排序</strong>，并将这些有序数据溢写到磁盘上，而<strong>当数据处理完毕后，它会对磁盘上所有文件进行归并排序</strong>。<br>（5）对于ReduceTask，它从每个MapTask上远程拷贝相应的数据文件，如果文件大小超过一定阈值，则溢写磁盘上，否则存储在内存中。如果内存中文件大小或者数目超过一定阈值，则进行一次合并后将数据溢写到磁盘上；<strong>如果磁盘上文件数目达到一定阈值，则进行一次归并排序以生成一个更大文件（意味着如果文件不够多此部分可能没有）。当所有数据拷贝完毕后，ReduceTask统一对内存和磁盘上的所有数据进行一次归并排序。</strong></p><ol><li><strong>排序的分类</strong></li></ol><p>（1）<strong>部分排序</strong><br>MapReduce根据输入记录的键对数据集排序。保证输出的每个文件内部有序。<br>（2）<strong>全排序</strong><br>最终输出结果只有一个文件，且文件内部有序。实现方式是只设置一个ReduceTask。但该方法在处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了MapReduwe所提供的并行构。<br>（3）<strong>辅助排序（GroupingCormparator分组）</strong><br>在Reduce端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部字段比较不相同）的key进入到同一个reduce方法时，可以采用分组非序。<br>（4）<strong>二次排序</strong><br>在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序。</p><ol start="2"><li><strong>自定义排序WritableComparable</strong></li></ol><p>（1）bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，以实现排序。</p><p>（2）重写compareTo方法示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token comment">// 按照总流量大小，倒序排列</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">></span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">&lt;</span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-5-WritableComparable排序案例实操（全排序）"><a href="#3-3-5-WritableComparable排序案例实操（全排序）" class="headerlink" title="3.3.5 WritableComparable排序案例实操（全排序）"></a>3.3.5 WritableComparable排序案例实操（全排序）</h3><ol><li><strong>需求：</strong>根据电话流量数据再次对总流量进行排序。</li></ol><p>（1）输入数据：<a href="http://img.fdchen.host/phone_data.txt">phone_data</a></p><p>（2）期望输出数据</p><pre class="line-numbers language-none"><code class="language-none">13509468723733511034911768413736230513248124681271621395643563613215121644138465441212640264······<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>需求分析</strong></li></ol><p>（1）FlowBean实现WritableComparable接口重新compareTo方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token comment">// 核心比较条件判断</span><span class="token comment">// 按照总流量大小，倒序排列</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">></span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">&lt;</span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span>phoneNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）Reudcer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 循环输出，避免总流量相同情况</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Text</span> text<span class="token operator">:</span>values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>代码实现</strong></li></ol><p>（1）FlowBean增加比较方法（重写之前的类，实现WritableComparable接口）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowBean</span> <span class="token keyword">implements</span> <span class="token class-name">WritableComparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">long</span> upFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> sumFlow<span class="token punctuation">;</span><span class="token comment">// 反序列化时，需要反射调用空参构造函数</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">,</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow<span class="token operator">=</span>upFlow<span class="token operator">+</span>downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">,</span><span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow<span class="token operator">=</span>upFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow<span class="token operator">=</span>downFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow<span class="token operator">=</span>upFlow<span class="token operator">+</span>downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getUpFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDownFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDownFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSumFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> sumFlow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * TASK 序列化方法 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>sumFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * TASK 反序列化方法 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>upFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>downFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sumFlow<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> upFlow<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>downFlow<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>sumFlow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token comment">// 核心比较条件判断</span><span class="token comment">// 按照总流量大小，倒序排列</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">></span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sumFlow <span class="token operator">&lt;</span> bean<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）编写Mapper类（重写之前的类，修改输出数据key和value的数据类型）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountSortMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">FlowBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Text</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 截取</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 封装对象</span><span class="token comment">// 取出手机号码</span><span class="token class-name">String</span> phoneNum <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 取出上行流量和下行流量</span><span class="token keyword">long</span> upFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> downFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能仅仅设置sumFlow，因为bean对象在序列化时，变量必须有值</span>bean<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">,</span> downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phoneNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 输出，注意此时key-value的数据类型，总流量为key，电话号码为value</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写Reducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountSortReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 循环输出，避免总流量相同情况（总流量相同时，values的值有多个）</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Text</span> text <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 注意此时输出key-value的数据类型，与map阶段的数据类型相反</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）编写Driver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountSortDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"d:/input/inputFlow"</span><span class="token punctuation">,</span><span class="token string">"d:/outputFlowCountSort"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 1 获取配置信息，或者job对象实例</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 指定本程序的jar包所在的本地路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountSortDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 指定本业务job要使用的mapper/Reducer业务类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountSortMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountSortReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 指定mapper输出数据的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 指定最终输出的数据的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 指定job的输入原始文件所在目录</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>总结</strong></li></ol><ul><li><strong>要实现依据总流量排序，在Map阶段的排序即可完成；</strong></li><li><strong>Reduce阶段的排序保证按规定顺序输出。</strong></li></ul><h3 id="3-3-6-WritableComparable排序案例实操（区内排序）"><a href="#3-3-6-WritableComparable排序案例实操（区内排序）" class="headerlink" title="3.3.6 WritableComparable排序案例实操（区内排序）"></a>3.3.6 WritableComparable排序案例实操（区内排序）</h3><ol><li><strong>需求：</strong>要求每个省份手机号输出的文件中按照总流量内部排序。。</li><li><strong>需求分析</strong></li></ol><ul><li><p>基于上一个需求（全排序），增加自定义分区类，分区按照省份手机号设置。</p></li><li><p>输入输出示例如图3.12：</p></li></ul><p><img src="http://img.fdchen.host/WritableComparable%E6%8E%92%E5%BA%8F%E6%A1%88%E4%BE%8B%EF%BC%88%E5%8C%BA%E5%86%85%E6%8E%92%E5%BA%8F%EF%BC%89%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%A4%BA%E4%BE%8B.png" alt="WritableComparable排序案例（区内排序）输入输出示例"></p><center>图3.12 WritableComparable排序案例（区内排序）输入输出示例</center><ol start="3"><li><strong>代码实现</strong></li></ol><p>（1）添加自定义分区类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Partitioner</span><span class="token punctuation">;</span><span class="token comment">// 注意key-value类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProvincePartitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> numPartition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取电话号码的前三位</span><span class="token class-name">String</span> preNum<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> partition<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 2 判断是哪个省</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"136"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"137"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"138"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"139"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>partition<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> partition<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在Driver类中添加如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置自定义分区类</span>job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">ProvincePartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置ReduceTask个数</span>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-7-Combiner合并"><a href="#3-3-7-Combiner合并" class="headerlink" title="3.3.7 Combiner合并"></a>3.3.7 Combiner合并</h3><ol><li><p>Combiner是MR程序中Mapper和Reducer之外的一种组件。</p></li><li><p><strong>Combiner组件的父类就是Reducer。</strong></p></li><li><p>Combiner和Reducer的区别在于运行的位置：</p></li></ol><ul><li><strong>Combiner是在每一个MapTask所在的节点运行；</strong></li><li><strong>Reducer是接收全局所有Mapper的输出结果。</strong></li></ul><ol start="4"><li>Combiner的意义就是<strong>对每一个MapTask的输出进行局部汇总</strong>，以减小网络传输量。</li><li>Combiner<strong>能够应用的前提是不能影响最终的业务逻辑</strong>，而且，Combiner的输出kv应该跟Reccer的输入kv类型要对应起来。</li></ol><ul><li>例如，Combiner适用于求和、汇总等场景，Combiner不适用求平均值场景，原因如图3.13：</li></ul><p><img src="http://img.fdchen.host/Combiner%E4%B8%8D%E9%80%82%E7%94%A8%E4%BA%8EMapReduce%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC%E5%9C%BA%E6%99%AF%E5%8E%9F%E5%9B%A0.jpg" alt="Combiner不适用于MapReduce求平均值场景原因"></p><center>图3.13 Combiner不适用于MapReduce求平均值场景原因</center><ol start="6"><li>自定义Combiner实现步骤</li></ol><p>（1）自定义一个Combiner继承Reducer，重写Reduce方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountCombiner</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">IntWritable</span>  v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1 累加求和</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 写出atguigu 2</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在Driver类中设置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置Combiner类</span>job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span><span class="token class-name">WordCountCombiner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-8-Combiner合并案例实操"><a href="#3-3-8-Combiner合并案例实操" class="headerlink" title="3.3.8 Combiner合并案例实操"></a>3.3.8 Combiner合并案例实操</h3><ol><li><strong>需求：</strong>统计过程中对每一个MapTask的输出进行局部汇总，以减小网络传输量，即采用Combiner功能。</li></ol><p>（1）输入数据：<a href="">hello.txt</a></p><p>（2）期望输出：</p><p>Map阶段输出到Reduce阶段时经过合并，输出数据降低。</p><p>期望控制台显示如图3.13所示：</p><p><img src="http://img.fdchen.host/Combiner%E6%88%90%E5%8A%9F%E7%A4%BA%E4%BE%8B.jpg" alt="Combiner成功示例"></p><center>图3.13 Combiner成功示例</center><ol start="2"><li><strong>需求分析</strong></li></ol><p>（1）方案一</p><ul><li>增加一个WordCombiner类继承Reducer类；</li><li>在WordCountCombiner中实现：统计单词汇总和统计结果输出。</li></ul><p>（2）方案二</p><ul><li>将WordCountReducer作为Combiner在WordCountDriver驱动类中指定</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span><span class="token class-name">WordCountReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>代码实现（方案一）</strong></li></ol><p>（1）增加一个WordcountCombiner类继承Reducer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountCombiner</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token class-name">IntWritable</span>  v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1 累加求和</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span> value<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在WordcountDriver驱动类中指定Combiner</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定需要使用combiner，以及用哪个类作为combiner的逻辑</span>job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span><span class="token class-name">WordcountCombiner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-9-GroupingComparator分组（辅助排序）"><a href="#3-3-9-GroupingComparator分组（辅助排序）" class="headerlink" title="3.3.9 GroupingComparator分组（辅助排序）"></a>3.3.9 GroupingComparator分组（辅助排序）</h3><ul><li>在Reduce阶段前，根据某一个或几个字段对Map阶段输出的有序键值对进行分组。</li><li>自定义分组排序步骤</li></ul><ol><li><p>自定义类继承WritableComparator</p></li><li><p>重写compare()方法</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WritableComparable</span> a<span class="token punctuation">,</span> <span class="token class-name">WritableComparable</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 比较的业务逻辑</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建一个构造方法，将比较对象的类传给父类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">OrderGroupingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-10-GroupingComparator分组案例实操"><a href="#3-3-10-GroupingComparator分组案例实操" class="headerlink" title="3.3.10 GroupingComparator分组案例实操"></a>3.3.10 GroupingComparator分组案例实操</h3><ol><li><strong>需求</strong></li></ol><p>（1）输入数据如下，要求输出每个订单中最贵的商品。</p><ul><li><a href="http://img.fdchen.host/GroupingComparator.txt">GroupingComparator</a></li></ul><p>（2）期望输出数据</p><pre class="line-numbers language-none"><code class="language-none">1222.82722.43232.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>需求分析</strong></li></ol><p>（1）利用“订单id和成交金额”作为key，可以将Map阶段读取到的所有订单数据按照id升序排序，如果id相同再按照金额降序排序，发送到Reduce。</p><p>（2）在Reduce端利用groupingComparator将订单id相同的kv聚合成组，然后取第一个即是该订单中最贵商品，如图3.14所示。</p><p><img src="http://img.fdchen.host/GroupingComparator%E5%88%86%E7%BB%84%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="GroupingComparator分组案例需求分析"></p><center>图3.14 GroupingComparator分组案例需求分析</center><ol start="3"><li><strong>代码实现</strong></li></ol><p>（1）定义订单信息OrderBean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderBean</span> <span class="token keyword">implements</span> <span class="token class-name">WritableComparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderBean</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> order_id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token comment">// 空参构造</span><span class="token keyword">public</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 有参构造</span><span class="token keyword">public</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> order_id<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>order_id <span class="token operator">=</span> order_id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> order_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrder_id</span><span class="token punctuation">(</span><span class="token keyword">int</span> order_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>order_id <span class="token operator">=</span> order_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> order_id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>order_id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>price<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 二次排序：在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token comment">// 比较结果中，-1代表排在前面，1代表排在后面</span><span class="token comment">// order_id正序排列</span><span class="token keyword">if</span> <span class="token punctuation">(</span>order_id <span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>order_id <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 价格倒序排列</span><span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//result = price >o.getPrice()?-1:1;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）编写OrderMapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token class-name">OrderBean</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 截取</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 封装对象</span>k<span class="token punctuation">.</span><span class="token function">setOrder_id</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 写出，注意NullWritable加上了get()方法</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）编写OrderSortGroupingComparator类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSortGroupingComparator</span> <span class="token keyword">extends</span> <span class="token class-name">WritableComparator</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token class-name">OrderSortGroupingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 第二个参数true一定不能省，否则会报错</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WritableComparable</span> a<span class="token punctuation">,</span> <span class="token class-name">WritableComparable</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 只要order_id相同就认为是相同的key</span><span class="token class-name">OrderBean</span> aBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span><span class="token class-name">OrderBean</span> bBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>aBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> bBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）编写OrderReducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">,</span> <span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NullWritable</span><span class="token punctuation">></span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）编写OrderDriver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDriver</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"d:/input/inputOrder"</span><span class="token punctuation">,</span> <span class="token string">"d:/outputOrder"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 1 获取配置信息</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar包加载路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">OrderDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 加载map/reduce类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">OrderMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">OrderReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 8 设置reduce端的分组，负责比较相同key值，然后对进入ReduceTask的键值对进行分组，否则OrderSortGroupingComparator类无法发挥作用，直接把每个键值对单独分为一组</span>job<span class="token punctuation">.</span><span class="token function">setGroupingComparatorClass</span><span class="token punctuation">(</span><span class="token class-name">OrderSortGroupingComparator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置map输出数据key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出数据的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入数据和输出数据路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：</strong></p><ul><li><strong>如果要求获取每个订单号价格前N位的商品，在Reduce方法中，设置同一组内循环输出N次value值即可。</strong></li><li><strong>Reduce阶段对Map阶段输出的键值对进行分组时，默认Map阶段已经排序，仅通过GroupingComparator类从上往下寻找不同组的键值对，然后把不同组键值对以上的部分自动分为一组。</strong></li></ul><center>——————未完待续，以下内容后续补充——————</center><h2 id="3-4-MapTask工作机制"><a href="#3-4-MapTask工作机制" class="headerlink" title="3.4 MapTask工作机制"></a>3.4 MapTask工作机制</h2><h2 id="3-5-ReduceTak工作机制"><a href="#3-5-ReduceTak工作机制" class="headerlink" title="3.5 ReduceTak工作机制"></a>3.5 ReduceTak工作机制</h2><h2 id="3-6-OutputFormat数据输出"><a href="#3-6-OutputFormat数据输出" class="headerlink" title="3.6 OutputFormat数据输出"></a>3.6 OutputFormat数据输出</h2><h3 id="3-6-1-OutputFormat接口实现类"><a href="#3-6-1-OutputFormat接口实现类" class="headerlink" title="3.6.1 OutputFormat接口实现类"></a>3.6.1 OutputFormat接口实现类</h3><h3 id="3-6-2-自定义OutputFormat"><a href="#3-6-2-自定义OutputFormat" class="headerlink" title="3.6.2 自定义OutputFormat"></a>3.6.2 自定义OutputFormat</h3><h3 id="3-6-3-自定义OutputFormat案例实操"><a href="#3-6-3-自定义OutputFormat案例实操" class="headerlink" title="3.6.3 自定义OutputFormat案例实操"></a>3.6.3 自定义OutputFormat案例实操</h3><h2 id="3-7-Join多种应用"><a href="#3-7-Join多种应用" class="headerlink" title="3.7 Join多种应用"></a>3.7 Join多种应用</h2><h3 id="3-7-1-Reduce-Join"><a href="#3-7-1-Reduce-Join" class="headerlink" title="3.7.1 Reduce Join"></a>3.7.1 Reduce Join</h3><h3 id="3-7-2-Reduce-Join案例实操"><a href="#3-7-2-Reduce-Join案例实操" class="headerlink" title="3.7.2 Reduce Join案例实操"></a>3.7.2 Reduce Join案例实操</h3><h3 id="3-7-3-Map-Join"><a href="#3-7-3-Map-Join" class="headerlink" title="3.7.3 Map Join"></a>3.7.3 Map Join</h3><h3 id="3-7-4-Map-Join案例实操"><a href="#3-7-4-Map-Join案例实操" class="headerlink" title="3.7.4 Map Join案例实操"></a>3.7.4 Map Join案例实操</h3><p>······</p><p><strong>PS</strong>：视频教程查看<a href="http://www.atguigu.com/download_detail.shtml?v=52">尚硅谷-Hadoop视频教程</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据分析_分布式文件系统HDFS</title>
      <link href="/2020/da-shu-ju-fen-xi-fen-bu-shi-wen-jian-xi-tong-hdfs/"/>
      <url>/2020/da-shu-ju-fen-xi-fen-bu-shi-wen-jian-xi-tong-hdfs/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HDFS概述"><a href="#1-HDFS概述" class="headerlink" title="1 HDFS概述"></a>1 HDFS概述</h1><h2 id="1-1-HDFS产生背景及定义"><a href="#1-1-HDFS产生背景及定义" class="headerlink" title="1.1 HDFS产生背景及定义"></a>1.1 HDFS产生背景及定义</h2><h3 id="1-1-1-HDFS产生背景"><a href="#1-1-1-HDFS产生背景" class="headerlink" title="1.1.1 HDFS产生背景"></a>1.1.1 HDFS产生背景</h3><p>随着数据量越来越大，在一个操作系统存不下所有的数据，那么就分配到更多的操作系统<br>管理的磁盘中，但是不方便管理和维护，迫切需要一种系统来管理多台机器上的文件，这就是<br>分布式文件管理系统。HDFS只是分布式文件管理系统中的一种。</p><h3 id="1-1-2-HDFS定义"><a href="#1-1-2-HDFS定义" class="headerlink" title="1.1.2 HDFS定义"></a>1.1.2 HDFS定义</h3><ul><li><p>HDFS(Hadoop Distributed File System)，它是一个文件系统，用于存储文件，通过目录树<br>来定位文件;其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各<br>自的角色。</p></li><li><p>HDFS的使用场景：<strong>适合一次写入，多次读出的场景，且不支持文件的修改</strong>。适合用来做数<br>据分析，并不适合用来做网盘应用。</p></li></ul><h2 id="1-2-HDFS-优缺点"><a href="#1-2-HDFS-优缺点" class="headerlink" title="1.2 HDFS 优缺点"></a>1.2 HDFS 优缺点</h2><h3 id="1-2-1-优点"><a href="#1-2-1-优点" class="headerlink" title="1.2.1 优点"></a>1.2.1 优点</h3><ol><li>高容错性<ul><li>数据自动保存多个副本。通过增加副本的形式，提高容错性。</li><li>某一个副本丢失以后，可以自动恢复。</li></ul></li><li>适合处理大数据<ul><li>数据规模：能够处理数据规模达到GB、TB甚至PB级别的数据。</li><li>文件规模：能够处理百万规模以上的文件数量，数量相当大。</li></ul></li><li>可构建在廉价机器上，通过多副本机制，提高可靠性。</li></ol><span id="more"></span><h3 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h3><ol><li>不适合低延时数据访问，比如毫秒级的存储数据是做不到的。</li><li>无法高效地对大量小文件进行存储。<ul><li>存储大量小文件的话，会占用NameNode大量的内存来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限的。</li><li>小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标。</li></ul></li><li>不支持并发写入、文件随机修改。<ul><li>一个文件只能有一个写线程，不允许多个线程同时写。</li><li>仅支持数据追加，不支持文件的随机修改。</li></ul></li></ol><h2 id="1-3-HDFS组成架构"><a href="#1-3-HDFS组成架构" class="headerlink" title="1.3 HDFS组成架构"></a>1.3 HDFS组成架构</h2><p><img src="http://img.fdchen.host/HDFS%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84.jpg" alt="HDFS组成架构"></p><center>图1.1 HDFS组成架构</center><ol><li><p><strong>NameNode(nn)：</strong>就是Master，它是一个主管、管理者。</p><ul><li>管里HDFS的名称空间；</li><li>配置副本策略；</li><li>管理数据块(Block）映射信息；</li><li>处理客户端读写请求。</li></ul></li><li><p><strong>DataNode(dn)：</strong>就是Slave。NameNode下达命令，DataNode执行实际的操作。</p><ul><li>存储实际的数据块；</li><li>执行数据块的读写操作。</li></ul></li><li><p><strong>Client：</strong>就是客户端。</p><ul><li>文件切分。文件上传HDFS的时候，Client将文牛切分成一个一个的Block，然后进行上传；</li><li>与NameNode交互，获取文件的位置信息；</li><li>与DataNode交互，读取或者写入数据；</li><li>Client提供一些命令来管理HDFS，比如NameNode格式化；</li><li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作。</li></ul></li><li><p><strong>Secondary NameNode(2nn)：</strong>并非NameNode的热备（备用设备）。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务。</p><ul><li>辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode；</li><li>在紧急情兄下，可辅助恢复NameNode。</li></ul></li></ol><h2 id="1-4-HDFS-文件块大小（重点）"><a href="#1-4-HDFS-文件块大小（重点）" class="headerlink" title="1.4 HDFS 文件块大小（重点）"></a>1.4 HDFS 文件块大小（重点）</h2><ol><li><p>HDFS中的文件在物理上是分块存储（Block ），块的大小可以通过配置参数( dfs.blocksize)来规定，默认大小在Hadoop2.x版本中是128M，老版本Hadoop1.x中是64M。</p></li><li><p>Block大小的计算原理（100M近似取128M）</p></li></ol><p><img src="http://img.fdchen.host/HDFS%E7%9A%84Block%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE.png" alt="HDFS的Block大小设置"></p><center>图1.2 HDFS的Block大小设置</center><ol start="3"><li>为什么Block不能设置太小，也不能设置太大？</li></ol><p>(1）HDFS的块设置太小，会增加寻址时间，程序一直在找块的开始位置；<br>(2）如果块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时会非常慢。</p><ol start="4"><li><strong>总结：HDFS的Block大小设置主要取决与磁盘的传输速率</strong>。传输速率快，相同时间下传输的数据多，Block就可以设置得大。</li></ol><h1 id="2-HDFS的Shell操作（开发重点）"><a href="#2-HDFS的Shell操作（开发重点）" class="headerlink" title="2 HDFS的Shell操作（开发重点）"></a>2 HDFS的Shell操作（开发重点）</h1><p><strong>Tip：以下操作可以在伪分布式模式下进行。</strong></p><ol><li><strong>基本语法</strong></li></ol><ul><li>bin&#x2F;hadoop fs 具体命令  OR  bin&#x2F;hdfs dfs 具体命令</li><li>dfs是fs的实现类，所以前者命令集包含后者。</li><li><strong>一般命令区分大小写</strong></li></ul><ol start="2"><li><strong>命令大全</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hadoop fs<span class="token punctuation">[</span><span class="token operator">-</span>appendToFile &lt;localsrc> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">cat</span> <span class="token punctuation">[</span><span class="token operator">-</span>ignoreCrc<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>checksum &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>chgrp <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token function">GROUP</span> PATH<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>chmod <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> &lt;MODE<span class="token punctuation">[</span><span class="token punctuation">,</span>MODE<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">|</span> OCTALMODE> PATH<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>chown <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token namespace">[OWNER]</span><span class="token punctuation">[</span>:<span class="token namespace">[GROUP]</span><span class="token punctuation">]</span> PATH<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>copyFromLocal <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> &lt;localsrc> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>copyToLocal <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>ignoreCrc<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>crc<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;localdst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>count <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">cp</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>createSnapshot &lt;snapshotDir> <span class="token punctuation">[</span>&lt;snapshotName><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>deleteSnapshot &lt;snapshotDir> &lt;snapshotName><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>df <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span>&lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>du <span class="token punctuation">[</span><span class="token operator">-</span>s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>expunge<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>get <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>ignoreCrc<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>crc<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;localdst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>getfacl <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> &lt;path><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>getmerge <span class="token punctuation">[</span><span class="token operator">-</span>nl<span class="token punctuation">]</span> &lt;src> &lt;localdst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>help <span class="token namespace">[cmd ...]</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">ls</span> <span class="token punctuation">[</span><span class="token operator">-</span>d<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token punctuation">[</span>&lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>mkdir <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>moveFromLocal &lt;localsrc> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>moveToLocal &lt;src> &lt;localdst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">mv</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>put <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">]</span> &lt;localsrc> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &lt;dst><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>renameSnapshot &lt;snapshotDir> &lt;oldName> &lt;newName><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">rm</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>r<span class="token punctuation">|</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>skipTrash<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token function">rmdir</span> <span class="token punctuation">[</span><span class="token operator">--</span>ignore-fail-on-non-empty<span class="token punctuation">]</span> &lt;<span class="token function">dir</span>> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>setfacl <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token operator">-</span>b<span class="token punctuation">|</span><span class="token operator">-</span>k<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>m<span class="token punctuation">|</span><span class="token operator">-</span>x &lt;acl_spec><span class="token punctuation">&#125;</span> &lt;path><span class="token punctuation">]</span><span class="token punctuation">|</span><span class="token punctuation">[</span><span class="token operator">--</span><span class="token function">set</span> &lt;acl_spec> &lt;path><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>setrep <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>w<span class="token punctuation">]</span> &lt;rep> &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>stat <span class="token namespace">[format]</span> &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>tail <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> &lt;file><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>test <span class="token operator">-</span><span class="token namespace">[defsz]</span> &lt;path><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>text <span class="token punctuation">[</span><span class="token operator">-</span>ignoreCrc<span class="token punctuation">]</span> &lt;src> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>touchz &lt;path> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token operator">-</span>usage <span class="token namespace">[cmd ...]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>常用命令实操</strong></li></ol><p><strong>（0）启动Hadoop集群（方便后续的测试）</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ sbin/<span class="token function">start-dfs</span><span class="token punctuation">.</span>sh<span class="token namespace">[atguigu@hadoop103 hadoop-2.7.2]</span>$ sbin/<span class="token function">start-yarn</span><span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>（1）-help：输出这个命令参数的使用方法</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>help <span class="token function">rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（2）-ls: 显示目录信息</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">ls</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（3）-mkdir：在HDFS上创建目录</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>mkdir <span class="token operator">-</span>p <span class="token operator">/</span>sanguo/shuguo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（4）-moveFromLocal：从本地剪切粘贴到HDFS</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ touch kongming<span class="token punctuation">.</span>txt<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs  <span class="token operator">-</span>moveFromLocal  <span class="token punctuation">.</span><span class="token operator">/</span>kongming<span class="token punctuation">.</span>txt  <span class="token operator">/</span>sanguo/shuguo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>（5）-appendToFile：追加一个文件到已经存在的文件末尾</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ touch liubei<span class="token punctuation">.</span>txt<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ vim liubei<span class="token punctuation">.</span>txt输入san <span class="token function">gu</span> mao lu<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>appendToFile liubei<span class="token punctuation">.</span>txt <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（6）-cat：显示文件内容</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">cat</span> <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（7）-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs  <span class="token operator">-</span>chmod  777  <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs  <span class="token operator">-</span>chown  atguigu:atguigu  <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>（8）-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>copyFromLocal README<span class="token punctuation">.</span>txt <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（9）-copyToLocal：从HDFS拷贝到本地</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>copyToLocal <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt <span class="token punctuation">.</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（10）-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径（复制），前者为源路径，后者为目的路径，具有两个路径参数的命令都如此</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">cp</span> <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt <span class="token operator">/</span>zhuge<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（11）-mv：在HDFS目录中移动文件（剪切）</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">mv</span> <span class="token operator">/</span>zhuge<span class="token punctuation">.</span>txt <span class="token operator">/</span>sanguo/shuguo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（12）-get：等同于copyToLocal，就是从HDFS下载文件到本地</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>get <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt <span class="token punctuation">.</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（13）-getmerge：合并下载多个文件到一个文件中去，比如HDFS的目录 &#x2F;user&#x2F;atguigu&#x2F;test下有多个文件:log.1, log.2,log.3,…</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>getmerge <span class="token operator">/</span>user/atguigu/test/<span class="token operator">*</span> <span class="token punctuation">.</span><span class="token operator">/</span>zaiyiqi<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（14）-put：等同于copyFromLocal</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>put <span class="token punctuation">.</span><span class="token operator">/</span>zaiyiqi<span class="token punctuation">.</span>txt <span class="token operator">/</span>user/atguigu/test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（15）-tail：显示一个文件的末尾</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>tail <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（16）-rm：删除HDFS上的文件或文件夹，递归删除文件夹需要加上参数-r</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">rm</span> <span class="token operator">/</span>user/atguigu/test/jinlian2<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（17）-rmdir：删除空目录</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">rmdir</span> <span class="token operator">/</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（18）-du统计文件夹的大小信息</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>du <span class="token operator">-</span>s <span class="token operator">-</span>h <span class="token operator">/</span>user/atguigu/test2<span class="token punctuation">.</span>7 K  <span class="token operator">/</span>user/atguigu/test<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>du  <span class="token operator">-</span>h <span class="token operator">/</span>user/atguigu/test1<span class="token punctuation">.</span>3 K  <span class="token operator">/</span>user/atguigu/test/README<span class="token punctuation">.</span>txt15   <span class="token operator">/</span>user/atguigu/test/jinlian<span class="token punctuation">.</span>txt1<span class="token punctuation">.</span>4 K  <span class="token operator">/</span>user/atguigu/test/zaiyiqi<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-s代表显示整个文件夹的大小；-h代表给文件大小加上单位（K, M等）</li></ul><p><strong>（19）-setrep：设置HDFS中文件的副本数量，不过是否真的会有这么多副本，还得看DataNode的数量</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>setrep 10 <span class="token operator">/</span>sanguo/shuguo/kongming<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-HDFS客户端操作（开发重点）"><a href="#3-HDFS客户端操作（开发重点）" class="headerlink" title="3 HDFS客户端操作（开发重点）"></a>3 HDFS客户端操作（开发重点）</h1><p><strong>Tip：以下操作可以在伪分布式模式下进行。</strong></p><h2 id="3-1-HDFS客户端环境准备"><a href="#3-1-HDFS客户端环境准备" class="headerlink" title="3.1 HDFS客户端环境准备"></a>3.1 HDFS客户端环境准备</h2><ol><li><strong>根据自己电脑的操作系统拷贝对应的编译后的hadoop jar包到</strong>非中文路径<strong>（例如：D:\Develop\hadoop-2.7.2），如图3.1（可从网上下载）：</strong></li></ol><p><img src="http://img.fdchen.host/%E7%BC%96%E8%AF%91%E5%90%8E%E7%9A%84hadoop%20jar%E5%8C%85.png" alt="编译后的hadoop jar包"></p><center>图3.1 编译后的hadoop jar包</center><ol start="2"><li><strong>配置HADOOP_HOME环境变量，如图3.2：</strong></li></ol><p><img src="http://img.fdchen.host/%E9%85%8D%E7%BD%AEHADOOP_HOME%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="配置HADOOP_HOME环境变量"></p><center>图3.2 配置HADOOP_HOME环境变量</center><ol start="3"><li><strong>配置Path环境变量，如图3.3：</strong></li></ol><p><img src="http://img.fdchen.host/%E9%85%8D%E7%BD%AEPath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="配置Path环境变量"></p><center>图3.3 配置Path环境变量</center><ol start="4"><li><strong>创建一个Maven工程HdfsClientDemo：</strong></li></ol><p>（1）打开<strong>eclipse</strong>；</p><p>（2）左上角<strong>File</strong> –&gt; <strong>new</strong> –&gt; <strong>Maven Project</strong> –&gt; <strong>Create a simple project</strong>。</p><ol start="5"><li><strong>在</strong>pom.xml<strong>文件中的</strong>&lt;project&gt;&lt;&#x2F;project&gt;<strong>标签中导入相应的依赖坐标+日志添加：</strong></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-hdfs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>$&#123;JAVA_HOME&#125;/lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tips：环境配置出现问题可参考本人另一篇博客<a href="http://fdchen.host/2020/10/05/Eclipse%E5%88%9B%E5%BB%BAMaven%20Project%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEDebug/">《Eclipse创建Maven Project环境配置Debug》</a></strong></p><ul><li>如果Eclipse&#x2F;Idea打印不出日志，在控制台上只显示，报错如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">1.log4j:WARN No appenders could be found for logger (org.apache.hadoop.util.Shell).  2.log4j:WARN Please initialize the log4j system properly.  3.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>需要在项目的src&#x2F;main&#x2F;resources目录下，新建一个文件（无法新建.properties文件可在项目外新建记事本输入内容后修改后缀即可），命名为“log4j.properties”，在文件中填入如下内容：</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m%n</span><span class="token attr-name">log4j.appender.logfile</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.FileAppender</span><span class="token attr-name">log4j.appender.logfile.File</span><span class="token punctuation">=</span><span class="token attr-value">target/spring.log</span><span class="token attr-name">log4j.appender.logfile.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.logfile.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p><strong>创建包名：com.atguigu.hdfs</strong></p></li><li><p><strong>创建HdfsClient类，有两种连接方式</strong></p></li></ol><p>（1）第一种方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HdfsClient</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置在集群上运行</span>configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 创建目录</span>fs<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/1108/daxian/banzhang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种情况需要配置用户名称，点击<strong>Run</strong> –&gt; <strong>Run Configurations</strong> –&gt; <strong>双击Java Application</strong> –&gt; 点击新建的<strong>HDFS项目</strong> – &gt; <strong>修改如下内容：</strong> –&gt; <strong>Apply</strong></li></ul><p><img src="http://img.fdchen.host/Eclipse%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E7%A7%B0.png" alt="Eclipse配置用户名称"></p><center>图3.4 Eclipse配置用户名称</center><ul><li>原理解释：客户端去操作HDFS时，是有一个用户身份的。默认情况下，HDFS客户端API会从JVM中获取一个参数来作为自己的用户身份：-DHADOOP_USER_NAME&#x3D;atguigu，atguigu为用户名称。</li></ul><p>（2）第二种方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HdfsClient</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 创建目录</span>fs<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/1108/daxian/banzhang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方式直接运行即可，推荐使用。</li></ul><h2 id="3-2-HDFS的API操作"><a href="#3-2-HDFS的API操作" class="headerlink" title="3.2 HDFS的API操作"></a>3.2 HDFS的API操作</h2><h3 id="3-2-1-HDFS文件上传（测试副本数参数优先级）"><a href="#3-2-1-HDFS文件上传（测试副本数参数优先级）" class="headerlink" title="3.2.1 HDFS文件上传（测试副本数参数优先级）"></a>3.2.1 HDFS文件上传（测试副本数参数优先级）</h3><ol><li>编写源码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCopyFromLocalFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.replication"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 客户端代码设置的副本数</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 上传文件</span>fs<span class="token punctuation">.</span><span class="token function">copyFromLocalFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"e:/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将hdfs-site.xml拷贝到项目的资源目录下，包含以下内容：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>副本数参数优先级</strong></li></ol><p>① 客户端代码中设置的值 &gt; ② 客户端项目资源目录下的配置文件 &gt; ③ ClassPath下的用户自定义配置文件hdfs-site.xml  &gt; ④ 服务器的默认配置hdfs-default.xml</p><h3 id="3-2-2-HDFS文件下载"><a href="#3-2-2-HDFS文件下载" class="headerlink" title="3.2.2 HDFS文件下载"></a>3.2.2 HDFS文件下载</h3><ul><li>代码示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCopyToLocalFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 执行下载操作</span><span class="token comment">// boolean delSrc 指是否将原文件删除</span><span class="token comment">// Path src 指要下载的文件路径</span><span class="token comment">// Path dst 指将文件下载到的路径</span><span class="token comment">// boolean useRawLocalFileSystem 是否使用本地文件系统，不使用本地文件系统则开启文件校验，会产生.crc文件，默认是false</span>fs<span class="token punctuation">.</span><span class="token function">copyToLocalFile</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"e:/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-HDFS文件夹删除"><a href="#3-2-3-HDFS文件夹删除" class="headerlink" title="3.2.3 HDFS文件夹删除"></a>3.2.3 HDFS文件夹删除</h3><ul><li>代码示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 执行删除</span>    <span class="token comment">// Path 文件夹路径</span>    <span class="token comment">// boolean recursive 如果删除文件夹需设置为true，否则会报错；如果删除文件true 或 false均可</span>fs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/0508/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-4-HDFS文件名更改"><a href="#3-2-4-HDFS文件名更改" class="headerlink" title="3.2.4 HDFS文件名更改"></a>3.2.4 HDFS文件名更改</h3><ul><li>代码示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 修改文件名称</span>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-HDFS文件详情查看"><a href="#3-2-5-HDFS文件详情查看" class="headerlink" title="3.2.5 HDFS文件详情查看"></a>3.2.5 HDFS文件详情查看</h3><ul><li>查看文件名称、权限、长度、块信息，代码示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 获取文件详情，返回一个迭代器（数组）</span>    <span class="token comment">// Path 文件夹路径</span>    <span class="token comment">// boolean Recursive 是否迭代访问下一级文件</span><span class="token class-name">RemoteIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocatedFileStatus</span><span class="token punctuation">></span></span> listFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>listFiles<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">LocatedFileStatus</span> status <span class="token operator">=</span> listFiles<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出详情</span><span class="token comment">// 文件名称，先获取文件路径，再获取文件名</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 长度</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 权限</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取存储的块信息，返回值是数组类型</span><span class="token class-name">BlockLocation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blockLocations <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">getBlockLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BlockLocation</span> blockLocation <span class="token operator">:</span> blockLocations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取块存储的主机节点，返回值是数组类型</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hosts <span class="token operator">=</span> blockLocation<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> host <span class="token operator">:</span> hosts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------班长的分割线----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-6-HDFS文件和文件夹判断"><a href="#3-2-6-HDFS文件和文件夹判断" class="headerlink" title="3.2.6 HDFS文件和文件夹判断"></a>3.2.6 HDFS文件和文件夹判断</h3><ul><li>代码示例如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件配置信息</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取目标目录下的所有文件或文件夹状态</span><span class="token class-name">FileStatus</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listStatus <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">listStatus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3 遍历所有文件或文件夹状态</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileStatus</span> fileStatus <span class="token operator">:</span> listStatus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果是文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fileStatus<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f:"</span><span class="token operator">+</span>fileStatus<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:"</span><span class="token operator">+</span>fileStatus<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-HDFS的-I-x2F-O-流操作"><a href="#3-3-HDFS的-I-x2F-O-流操作" class="headerlink" title="3.3 HDFS的 I&#x2F;O 流操作"></a>3.3 HDFS的 I&#x2F;O 流操作</h2><ul><li>上面的API操作HDFS系统都是框架封装好的。如果我们想自己实现上述API的操作可以采用<strong>I&#x2F;O流的方式实现数据的上传和下载</strong>。</li></ul><h3 id="3-3-1-HDFS文件上传"><a href="#3-3-1-HDFS文件上传" class="headerlink" title="3.3.1 HDFS文件上传"></a>3.3.1 HDFS文件上传</h3><ol><li><strong>需求：</strong>把本地E盘上的banhua.txt文件上传到HDFS根目录。</li><li><strong>编写代码如下：</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putFileToHDFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 创建输入流，创建一个从本地文件系统输入的数据流</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 获取输出流，创建输出到HDFS的数据流</span><span class="token class-name">FSDataOutputStream</span> fos <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 流对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 关闭资源，先关闭输出流，再关闭输入流</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>整体逻辑</strong>：客户端操作系统可视为“中转站”，本地文件系统将数据输入到客户端操作系统，客户端操作系统进行流对拷之后，将数据输出到HDFS系统。</li></ol><h3 id="3-3-2-HDFS文件下载"><a href="#3-3-2-HDFS文件下载" class="headerlink" title="3.3.2 HDFS文件下载"></a>3.3.2 HDFS文件下载</h3><ol><li><strong>需求：</strong>从HDFS上下载banhua.txt文件到本地E盘上。</li><li><strong>编写代码如下：</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFileFromHDFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取输入流，创建一个从HDFS输入的数据流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 获取输出流，创建一个输出到本地文件系统的数据流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 流的对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tip：</strong></p><ul><li>输入输出流中与本地文件系统相联系的前缀是File前缀，与HDFS系统相联系的前缀是FSData。</li><li>创建一个从HDFS输入的数据流使用fs.open(Path)，创建输出到HDFS的数据流使用fs.creat(Path)。</li></ul><h3 id="3-3-3-定位文件读取"><a href="#3-3-3-定位文件读取" class="headerlink" title="3.3.3 定位文件读取"></a>3.3.3 定位文件读取</h3><ol><li><strong>需求：</strong>分块读取HDFS上的大文件。</li><li><strong>编写代码如下：</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 下载第一块</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFileSeek1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/hadoop-2.7.2.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 创建输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/hadoop-2.7.2.tar.gz.part1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 流的拷贝（只拷贝128M），使用IOUtils.copyBytes()就会全部拷贝，无法定位</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 5关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 拷贝第二块</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFileSeek2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 打开输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/hadoop-2.7.2.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 定位输入数据位置</span>fis<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 创建输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/hadoop-2.7.2.tar.gz.part2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 流的对拷，第二块就拷贝完毕可以直接使用IOUtils.copyBytes()，全部拷贝</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>合并文件：</p><p>在Window命令窗口中进入到目录E:\，然后执行如下命令，对数据进行合并，合并完成后，将hadoop-2.7.2.tar.gz.part1重新命名为hadoop-2.7.2.tar.gz。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">type hadoop-2.7.2.tar.gz.part2 &gt;&gt; hadoop-2.7.2.tar.gz.part1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-HDFS的数据流（面试重点）"><a href="#4-HDFS的数据流（面试重点）" class="headerlink" title="4 HDFS的数据流（面试重点）"></a>4 HDFS的数据流（面试重点）</h1><h2 id="4-1-HDFS写数据流程"><a href="#4-1-HDFS写数据流程" class="headerlink" title="4.1 HDFS写数据流程"></a>4.1 HDFS写数据流程</h2><h3 id="4-1-1-剖析文件写入"><a href="#4-1-1-剖析文件写入" class="headerlink" title="4.1.1 剖析文件写入"></a>4.1.1 剖析文件写入</h3><p><img src="http://img.fdchen.host/HDFS%E7%9A%84%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E6%B5%81%E7%A8%8B.png" alt="HDFS的写数据流程"></p><center>图4.1 HDFS的写数据流程</center><ol><li><p>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</p></li><li><p>NameNode返回是否可以上传。</p></li><li><p>客户端请求第一个 Block上传到哪几个DataNode服务器上。</p></li><li><p>NameNode一般返回3个DataNode节点，分别为dn1、dn2、dn3（优先选择距离近、负载小的DataNode节点）。</p></li><li><p>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</p></li><li><p>dn1、dn2、dn3逐级应答客户端。</p></li><li><p>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet在保存信息之后就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待dn2和dn3的应答，等到获得dn3全部存储完毕的应答之后清空内存。</p></li><li><p>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</p></li></ol><h3 id="4-1-2-网络拓扑-节点距离计算"><a href="#4-1-2-网络拓扑-节点距离计算" class="headerlink" title="4.1.2 网络拓扑-节点距离计算"></a>4.1.2 网络拓扑-节点距离计算</h3><ol><li><p><strong>节点距离：两个节点到达最近的共同祖先的距离总和。</strong></p></li><li><p>示例如图：</p></li></ol><p><img src="http://img.fdchen.host/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91-%E8%8A%82%E7%82%B9%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97%E7%A4%BA%E4%BE%8B.png" alt="网络拓扑-节点距离计算"></p><center>图4.2 网络拓扑-节点距离计算</center><h3 id="4-1-3-机架感知（副本存储节点选择）"><a href="#4-1-3-机架感知（副本存储节点选择）" class="headerlink" title="4.1.3 机架感知（副本存储节点选择）"></a>4.1.3 机架感知（副本存储节点选择）</h3><ol><li>官方说明：</li></ol><ul><li><a href="http://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Data_Replication">http://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Data_Replication</a></li></ul><ol start="2"><li>Hadoop 2.7.2 副本节点选择</li></ol><ul><li>综合考虑I&#x2F;0速度和副本安全性与可靠性</li></ul><p><img src="http://img.fdchen.host/Hadoop2.7.2%E5%89%AF%E6%9C%AC%E8%8A%82%E7%82%B9%E9%80%89%E6%8B%A9.png" alt="Hadoop2.7.2副本节点选择"></p><center>图4.3 Hadoop2.7.2副本节点选择</center><h2 id="4-2-HDFS读数据流程"><a href="#4-2-HDFS读数据流程" class="headerlink" title="4.2 HDFS读数据流程"></a>4.2 HDFS读数据流程</h2><p><img src="http://img.fdchen.host/HDFS%E7%9A%84%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png" alt="HDFS的读数据流程"></p><center>图4.4 HDFS的读数据流程</center><p><strong>详细步骤解读</strong>：</p><ol><li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li></ol><h1 id="5-NameNode-和-Secondary-NameNode（面试开发重点）"><a href="#5-NameNode-和-Secondary-NameNode（面试开发重点）" class="headerlink" title="5 NameNode 和 Secondary NameNode（面试开发重点）"></a>5 NameNode 和 Secondary NameNode（面试开发重点）</h1><h2 id="5-1-NN和2NN的工作机制（重点）"><a href="#5-1-NN和2NN的工作机制（重点）" class="headerlink" title="5.1 NN和2NN的工作机制（重点）"></a>5.1 NN和2NN的工作机制（重点）</h2><ul><li><p><strong>Q：NameNode中的元数据是存储在哪里的？</strong></p></li><li><p><strong>A：</strong></p><ul><li>首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。</li><li>这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</li><li>但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点Secondary NameNode，专门用于FsImage和Edits的合并。</li></ul></li><li><p><strong>详细的NN和2NN工作机制如图5.1：</strong></p></li></ul><p><img src="http://img.fdchen.host/NN%E5%92%8C2NN%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="NN和2NN工作机制"></p><center>图5.1 NN和2NN工作机制</center><ol><li><strong>第一阶段：NameNode启动</strong></li></ol><p>（1）第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载Edits日志和FsImage文件到内存并生成一个空的edits.inprogress。</p><p>（2）客户端对元数据进行增删改的请求。（<strong>查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息</strong>）</p><p>（3）NameNode记录操作日志在edits.inprogress中，更新滚动日志。（<strong>先修改日志而不直接操作内存是为了保存操作信息，避免突然断电导致操作终止并丢失</strong>）</p><p>（4）NameNode在内存中对数据进行增删改。</p><ol start="2"><li><strong>第二阶段：Secondary NameNode工作</strong></li></ol><p>（1）Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否需要CheckPoint结果。（<strong>触发条件是定时时间到或者Edits中的数据满了</strong>）</p><p>（2）Secondary NameNode请求执行CheckPoint。</p><p>（3）NameNode滚动正在写的Edits日志。（将Edits分为之前的Edits日志汇总和空的新Edits日志edits.inprogress）</p><p>（4）将滚动前的Edits日志和FsImage文件拷贝到Secondary NameNode。</p><p>（5）Secondary NameNode加载编辑日志和镜像文件到内存，并合并。（<strong>所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage</strong>）</p><p>（6）生成新的镜像文件fsimage.chkpoint。</p><p>（7）拷贝fsimage.chkpoint到NameNode。</p><p>（8）NameNode将fsimage.chkpoint重新命名成fsimage替换掉原来的fsimage。</p><ol start="3"><li><strong>补充：</strong></li></ol><p>（1）FsImage：NameNode内存中元数据序列化后形成的文件。</p><p>（2）Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</p><p>（3）Secondary NameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。</p><p>（4）NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在FsImage中。</p><h2 id="5-2-FsImage和Edits解析（了解）"><a href="#5-2-FsImage和Edits解析（了解）" class="headerlink" title="5.2 FsImage和Edits解析（了解）"></a>5.2 FsImage和Edits解析（了解）</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><ol start="0"><li>NameNode被格式化之后，将在**&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;tmp&#x2F;dfs&#x2F;name&#x2F;current**目录中产生如下文件：</li></ol><pre class="line-numbers language-none"><code class="language-none">fsimage_0000000000000000000fsimage_0000000000000000000.md5seen_txidVERSION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Fsimage文件：HDFS文件系统元数据的一个永久性的检查点，其中包含HDFS文件系统的所有目录和文件inode的序列化信息。</li><li>Edits文件:存放HDFS文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先<br>会被记录到Edlits文件中。</li><li>sen_txid文件保存的是一个数字，就是最后一个edits_的数字。</li><li>每次NameNode启动的时候都会将Fsimage文件读入内存，加载Edits里面的更新操作，保证内存中的元数据信息是最新的、同步的，可以看成NameNode启动的时候就将FsImage和Edits文件进行了合并。</li></ol><h3 id="5-2-2-oiv查看FsImage文件"><a href="#5-2-2-oiv查看FsImage文件" class="headerlink" title="5.2.2 oiv查看FsImage文件"></a>5.2.2 oiv查看FsImage文件</h3><ol><li>查看oiv和oev命令</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 current]</span>$ hdfsoiv      apply the offline fsimage viewer to an fsimageoev      apply the offline edits viewer to an edits file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>基本语法</li></ol><pre class="line-numbers language-none"><code class="language-none">hdfs oiv -p 文件类型 -i 镜像文件 -o 转换后文件输出路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>案例实操</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 current]</span>$ <span class="token function">pwd</span><span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs/name/current<span class="token namespace">[atguigu@hadoop102 current]</span>$ hdfs oiv <span class="token operator">-</span>p XML <span class="token operator">-</span>i fsimage_0000000000000000025 <span class="token operator">-</span>o <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/fsimage<span class="token punctuation">.</span>xml<span class="token namespace">[atguigu@hadoop102 current]</span>$ <span class="token function">cat</span> <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/fsimage<span class="token punctuation">.</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将显示的xml文件内容拷贝到Eclipse中创建的xml文件中，并格式化。部分显示结果如下。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>16386<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>DIRECTORY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtime</span><span class="token punctuation">></span></span>1512722284477<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtime</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span><span class="token punctuation">></span></span>atguigu:supergroup:rwxr-xr-x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nsquota</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nsquota</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dsquota</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dsquota</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>16387<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>DIRECTORY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtime</span><span class="token punctuation">></span></span>1512790549080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtime</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span><span class="token punctuation">></span></span>atguigu:supergroup:rwxr-xr-x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nsquota</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nsquota</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dsquota</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dsquota</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>16389<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>FILE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>wc.input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replication</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replication</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtime</span><span class="token punctuation">></span></span>1512722322219<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtime</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atime</span><span class="token punctuation">></span></span>1512722321610<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atime</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>perferredBlockSize</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>perferredBlockSize</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span><span class="token punctuation">></span></span>atguigu:supergroup:rw-r--r--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blocks</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1073741825<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>genstamp</span><span class="token punctuation">></span></span>1001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>genstamp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>numBytes</span><span class="token punctuation">></span></span>59<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>numBytes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blocks</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inode</span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>Q：可以看出，FsImage中没有记录块所对应DataNode，为什么？</strong></p></li><li><p><strong>A：在集群启动后，要求DataNode上报数据块信息，并间隔一段时间后再次上报。</strong></p></li></ul><p><strong>具体过程如下：</strong>在所有DataNode启动时，每个DataNode对本地磁盘进行扫描，将本DataNode上保存的block信息汇报给NameNode，NameNode在接收到每个DataNode的块信息汇报后，将接收到的块信息，以及其所在的DataNode信息等保存在内存中。（HDFS就是通过这种块信息汇报的方式来完成 block -&gt; DataNodes list的对应表构建。DataNode向NameNode汇报块信息的过程叫做blockReport，而NameNode将block -&gt; DataNodes list的对应表信息保存在一个叫BlocksMap的数据结构中。）</p><h3 id="5-2-3-oev查看Edits文件"><a href="#5-2-3-oev查看Edits文件" class="headerlink" title="5.2.3 oev查看Edits文件"></a>5.2.3 oev查看Edits文件</h3><ol><li>基本语法</li></ol><pre class="line-numbers language-none"><code class="language-none">hdfs oev -p 文件类型 -i 编辑日志 -o 转换后文件输出路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>案例实操</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 current]</span>$ hdfs oev <span class="token operator">-</span>p XML <span class="token operator">-</span>i edits_0000000000000000012-0000000000000000013 <span class="token operator">-</span>o <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/edits<span class="token punctuation">.</span>xml<span class="token namespace">[atguigu@hadoop102 current]</span>$ <span class="token function">cat</span> <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/edits<span class="token punctuation">.</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将显示的xml文件内容拷贝到Eclipse中创建的xml文件中，并格式化。显示结果如下。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EDITS</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EDITS_VERSION</span><span class="token punctuation">></span></span>-63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EDITS_VERSION</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_START_LOG_SEGMENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>129<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_ADD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>130<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LENGTH</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LENGTH</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INODEID</span><span class="token punctuation">></span></span>16407<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>INODEID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PATH</span><span class="token punctuation">></span></span>/hello7.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PATH</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>REPLICATION</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>REPLICATION</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MTIME</span><span class="token punctuation">></span></span>1512943607866<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MTIME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ATIME</span><span class="token punctuation">></span></span>1512943607866<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ATIME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCKSIZE</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCKSIZE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CLIENT_NAME</span><span class="token punctuation">></span></span>DFSClient_NONMAPREDUCE_-1544295051_1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CLIENT_NAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CLIENT_MACHINE</span><span class="token punctuation">></span></span>192.168.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CLIENT_MACHINE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OVERWRITE</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OVERWRITE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PERMISSION_STATUS</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>USERNAME</span><span class="token punctuation">></span></span>atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>USERNAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GROUPNAME</span><span class="token punctuation">></span></span>supergroup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GROUPNAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MODE</span><span class="token punctuation">></span></span>420<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PERMISSION_STATUS</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RPC_CLIENTID</span><span class="token punctuation">></span></span>908eafd4-9aec-4288-96f1-e8011d181561<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RPC_CLIENTID</span><span class="token attr-name">&lt;RPC_CALLID</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RPC_CALLID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_ALLOCATE_BLOCK_ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>131<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCK_ID</span><span class="token punctuation">></span></span>1073741839<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCK_ID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_SET_GENSTAMP_V2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>132<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GENSTAMPV2</span><span class="token punctuation">></span></span>1016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GENSTAMPV2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_ADD_BLOCK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>133<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PATH</span><span class="token punctuation">></span></span>/hello7.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PATH</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCK</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCK_ID</span><span class="token punctuation">></span></span>1073741839<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCK_ID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NUM_BYTES</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NUM_BYTES</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GENSTAMP</span><span class="token punctuation">></span></span>1016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GENSTAMP</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCK</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RPC_CLIENTID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RPC_CLIENTID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RPC_CALLID</span><span class="token punctuation">></span></span>-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RPC_CALLID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPCODE</span><span class="token punctuation">></span></span>OP_CLOSE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPCODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TXID</span><span class="token punctuation">></span></span>134<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TXID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LENGTH</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LENGTH</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INODEID</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>INODEID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PATH</span><span class="token punctuation">></span></span>/hello7.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PATH</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>REPLICATION</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>REPLICATION</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MTIME</span><span class="token punctuation">></span></span>1512943608761<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MTIME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ATIME</span><span class="token punctuation">></span></span>1512943607866<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ATIME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCKSIZE</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCKSIZE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CLIENT_NAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CLIENT_NAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CLIENT_MACHINE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CLIENT_MACHINE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OVERWRITE</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OVERWRITE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCK</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BLOCK_ID</span><span class="token punctuation">></span></span>1073741839<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCK_ID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NUM_BYTES</span><span class="token punctuation">></span></span>25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NUM_BYTES</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GENSTAMP</span><span class="token punctuation">></span></span>1016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GENSTAMP</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BLOCK</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PERMISSION_STATUS</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>USERNAME</span><span class="token punctuation">></span></span>atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>USERNAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GROUPNAME</span><span class="token punctuation">></span></span>supergroup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GROUPNAME</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MODE</span><span class="token punctuation">></span></span>420<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MODE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PERMISSION_STATUS</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RECORD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EDITS</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>Q：NameNode如何确定下次开机启动的时候合并哪些Edits？</strong></p></li><li><p><strong>A：NameNode启动的时候合并的是上次停机前正在写入的Edits，即edits_inprogress_xxx，根据seen_txid里面记录最新的FsImage(镜像文件)的值去合并Edits(编辑日志)。</strong></p></li></ul><h3 id="5-3-CheckPoint时间设置"><a href="#5-3-CheckPoint时间设置" class="headerlink" title="5.3 CheckPoint时间设置"></a>5.3 CheckPoint时间设置</h3><ol><li>通常情况下，SecondaryNameNode每隔一小时执行一次。</li></ol><ul><li>[hdfs-default.xml]</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.checkpoint.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>一分钟检查一次操作次数，当操作次数达到1百万时，SecondaryNameNode执行一次。</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.checkpoint.txns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>操作动作次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.checkpoint.check.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span> 1分钟检查一次操作次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-NameNode故障处理"><a href="#5-4-NameNode故障处理" class="headerlink" title="5.4 NameNode故障处理"></a>5.4 NameNode故障处理</h2><ul><li><strong>NameNode故障后，可以采用如下两种方法恢复数据。</strong></li></ul><h3 id="5-4-1-方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录"><a href="#5-4-1-方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录" class="headerlink" title="5.4.1 方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录"></a>5.4.1 方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录</h3><ol><li><p>kill -9 NameNode，删除进程</p></li><li><p>删除NameNode存储的数据（&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;tmp&#x2F;dfs&#x2F;name）</p></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ <span class="token function">rm</span> <span class="token operator">-</span>rf <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs/name/<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>拷贝SecondaryNameNode中数据到原NameNode存储数据目录</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 dfs]</span>$ scp <span class="token operator">-</span>r atguigu@hadoop104:<span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs/namesecondary/<span class="token operator">*</span> <span class="token punctuation">.</span><span class="token operator">/</span>name/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>重新启动NameNode</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ sbin/hadoop-daemon<span class="token punctuation">.</span>sh <span class="token function">start</span> namenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-4-2-方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将Secondary-NameNode中数据拷贝到NameNode目录中"><a href="#5-4-2-方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将Secondary-NameNode中数据拷贝到NameNode目录中" class="headerlink" title="5.4.2 方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将Secondary NameNode中数据拷贝到NameNode目录中"></a>5.4.2 方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将Secondary NameNode中数据拷贝到NameNode目录中</h3><ol><li>修改hdfs-site.xml中的</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.checkpoint.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/module/hadoop-2.7.2/data/tmp/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>kill -9 NameNode进程</p></li><li><p>删除NameNode存储的数据（&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;tmp&#x2F;dfs&#x2F;name）</p></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ <span class="token function">rm</span> <span class="token operator">-</span>rf <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs/name/<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>如果SecondaryNameNode不和NameNode在一个主机节点上，需要将SecondaryNameNode存储数据的目录拷贝到NameNode存储数据的平级目录（方法一为拷贝到下一级name目录里），并删除in_use.lock文件</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 dfs]</span>$ scp <span class="token operator">-</span>r atguigu@hadoop104:<span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs/namesecondary <span class="token punctuation">.</span><span class="token operator">/</span><span class="token namespace">[atguigu@hadoop102 namesecondary]</span>$ <span class="token function">rm</span> <span class="token operator">-</span>rf in_use<span class="token punctuation">.</span>lock<span class="token namespace">[atguigu@hadoop102 dfs]</span>$ <span class="token function">pwd</span><span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/<span class="token keyword">data</span><span class="token operator">/</span>tmp/dfs<span class="token namespace">[atguigu@hadoop102 dfs]</span>$ <span class="token function">ls</span><span class="token keyword">data</span>  name  namesecondary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>导入检查点数据（等待一会ctrl+c结束掉）</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hdfs namenode <span class="token operator">-</span>importCheckpoint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>启动NameNode</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ sbin/hadoop-daemon<span class="token punctuation">.</span>sh <span class="token function">start</span> namenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>检查事物更多，过程更为标准。</strong></li></ul><h2 id="5-5-集群安全模式"><a href="#5-5-集群安全模式" class="headerlink" title="5.5 集群安全模式"></a>5.5 集群安全模式</h2><h3 id="5-5-1-概述"><a href="#5-5-1-概述" class="headerlink" title="5.5.1 概述"></a>5.5.1 概述</h3><ol><li><strong>NameNode启动</strong><br>NarneNode启动时，首先将镜像文件(FsImage）载入内存，并执行编辑日志(Edits）中的各项操作。一旦在内存中成功建立文件系统元数据的映像，则创建一个新的FsImage文件和一个空的编辑日志。此时，NameNode开始监听DataNode请求。这个过程期间，NameNode一直运行在<strong>安全模式，即NameNode的文件系统对于客户湍来说是只读的</strong>。</li><li><strong>DataNode启动</strong><br>系统中的数据块的位置并不是由NameNode维护的，而是以块列表的形式存储在DataNode中。在系统的正常操作期间，NameNode会在内存中保留所有块位置的映射信息。<strong>在安全模式下</strong>，各个DataNode会向NameNode发送新的块列表信息，NameNode了解到足够多的块位置信息之后，即可高效运行文件系统。</li><li><strong>安全模式退出判断</strong><br>如果满足”“最小副本条件”，NameNode会在30利钟之后就退出安全模式。所谓的最小副本条件指的是在整个文件系统中99.9%的块满足最小副本级别（默认值: dfsreplication.rin&#x3D;1)。在启动一个刚刚格式化的HDFS集群时，因为系统中还没有任何块，听以NameNode不会进入安全模式。</li></ol><h3 id="5-5-2-基本语法"><a href="#5-5-2-基本语法" class="headerlink" title="5.5.2 基本语法"></a>5.5.2 基本语法</h3><ul><li>集群处于安全模式，不能执行重要操作（写操作）。集群启动完成后，自动退出安全模式。</li></ul><ol><li><p>bin&#x2F;hdfs dfsadmin -safemode get        （功能描述：查看安全模式状态）</p></li><li><p>bin&#x2F;hdfs dfsadmin -safemode enter  （功能描述：进入安全模式状态）</p></li><li><p>bin&#x2F;hdfs dfsadmin -safemode leave    （功能描述：离开安全模式状态）</p></li><li><p>bin&#x2F;hdfs dfsadmin -safemode wait    （功能描述：等待安全模式状态）</p></li></ol><h3 id="5-5-3-案例"><a href="#5-5-3-案例" class="headerlink" title="5.5.3 案例"></a>5.5.3 案例</h3><ul><li>模拟等待安全模式</li></ul><ol><li><strong>查看当前模式</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfsadmin <span class="token operator">-</span>safemode getSafe mode is OFF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>进入安全模式</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hdfs dfsadmin <span class="token operator">-</span>safemode enter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>创建并执行下面的脚本</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在<span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2路径上，编辑一个脚本safemode<span class="token punctuation">.</span>sh<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ touch safemode<span class="token punctuation">.</span>sh<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ vim safemode<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑以下内容：</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#!/bin/bash</span><span class="token comment"># 等待离开安全模式之后执行下面的命令</span>hdfs dfsadmin <span class="token operator">-</span>safemode waithdfs dfs <span class="token operator">-</span>put <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/README<span class="token punctuation">.</span>txt <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改脚本文件权限并执行（初始无反应）</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ chmod 777 safemode<span class="token punctuation">.</span>sh<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>safemode<span class="token punctuation">.</span>sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>再打开一个窗口，执行如下命令，离开安全模式</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hdfs dfsadmin <span class="token operator">-</span>safemode leave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><strong>观察</strong></li></ol><p>（1）再观察上一个窗口，显示：Safe mode is OFF</p><p>（2）HDFS集群上已经有上传的数据了。</p><h2 id="5-6-NameNode多目录配置"><a href="#5-6-NameNode多目录配置" class="headerlink" title="5.6 NameNode多目录配置"></a>5.6 NameNode多目录配置</h2><ol><li><p>NameNode的本地目录可以配置成多个，且每个目录存放内容相同，增加了可靠性。</p></li><li><p>具体配置如下</p></li></ol><p>（1）在hdfs-site.xml文件中增加如下内容，文件路径的个数决定多目录的具体数量</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///&#123;hadoop.tmp.dir&#125;/dfs/name1,file:///&#123;hadoop.tmp.dir&#125;/dfs/name2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）停止集群，删除data和logs中所有数据。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ <span class="token function">rm</span> <span class="token operator">-</span>rf <span class="token keyword">data</span><span class="token operator">/</span> logs/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）格式化集群并启动。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hdfs namenode –format<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ sbin/<span class="token function">start-dfs</span><span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（4）查看结果</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 dfs]</span>$ ll总用量 12drwx-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span> 3 atguigu atguigu 4096 12月 11 08:03 <span class="token keyword">data</span>drwxrwxr-x<span class="token punctuation">.</span> 3 atguigu atguigu 4096 12月 11 08:03 name1drwxrwxr-x<span class="token punctuation">.</span> 3 atguigu atguigu 4096 12月 11 08:03 name2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-DataNode（面试开发重点）"><a href="#6-DataNode（面试开发重点）" class="headerlink" title="6 DataNode（面试开发重点）"></a>6 DataNode（面试开发重点）</h1><h2 id="6-1-DataNode工作机制"><a href="#6-1-DataNode工作机制" class="headerlink" title="6.1 DataNode工作机制"></a>6.1 DataNode工作机制</h2><ol><li>DataNode工作机制如图6.1：</li></ol><p><img src="http://img.fdchen.host/DataNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="DataNode工作机制"></p><center>图6.1 DataNode工作机制</center><ol start="2"><li><strong>详细解释如下：</strong></li></ol><ul><li><p>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是<strong>元数据包括数据块的长度，块数据的校验和，以及时间戳</strong>。</p></li><li><p>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。</p></li><li><p>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟+30秒没有收到某个DataNode的心跳，则认为该节点不可用。</p></li><li><p>集群运行中可以安全加入和退出一些机器。</p></li></ul><h2 id="6-2-数据完整性"><a href="#6-2-数据完整性" class="headerlink" title="6.2 数据完整性"></a>6.2 数据完整性</h2><ul><li><strong>DataNode节点保证数据完整性的方法如下：</strong></li></ul><ol><li><p>当DataNode读取Block的时候，它会计算CheckSum。</p></li><li><p>如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</p></li><li><p>Client读取其他DataNode上的Block。</p></li><li><p>DataNode在其文件创建后<strong>周期验证</strong>CheckSum，验证方法示例如图6.2：</p></li></ol><p><img src="http://img.fdchen.host/%E9%AA%8C%E8%AF%81CheckSum%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B.png" alt="验证CheckSum方法示例"></p><center>图6.2 验证CheckSum方法示例</center><p><strong>Tip：CRC校验在实际运用中更合适，更准确。</strong></p><h2 id="6-3-掉线时限参数设置"><a href="#6-3-掉线时限参数设置" class="headerlink" title="6.3 掉线时限参数设置"></a>6.3 掉线时限参数设置</h2><ul><li><strong>DataNode掉线时限参数设置，如图6.3：</strong></li></ul><p><img src="http://img.fdchen.host/DataNode%E6%8E%89%E7%BA%BF%E6%97%B6%E9%99%90%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.png" alt="DataNode掉线时限参数设置"></p><center>图6.3 DataNode掉线时限参数设置</center><p><strong>Tip：hdfs-site.xml 配置文件中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.heartbeat.recheck-interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>300000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--5分钟--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.heartbeat.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--3秒--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-服役新数据节点"><a href="#6-4-服役新数据节点" class="headerlink" title="6.4 服役新数据节点"></a>6.4 服役新数据节点</h2><ol start="0"><li><p><strong>需求</strong></p><p>随着公司业务的增长，数据量越来越大，原有的数据节点的容量已经不能满足存储数据的需求，需要在原有集群基础上<strong>动态添加新的数据节点</strong>。</p></li><li><p><strong>环境准备</strong></p></li></ol><p>（1）在hadoop104主机上再克隆一台hadoop105主机<br>（2）修改IP地址和主机名称<br>（3）删除原来HDFS文件系统留存的文件（&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data和log&#x2F;）<br>（4）source一下配置文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop105 hadoop-2.7.2]</span>$ source <span class="token operator">/</span>etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>具体步骤</strong></li></ol><p>（1）直接启动DataNode，即可关联到集群</p><p>（2）在hadoop105上上传文件示例如下</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop105 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>put <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/LICENSE<span class="token punctuation">.</span>txt <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）<strong>如果数据不均衡，可以用命令实现集群的再平衡</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 sbin]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span><span class="token function">start-balancer</span><span class="token punctuation">.</span>shstarting balancer<span class="token punctuation">,</span> logging to <span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/logs/hadoop-atguigu-balancer-hadoop102<span class="token punctuation">.</span>outTime Stamp               Iteration<span class="token comment">#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-5-退役旧数据节点"><a href="#6-5-退役旧数据节点" class="headerlink" title="6.5 退役旧数据节点"></a>6.5 退役旧数据节点</h2><h3 id="6-5-1-添加白名单"><a href="#6-5-1-添加白名单" class="headerlink" title="6.5.1 添加白名单"></a>6.5.1 添加白名单</h3><ul><li><p><strong>添加到白名单的主机节点，都允许访问NameNode，不在白名单的主机节点，都会被退出。</strong></p></li><li><p><strong>配置白名单的步骤如下：</strong></p></li></ul><ol><li><strong>在NameNode的&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;etc&#x2F;hadoop目录下创建dfs.hosts（自定义名称，但官方建议这样命名）文件</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ <span class="token function">pwd</span><span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/etc/hadoop<span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ touch dfs<span class="token punctuation">.</span>hosts<span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ vi dfs<span class="token punctuation">.</span>hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加如下主机名称（不添加hadoop105），不可有空格或空白</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop102hadoop103hadoop104<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts属性</strong></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>配置文件分发</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ xsync hdfs-site<span class="token punctuation">.</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>刷新NameNode</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfsadmin <span class="token operator">-</span>refreshNodesRefresh nodes successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><strong>更新ResourceManager节点</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ yarn rmadmin <span class="token operator">-</span>refreshNodes17/06/24 14:17:11 INFO client<span class="token punctuation">.</span>RMProxy: Connecting to ResourceManager at hadoop103/192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>103:8033<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li><strong>在Web浏览器上查看</strong></li></ol><p><img src="http://img.fdchen.host/Web%E6%9F%A5%E7%9C%8BDataNode%E4%BF%A1%E6%81%AF.png" alt="Web查看DataNode信息"></p><center>图6.4 Web查看DataNode信息</center><ol start="7"><li><strong>如果数据不均衡，可以用命令实现集群的再平衡</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 sbin]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span><span class="token function">start-balancer</span><span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-2-黑名单退役"><a href="#6-5-2-黑名单退役" class="headerlink" title="6.5.2 黑名单退役"></a>6.5.2 黑名单退役</h3><ul><li><strong>在黑名单上面的主机都会被强制退出。</strong></li><li><strong>具体步骤如下：</strong></li></ul><ol><li><strong>在NameNode的&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;etc&#x2F;hadoop目录下创建dfs.hosts.exclude文件</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ <span class="token function">pwd</span><span class="token operator">/</span>opt/module/hadoop-2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>2/etc/hadoop<span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ touch dfs<span class="token punctuation">.</span>hosts<span class="token punctuation">.</span>exclude<span class="token namespace">[atguigu@hadoop102 hadoop]</span>$ vi dfs<span class="token punctuation">.</span>hosts<span class="token punctuation">.</span>exclude<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加如下主机名称（要退役的节点），不允许有空格或空行</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop105<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts.exclude属性</strong></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.hosts.exclude<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts.exclude<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>刷新NameNode、刷新ResourceManager</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfsadmin <span class="token operator">-</span>refreshNodesRefresh nodes successful<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ yarn rmadmin <span class="token operator">-</span>refreshNodes17/06/24 14:55:56 INFO client<span class="token punctuation">.</span>RMProxy: Connecting to ResourceManager at hadoop103/192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>103:8033<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p><strong>检查Web浏览器，退役节点的状态为decommission in progress（退役中），说明数据节点正在复制块到其他节点</strong></p></li><li><p><strong>等待退役节点状态为decommissioned（所有块已经复制完成），停止该节点及节点资源管理器。</strong></p></li></ol><ul><li><strong>Tip：如果副本数是3，服役的节点小于等于3，是不能退役成功的，需要修改副本数后才能退役</strong></li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop105 hadoop-2.7.2]</span>$ sbin/hadoop-daemon<span class="token punctuation">.</span>sh stop datanodestopping datanode<span class="token namespace">[atguigu@hadoop105 hadoop-2.7.2]</span>$ sbin/yarn-daemon<span class="token punctuation">.</span>sh stop nodemanagerstopping nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>如果数据不均衡，可以用命令实现集群的再平衡</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ sbin/<span class="token function">start-balancer</span><span class="token punctuation">.</span>sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>Tip：不允许白名单和黑名单中同时出现同一个主机名称。</strong></li></ul><h2 id="6-6-DataNode多目录配置"><a href="#6-6-DataNode多目录配置" class="headerlink" title="6.6 DataNode多目录配置"></a>6.6 DataNode多目录配置</h2><ol><li><strong>DataNode也可以配置成多个目录，每个目录存储的数据不一样（与NameNode不同）。</strong>即：不同路径下数据不同，不是副本的关系。</li><li>具体配置如下（类似NameNode的多目录配置）：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///$&#123;hadoop.tmp.dir&#125;/dfs/data1,file:///$&#123;hadoop.tmp.dir&#125;/dfs/data2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-HDFS-2-X-新特性"><a href="#7-HDFS-2-X-新特性" class="headerlink" title="7 HDFS 2.X 新特性"></a>7 HDFS 2.X 新特性</h1><h2 id="7-1-集群间数据拷贝"><a href="#7-1-集群间数据拷贝" class="headerlink" title="7.1 集群间数据拷贝"></a>7.1 集群间数据拷贝</h2><h3 id="7-1-1-scp实现两个远程主机之间的文件复制"><a href="#7-1-1-scp实现两个远程主机之间的文件复制" class="headerlink" title="7.1.1 scp实现两个远程主机之间的文件复制"></a>7.1.1 scp实现两个远程主机之间的文件复制</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scp <span class="token operator">-</span>r hello<span class="token punctuation">.</span>txt root@hadoop103:<span class="token operator">/</span>user/atguigu/hello<span class="token punctuation">.</span>txt<span class="token operator">/</span><span class="token operator">/</span> 推 pushscp <span class="token operator">-</span>r root@hadoop103:<span class="token operator">/</span>user/atguigu/hello<span class="token punctuation">.</span>txt  hello<span class="token punctuation">.</span>txt<span class="token operator">/</span><span class="token operator">/</span> 拉 pullscp <span class="token operator">-</span>r root@hadoop103:<span class="token operator">/</span>user/atguigu/hello<span class="token punctuation">.</span>txt root@hadoop104:<span class="token operator">/</span>user/atguigu  <span class="token operator">/</span><span class="token operator">/</span>是通过本地主机中转实现两个远程主机的文件复制；如果在两个远程主机之间ssh没有配置的情况下可以使用该方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-2-采用distcp命令实现两个Hadoop集群之间的递归数据复制"><a href="#7-1-2-采用distcp命令实现两个Hadoop集群之间的递归数据复制" class="headerlink" title="7.1.2 采用distcp命令实现两个Hadoop集群之间的递归数据复制"></a>7.1.2 采用distcp命令实现两个Hadoop集群之间的递归数据复制</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$  bin/hadoop distcphdfs:<span class="token operator">/</span><span class="token operator">/</span>haoop102:9000/user/atguigu/hello<span class="token punctuation">.</span>txt hdfs:<span class="token operator">/</span><span class="token operator">/</span>hadoop103:9000/user/atguigu/hello<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-2-小文件存档"><a href="#7-2-小文件存档" class="headerlink" title="7.2 小文件存档"></a>7.2 小文件存档</h2><h3 id="7-2-1-HDFS存储小文件弊端"><a href="#7-2-1-HDFS存储小文件弊端" class="headerlink" title="7.2.1 HDFS存储小文件弊端"></a>7.2.1 HDFS存储小文件弊端</h3><p>每个文件均按块存储，每个块的元教据存储在NameNode的内存中，因此HDFS存储小文件会非常低效。因为大量的小文件会耗尽NamdNode中的大部分内存。但注意，存储小文件所需要的磁盘容量和数据块的大小无关。例如，一个1NMB的文件设置为128MB的块存储，实际使用的是1M的磁盘空间，而不是128M。</p><h3 id="7-2-2-解决存储小文件办法之一"><a href="#7-2-2-解决存储小文件办法之一" class="headerlink" title="7.2.2 解决存储小文件办法之一"></a>7.2.2 解决存储小文件办法之一</h3><p>HDFS存档文件或HAR文件，是一个更高效的文件存档工具，它将文件存入HDFS块，在减少NameNode内存使用的同时，允许对文件进行透明的访问。具体说来，HDFS存档文件对内还是一个一个独立文件，对NameNode而言却是一个整体，减少了NameNode的内存。如图7.1：</p><p><img src="http://img.fdchen.host/HDFS%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="HDFS存档文件示意图"></p><center>图7.1 HDFS存档文件示意图</center><h3 id="7-2-3-案例实操"><a href="#7-2-3-案例实操" class="headerlink" title="7.2.3 案例实操"></a>7.2.3 案例实操</h3><ol><li><strong>需要启动YARN进程</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ <span class="token function">start-yarn</span><span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>归档文件</strong></li></ol><ul><li>把&#x2F;user&#x2F;atguigu&#x2F;input目录里面的所有文件归档成一个叫input.har的归档文件，并把归档后文件存储到&#x2F;user&#x2F;atguigu&#x2F;output路径下。</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ bin/hadoop archive <span class="token operator">-</span>archiveName input<span class="token punctuation">.</span>har –p <span class="token operator">/</span>user/atguigu/input  <span class="token operator">/</span>user/atguigu/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>查看归档</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>lsr <span class="token operator">/</span>user/atguigu/output/input<span class="token punctuation">.</span>har<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>lsr har:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>user/atguigu/output/input<span class="token punctuation">.</span>har<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Tip：har是一个协议，用于查看归档成.har的目录。</strong></p><ol start="4"><li><strong>解归档文件</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">cp</span> har:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>user/atguigu/output/input<span class="token punctuation">.</span>har/<span class="token operator">*</span>  <span class="token operator">/</span>user/atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-3-回收站"><a href="#7-3-回收站" class="headerlink" title="7.3 回收站"></a>7.3 回收站</h2><ul><li>开启回收站功能，可以将删除的文件在不超时的情况下，恢复原数据，起到防止误删除、备份等作用。</li></ul><h3 id="7-3-1-回收站参数设置及工作机制"><a href="#7-3-1-回收站参数设置及工作机制" class="headerlink" title="7.3.1 回收站参数设置及工作机制"></a>7.3.1 回收站参数设置及工作机制</h3><p><img src="http://img.fdchen.host/%E5%9B%9E%E6%94%B6%E7%AB%99%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="回收站参数设置及工作机制"></p><center>图7.2 回收站参数设置及工作机制</center><ul><li><strong>Tip：fs.trash.interval和fs.trash.checkpoint.interval的单位都为分钟。</strong></li></ul><h3 id="7-3-2-启用回收站"><a href="#7-3-2-启用回收站" class="headerlink" title="7.3.2 启用回收站"></a>7.3.2 启用回收站</h3><ul><li>修改core-site.xml，配置垃圾回收时间为1分钟。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-3-查看回收站"><a href="#7-3-3-查看回收站" class="headerlink" title="7.3.3 查看回收站"></a>7.3.3 查看回收站</h3><ul><li>当trash启动的话，每个用户都会有自己的回收站目录，这个目录名是.Trash这个具体路径是&#x2F;user&#x2F;集群用户&#x2F;.Trash，比如：&#x2F;user&#x2F;atguigu&#x2F;.Trash&#x2F;….</li></ul><h3 id="7-3-4-修改访问垃圾回收站用户名称"><a href="#7-3-4-修改访问垃圾回收站用户名称" class="headerlink" title="7.3.4 修改访问垃圾回收站用户名称"></a>7.3.4 修改访问垃圾回收站用户名称</h3><ul><li><p>进入垃圾回收站用户名称，默认是dr.who，修改为atguigu用户</p></li><li><p>[core-site.xml]</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.http.staticuser.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-5-通过程序删除的文件不会经过回收站，需要调用moveToTrash-才进入回收站"><a href="#7-3-5-通过程序删除的文件不会经过回收站，需要调用moveToTrash-才进入回收站" class="headerlink" title="7.3.5 通过程序删除的文件不会经过回收站，需要调用moveToTrash()才进入回收站"></a>7.3.5 通过程序删除的文件不会经过回收站，需要调用moveToTrash()才进入回收站</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Trash</span> trash <span class="token operator">=</span> <span class="token class-name">New</span> <span class="token class-name">Trash</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>trash<span class="token punctuation">.</span><span class="token function">moveToTrash</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-3-6-恢复回收站数据"><a href="#7-3-6-恢复回收站数据" class="headerlink" title="7.3.6 恢复回收站数据"></a>7.3.6 恢复回收站数据</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span><span class="token function">mv</span><span class="token operator">/</span>user/atguigu/<span class="token punctuation">.</span>Trash/Current/user/atguigu/input   <span class="token operator">/</span>user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>实质是文件移动。</li></ul><h3 id="7-3-7-清空回收站"><a href="#7-3-7-清空回收站" class="headerlink" title="7.3.7 清空回收站"></a>7.3.7 清空回收站</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hadoop fs <span class="token operator">-</span>expunge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>Tip：这个命令不是立即清空我们的回收站，而是将回收站的文件全部立即放入由时间戳命名的文件目录。</strong></li></ul><h3 id="7-3-8-回收站工作机制总结"><a href="#7-3-8-回收站工作机制总结" class="headerlink" title="7.3.8 回收站工作机制总结"></a>7.3.8 回收站工作机制总结</h3><ol><li>执行删除文件操作，系统首先会将文件移动到&#x2F;user&#x2F;atguigu&#x2F;.Trash&#x2F;current目录；</li><li>等到下一次回收站进行检查时，处于current目录的文件会被放入对应由时间戳命名的文件目录；</li><li>然后回收站循环检查，逐步清理这些由时间戳命名的文件目录，也就是删除达到存活时间的文件目录；</li><li><strong>文件在回收站的存活时间指的就是被删除文件在这些以时间戳命名的文件目录下的存储时间。</strong></li></ol><h2 id="7-4-快照管理"><a href="#7-4-快照管理" class="headerlink" title="7.4 快照管理"></a>7.4 快照管理</h2><ul><li><p>快照相当于<strong>对目录做一个备份</strong>，并不会立即复制所有文件，而是指向同一个文件。当写入发生时，才会产生新文件，也就是说快照是记录文件变化。</p></li><li><p>基本语法</p></li></ul><ol><li><strong>开启&#x2F;禁用指定目录的快照功能</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfsadmin <span class="token operator">-</span>allowSnapshot <span class="token operator">/</span>user/atguigu/input<span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfsadmin <span class="token operator">-</span>disallowSnapshot <span class="token operator">/</span>user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>Tip：禁用快照前，必须删除对应目录的快照，否则无法删除。</strong></li></ul><ol start="2"><li><strong>对目录创建快照，不指定名称时，系统以时间戳命名</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfs <span class="token operator">-</span>createSnapshot <span class="token operator">/</span>user/atguigu/input<span class="token comment"># 通过web访问hdfs://hadoop102:50070/user/atguigu/input/.snapshot/s…  </span><span class="token comment"># 可以发现快照和源文件使用相同数据</span><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfs <span class="token operator">-</span>lsr <span class="token operator">/</span>user/atguigu/input/<span class="token punctuation">.</span>snapshot/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>指定名称创建快照</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfs <span class="token operator">-</span>createSnapshot <span class="token operator">/</span>user/atguigu/input  miao170508<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>重命名快照</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 语法格式：hdfs dfs -renameSnapshot path oldName newName</span><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfs <span class="token operator">-</span>renameSnapshot <span class="token operator">/</span>user/atguigu/input/ miao170508 atguigu170508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><strong>列出当前用户所有可快照目录（允许快照的目录）</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs lsSnapshottableDir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li><strong>比较两个快照目录或者快照与文件目录的不同之处</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 语法格式：hdfs snapshotDiff fromPath . toPath (用.区分两个路径)</span><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs snapshotDiff <span class="token operator">/</span>user/atguigu/input/  <span class="token punctuation">.</span>  <span class="token punctuation">.</span>snapshot/atguigu170508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Tip：</strong></p><ul><li>用“-”表示后者相对于前者少了一个文件，可能是前者新增了一个文件；</li><li>用“+”表示后者比前者多了一个文件，可能是前者删除了一个文件。</li></ul><ol start="7"><li><strong>恢复快照</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[atguigu@hadoop102 hadoop-2.7.2]</span>$ hdfs dfs <span class="token operator">-</span><span class="token function">cp</span><span class="token operator">/</span>user/atguigu/input/<span class="token punctuation">.</span>snapshot/s20170708-134303<span class="token punctuation">.</span>027 <span class="token operator">/</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li><strong>删除快照</strong></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 语法格式：hdfs dfs -deleteSnapshot &lt;path> &lt;snapshotName></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>PS</strong>：视频教程查看<a href="http://www.atguigu.com/download_detail.shtml?v=52">尚硅谷-Hadoop视频教程</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔_收藏夹</title>
      <link href="/2020/sui-bi-shou-cang-jia/"/>
      <url>/2020/sui-bi-shou-cang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AI"><a href="#1-AI" class="headerlink" title="1 AI"></a>1 AI</h1><h2 id="1-1-学习笔记"><a href="#1-1-学习笔记" class="headerlink" title="1.1 学习笔记"></a>1.1 学习笔记</h2><h3 id="1-1-1-吴恩达机器学习视频教程笔记"><a href="#1-1-1-吴恩达机器学习视频教程笔记" class="headerlink" title="1.1.1 吴恩达机器学习视频教程笔记"></a>1.1.1 <a href="https://zhuanlan.zhihu.com/p/43654114">吴恩达机器学习视频教程笔记</a></h3><h3 id="1-1-2-NLP-with-DL-by-Chris-Manning"><a href="#1-1-2-NLP-with-DL-by-Chris-Manning" class="headerlink" title="1.1.2 NLP with DL by Chris Manning"></a>1.1.2 NLP with DL by Chris Manning</h3><ul><li><p>视频链接：<a href="https://www.bilibili.com/video/BV1Eb411H7Pq?p=6">https://www.bilibili.com/video/BV1Eb411H7Pq?p=6</a></p></li><li><p>中文笔记链接：<a href="https://github.com/LooperXX/CS224n-Reading-Notes/">https://github.com/LooperXX/CS224n-Reading-Notes/</a></p></li></ul><h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2 环境配置"></a>2 环境配置</h1><h2 id="2-1-博客搭建"><a href="#2-1-博客搭建" class="headerlink" title="2.1 博客搭建"></a>2.1 博客搭建</h2><h3 id="2-1-1-Typora-PicGo-七牛云搭建博客写作环境"><a href="#2-1-1-Typora-PicGo-七牛云搭建博客写作环境" class="headerlink" title="2.1.1 Typora+PicGo+七牛云搭建博客写作环境"></a>2.1.1 Typora+PicGo+七牛云搭建博客写作环境</h3><ul><li><a href="https://my.oschina.net/u/4115721/blog/4827426">Typora+PicGo+Gitee搭建博客写作环境</a></li><li><a href="https://blog.csdn.net/javacs123/article/details/106268130">PicGo设置免费图床之七牛云</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Eclipse创建Maven Project之Debug</title>
      <link href="/2020/java-eclipse-chuang-jian-maven-project-huan-jing-pei-zhi-debug/"/>
      <url>/2020/java-eclipse-chuang-jian-maven-project-huan-jing-pei-zhi-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="1-报错JRE-Compiler-Compliance-Problem-和-Java-Build-Path-Problems"><a href="#1-报错JRE-Compiler-Compliance-Problem-和-Java-Build-Path-Problems" class="headerlink" title="1. 报错JRE Compiler Compliance Problem 和  Java Build Path Problems"></a>1. 报错JRE Compiler Compliance Problem 和  Java Build Path Problems</h3><ul><li><strong>错误如图：</strong></li></ul><p><img src="http://img.fdchen.host/JRE%20Compiler%20Compliance%20Problem.jpg" alt="JRE Compiler Compliance Problem"></p><center>图1.1 JRE Compiler Compliance Problem</center><ul><li><strong>产生原因：</strong>pom.xml文件中引入的JDK，与电脑上安装的JDK版本不符。</li></ul><p>pom.xml文件中引入JDK的依赖如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>$&#123;JAVA_HOME&#125;/lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><ul><li><strong>解决办法：</strong>统一pom.xml文件与电脑上安装的JDK版本，建议使用1.8版本，目前的11.0以及12.0版本没有对应的tool.jar文件，可能出现其他错误。</li><li><strong>Tip：</strong><ul><li>在电脑上配置JDK的教程搜索即可，此处不赘述。</li><li>配置好环境之后，在windows的CMD命令窗口输入“Java -version”，查看JDK版本，如果版本未改变请重启电脑；如果报错请重新尝试配置。</li><li>修改电脑上的JDK版之后记得修改Eclipse上使用的JDK版本，不然会报错，见<strong>错误3</strong>。</li></ul></li></ul><h3 id="2-类中无法自动导入org-apache-hadoop等相关包"><a href="#2-类中无法自动导入org-apache-hadoop等相关包" class="headerlink" title="2. 类中无法自动导入org.apache.hadoop等相关包"></a>2. 类中无法自动导入org.apache.hadoop等相关包</h3><h3 id="或者-报错The-container-‘Maven-Dependencies’-references-non-existing-library"><a href="#或者-报错The-container-‘Maven-Dependencies’-references-non-existing-library" class="headerlink" title="或者 报错The container ‘Maven Dependencies’ references non existing library"></a>或者 报错The container ‘Maven Dependencies’ references non existing library</h3><ul><li><p><strong>产生原因：</strong>pom.xml文件引入的依赖没有成功导入本地库。</p></li><li><p><strong>解决办法：右键点击项目名</strong> –&gt; <strong>Maven</strong> –&gt; <strong>Update Project</strong> –&gt; <strong>勾选Force Update of Snapshots&#x2F;Releases</strong> –&gt; <strong>点击OK</strong>，下载相关插件jar包即可， 时间可能有点长，耐心等待。</p></li><li><p><strong>Tip：</strong></p><ul><li><p>利用Maven下载插件jar包速度很慢，可以采用以下方法加快下载速度：</p><ul><li>获取jar下载位置后自行下载到本地</li><li>将下载的jar包拷贝到maven的本地库，maven本地库的位置是C:\Users\username\.m2\repository</li><li>jar包所在位置可以根据jar的下载地址后半段获知，如图2.1：</li></ul><p><img src="http://img.fdchen.host/jar%E5%8C%85%E7%9A%84%E6%89%80%E5%9C%A8%E4%BD%8D%E7%BD%AE.png" alt="jar包的所在位置"></p><center>图2.1 jar包的所在位置</center></li><li><p>部分插件jar包可从此处下载（注意版本是否对应）：</p><ul><li>链接：<a href="https://pan.baidu.com/s/1aWpcGuakhaAJOnvFuLbGjA">https://pan.baidu.com/s/1aWpcGuakhaAJOnvFuLbGjA</a><br>提取码：o1hc</li></ul></li></ul></li></ul><h3 id="3-报错WARNING-Illegal-reflective-access-by-org-apache-hadoop-security-authentication-util-KerberosUtil"><a href="#3-报错WARNING-Illegal-reflective-access-by-org-apache-hadoop-security-authentication-util-KerberosUtil" class="headerlink" title="3. 报错WARNING: Illegal reflective access by org.apache.hadoop.security.authentication.util.KerberosUtil"></a>3. 报错WARNING: Illegal reflective access by org.apache.hadoop.security.authentication.util.KerberosUtil</h3><ul><li><strong>产生原因：</strong>Eclipse调用的JDK版本太高。</li><li><strong>解决办法：</strong>修改Eclipse调用的JDK，使用JDK 1.8版本，步骤如下：<ul><li>点击<strong>Window</strong> –&gt; <strong>Preferences</strong> –&gt; <strong>Java</strong> –&gt; <strong>Installed JREs</strong> –&gt; <strong>Add</strong> –&gt; <strong>Standard VM</strong> –&gt; <strong>Next</strong> –&gt; <strong>Directory</strong> –&gt; <strong>选择JDK的安装目录，如”C:\Program Files\Java\jdk1.8.0_144”</strong> –&gt; <strong>Finish</strong> –&gt; <strong>Apply and Close</strong>。</li></ul></li></ul><h3 id="4-连接Hdoop集群报错Retrying-connect-to-server-hadoop101-x2F-192-168-1-101-9000-Already-tried-0-time-s-maxRetries-x3D-45"><a href="#4-连接Hdoop集群报错Retrying-connect-to-server-hadoop101-x2F-192-168-1-101-9000-Already-tried-0-time-s-maxRetries-x3D-45" class="headerlink" title="4. 连接Hdoop集群报错Retrying connect to server: hadoop101&#x2F;192.168.1.101:9000. Already tried 0 time(s); maxRetries&#x3D;45"></a>4. 连接Hdoop集群报错Retrying connect to server: hadoop101&#x2F;192.168.1.101:9000. Already tried 0 time(s); maxRetries&#x3D;45</h3><ul><li><strong>产生原因：</strong>访问的Hadoop集群的防火墙未关闭，需要关闭防火墙。</li><li><strong>解决办法：</strong>在对应虚拟机上输入命令”service iptables stop”，关闭防火墙（需要root用户输入或者使用sudo命令）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debug </tag>
            
            <tag> Eclipse </tag>
            
            <tag> Maven </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器_利用MSTSC进行连接阿里云Windows服务器</title>
      <link href="/2020/fu-wu-qi-li-yong-mstsc-jin-xing-lian-jie-a-li-yun-windows-fu-wu-qi/"/>
      <url>/2020/fu-wu-qi-li-yong-mstsc-jin-xing-lian-jie-a-li-yun-windows-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置规则"><a href="#1-配置规则" class="headerlink" title="1 配置规则"></a>1 配置规则</h1><ol><li>在实例详情里面进入“<strong>本实例安全组</strong>”界面，<br><img src="https://img-blog.csdnimg.cn/2020030717415913.png" alt="在这里插入图片描述"></li><li>进入对应实例界面，选择“<strong>快速创建规则</strong>”<br><img src="https://img-blog.csdnimg.cn/20200307174518170.png" alt="在这里插入图片描述"></li><li>选择常用的端口，如：SSH, HTTP, HTTPS, MYSQL等，<br>授权对象自行选择：<br>将端口授权给单个IP地址，填写：123.123.123.123，直接填IP地址即可；<br>将端口授权给IP地址段，填写：10.10.10.1&#x2F;24，直接填IP地址段；<br>将端口授权给全部IP，填写：0.0.0.0&#x2F;0，将端口授权给所有人。<br><img src="https://img-blog.csdnimg.cn/20200307175132754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><span id="more"></span><h1 id="2-登录连接"><a href="#2-登录连接" class="headerlink" title="2 登录连接"></a>2 登录连接</h1><h2 id="2-0-重置实例密码"><a href="#2-0-重置实例密码" class="headerlink" title="2.0 重置实例密码"></a>2.0 重置实例密码</h2><font color="red"><strong>第一次登录需要重置实例密码</strong></font>，如图，选择“<strong>重置实例密码</strong>”。<br><img src="https://img-blog.csdnimg.cn/20200307171231277.png" alt="在这里插入图片描述"><br><font color="red"><strong>Tips：每次重置实例密码之后必须重启才能生效！</strong></font></li></ol><h2 id="2-1-网页远程连接——不支持文件传输"><a href="#2-1-网页远程连接——不支持文件传输" class="headerlink" title="2.1 网页远程连接——不支持文件传输"></a>2.1 网页远程连接——不支持文件传输</h2><p>网页远程连接服务器有两个途径，<strong>workbench</strong> 与 <strong>VNC</strong>。</p><h3 id="2-1-1-workbench连接"><a href="#2-1-1-workbench连接" class="headerlink" title="2.1.1 workbench连接"></a>2.1.1 workbench连接</h3><p>workbench是直接远程连接桌面，如图，用户名在购买之后会以短信形式发送给你，一般是administrator。<br><img src="https://img-blog.csdnimg.cn/20200307171211732.png" alt="在这里插入图片描述"></p><h3 id="2-1-2-VNC连接"><a href="#2-1-2-VNC连接" class="headerlink" title="2.1.2 VNC连接"></a>2.1.2 VNC连接</h3><p>VNC 是 virtual network connection的简称，第一次连接会给一个“远程连接密码”，只会出现一次，一定要记录下来。<br><font color="red"><strong>Tips：“远程连接密码”，只会出现一次，一定要记录下来    ！</strong></font><br><img src="https://img-blog.csdnimg.cn/20200307172156893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录之后，在左上角输入指令。<br><img src="https://img-blog.csdnimg.cn/20200307172245784.png" alt="在这里插入图片描述"><br>选择 “CTRL + ALT + DELETE” 进入登录界面，密码是之前设置的“实例密码”，不是远程连接密码。<br><img src="https://img-blog.csdnimg.cn/20200307182019801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-3-workbench-与-VNC-的区别"><a href="#2-1-3-workbench-与-VNC-的区别" class="headerlink" title="2.1.3 workbench 与 VNC 的区别"></a>2.1.3 workbench 与 VNC 的区别</h3><ol><li>离开连接页面之后，workbench连接可以保持很久，VNC会很快关闭。</li><li>······（未完待续，之后补充）<h2 id="2-2-利用MSTSC连接——Windows-系统-连接-Windows-系统"><a href="#2-2-利用MSTSC连接——Windows-系统-连接-Windows-系统" class="headerlink" title="2.2 利用MSTSC连接——Windows 系统 连接 Windows 系统"></a>2.2 利用MSTSC连接——Windows 系统 连接 Windows 系统</h2></li><li>MSTSC（Microsoft terminal services client），创建与终端服务器或其他远程计算机的连接，编辑现有“远程桌面连接(.rdp)”配置文件，并将 Windows XP 连接（使用“客户端国防部设备 接管理器”创建的连接）迁移到新的 .rdp 文件中。MSTSC还有一种说法，Microsoft Telnet Screen Control ，即“微软远程桌面控制”。</li><li>打开“<strong>控制面板</strong>” &gt; “<strong>用户账户</strong>”  &gt; “<strong>凭据管理器</strong>” 界面 ，如图，选择“<strong>添加Windows凭据</strong>”。<br><img src="https://img-blog.csdnimg.cn/20200309175620221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如图输入相应信息，点击“<strong>确认</strong>”即可。<br><img src="https://img-blog.csdnimg.cn/20200309180150645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>打开MSTSC连接界面：“<strong>win + R</strong>” 进入下图界面，输入 “<strong>mstsc</strong>”，点击“<strong>确认</strong>”即可。<br><img src="https://img-blog.csdnimg.cn/20200309201742164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>经过上面的步骤进入下图界面会自动补全服务器网址，有多个网址时在下拉栏选择，如有其它网址未保存至本地计算机“<strong>Windows凭据</strong>”，需要手动输入服务器公网网址与用户名。<br><img src="https://img-blog.csdnimg.cn/20200309202058746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击左下角的“<strong>显示选项</strong>”，进入如下界面<br><img src="https://img-blog.csdnimg.cn/20200309202439885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击“<strong>本地资源</strong>”，进入如下界面<br><img src="https://img-blog.csdnimg.cn/20200309202534694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击“<strong>详细信息</strong>”，勾选你要映射到服务器的磁盘<br><font color="red"><strong>Tips：经过映射的磁盘里的文件在连接服务器之后可直接复制到服务器上。</strong></font><br><img src="https://img-blog.csdnimg.cn/20200309202612760.png" alt="在这里插入图片描述"></li><li>点击“<strong>连接</strong>”，出现如图警告，选择“<strong>查看证书</strong>”<br><img src="https://img-blog.csdnimg.cn/20200309202908100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>选择“<strong>安装证书</strong>”<br><img src="https://img-blog.csdnimg.cn/20200309203050779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>选择“<strong>本地计算机</strong>”，进入“<strong>下一步</strong>”<br><img src="https://img-blog.csdnimg.cn/20200309203123598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>勾选“<strong>将所有证书都放入下列存储</strong>”，<strong>浏览</strong>选择“<strong>受信任的根证书颁发机构</strong>”，进入“<strong>下一步</strong>”<br><img src="https://img-blog.csdnimg.cn/20200309203222683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击“<strong>完成</strong>”，出现此窗口即可<br><img src="https://img-blog.csdnimg.cn/20200309203525316.png" alt="在这里插入图片描述"></li><li>点击“<strong>确认</strong>”，然后下图也点击“<strong>确认</strong>”，<br><img src="https://img-blog.csdnimg.cn/20200309203050779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>最后点击“<strong>是</strong>”，即完成连接。<br><img src="https://img-blog.csdnimg.cn/20200309202908100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>之后再进行登录，会出现“<strong>名称不匹配</strong>”错误，选择“<strong>是</strong>”忽略即可。<br><img src="https://img-blog.csdnimg.cn/20200325145807955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="2-3-利用XShell和XFTP配合连接——适用于Linux、UNIX系统"><a href="#2-3-利用XShell和XFTP配合连接——适用于Linux、UNIX系统" class="headerlink" title="2.3 利用XShell和XFTP配合连接——适用于Linux、UNIX系统"></a>2.3 利用XShell和XFTP配合连接——适用于Linux、UNIX系统</h2></li></ol><p><strong>PS</strong>：</p><ol><li>利用XShell和XFTP也可连接Windows系统的服务器，但步骤繁琐，远不如MSTSC简单，有兴趣的朋友可以参考此文章：<a href="https://www.jianshu.com/p/6e5bc39d386e">《Windows安装OpenSSH服务》</a>。</li><li>利用XShell和SFTP连接Linux或UNIX服务器请跳转至本人另一篇博客<a href="http://fdchen.host/2020/09/27/Linux%E5%85%A5%E9%97%A8/">《Linux入门》</a>。</li></ol><p><font color="red"><strong>Tips：</strong></font><br><font color="red"><strong>1.  附XShell和XFTP的下载链接</strong></font></p><ol><li>官网下载：<a href="https://xshell.en.softonic.com/">XSell</a>，<a href="https://www.netsarang.com/zh/xftp/">XFTP</a>（需分开下载）</li><li>本人上传资源：含 <strong>XSHell 5</strong> 和 <strong>Xftp_5.0.543</strong>，详见本文附加资源。</li></ol><p><font color="red"><strong>2. 想要详细了解XShell 与 XFTP 可参考此文章：<a href="https://blog.csdn.net/m0_37840000/article/details/82154158">《Xshell和Xftp区别》</a></strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> MSTSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从入门到入坟——我的第一篇博客</title>
      <link href="/2020/sui-bi-cong-ru-men-dao-ru-fen-wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/sui-bi-cong-ru-men-dao-ru-fen-wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要写博客？——Debug方法的进化论"><a href="#1-为什么要写博客？——Debug方法的进化论" class="headerlink" title="1 为什么要写博客？——Debug方法的进化论"></a>1 为什么要写博客？——Debug方法的进化论</h1><h2 id="1-1-收藏网址"><a href="#1-1-收藏网址" class="headerlink" title="1.1 收藏网址"></a>1.1 收藏网址</h2><p>其实，在大学我才开始接触计算机专业，刚开始学的时候懵懵懂懂，很多简单的东西都不明白，但“浏览器”是个好东西，不懂就查。不过很多时候遇到的一些Bug，过了几天就又不会调了。于是到后来我查到一些重要的知识点或Bug解决方案，我就会把网址收藏起来，但是也没怎么好好分类，往往还夹杂着别的学科，就像图片中看到的，乱七八糟，有时候就算知道曾经收藏过，找也要找很久。(图片来自浏览器的收藏夹)<br><img src="https://img-blog.csdnimg.cn/20200410091718104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlbWljaXJjbGVfQ0hFTg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><span id="more"></span><h2 id="1-2-思维导图"><a href="#1-2-思维导图" class="headerlink" title="1.2 思维导图"></a>1.2 思维导图</h2><p>大二的时候我需要做一个项目，很多东西都是边学边做，但是边学边做的坏处就是很容易忘。好在无意中接触到了思维导图（原谅我大一从未用过或了解），当时就觉得，我应该用思维导图做我的学习笔记。于是，一个名为《从入门到入坟》的思维导图面世了，我会把一些Bug解决方案的网址添加在上面作为超链接，着实方便。不过半个月以后，问题又来了，有些Bug是很小的的问题，但是我也想记录下来，放在思维导图里面就显得很繁琐，虽然可以搜索关键字，但是思维导图显得很大很繁杂。（图为 《从入门到入坟》思维导图 ）<br><img src="https://img-blog.csdnimg.cn/20200307000107340.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODU2NTg3,size_16,color_FFFFFF,t_70" alt="“从入门到入坟”思维导图"></p><h2 id="1-3-博客"><a href="#1-3-博客" class="headerlink" title="1.3 博客"></a>1.3 博客</h2><p>现在，我终于找到了一个合适的方法来做学习笔记——写博客。不得不说，写博客确实是一个很好的办法，每次解决一个问题都可以记录下来，不仅可以方便以后再用，而且每每写完都会有些许成就感，毕竟我始终坚信生活需要仪式感！对了，之前的思维导图不能浪费，后续我会慢慢写成博客，当然，支持原创，我会在原作的基础上进行符合我实际情况的修改。</p><h1 id="2-聊以慰藉的感想——纪念我的第一篇博客"><a href="#2-聊以慰藉的感想——纪念我的第一篇博客" class="headerlink" title="2 聊以慰藉的感想——纪念我的第一篇博客"></a>2 聊以慰藉的感想——纪念我的第一篇博客</h1><p>第一篇博客，如同“处女作”一般，当然十分重要，为此我也去找了一篇名为<a href="https://blog.csdn.net/cungudafa/article/details/84658703">《【小白】如何写好自己的一篇CSDN博客（美化1）》</a>的博客学习，有兴趣的可以去看一看。怎么说呢，还是喜欢白底黑字，于是字体、背景什么的我就不去设置了，各位看官多多担待。<br>我也不知道未来的我会变得如何，会不会因为太忙而没有时间写博客，会不会像大家所言“人最终会变成自己所讨厌的人”，未来的一切终究是未知的，但是回顾之前的岁月，往往过得不尽人意，所以在这里，我列下几个问题，写给未来的自己。</p><h1 id="3-Questions"><a href="#3-Questions" class="headerlink" title="3 Questions"></a>3 Questions</h1><ol><li>你每天做的事是不是你当初所想的？</li><li>你有没有实现当初的“豪言壮志”？</li><li>你有没有变成你所讨厌的人？</li><li>······（未完待续，一时间没想到，之后补充）</li></ol><h1 id="4-留言"><a href="#4-留言" class="headerlink" title="4 留言"></a>4 留言</h1><p><em><strong>会当凌绝顶，一览众山小。        ——杜甫《望岳》</strong></em><br><em><strong>我告诉自己，再熬一熬，枯坐比久睡要好。        ——来自小H</strong></em><br><em><strong>77不88。        ——来自小Y</strong></em><br><em><strong>不能失去目标否则将会变成一条咸鱼！        ——来自小K</strong></em><br>——于2020年3月7日0:27第一次编辑，谨以此纪念！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发_微信小程序</title>
      <link href="/2020/qian-duan-kai-fa-wei-xin-xiao-cheng-xu/"/>
      <url>/2020/qian-duan-kai-fa-wei-xin-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="0-官方文档"><a href="#0-官方文档" class="headerlink" title="0 官方文档"></a>0 官方文档</h1><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">官方开发文档</a></li></ul><h1 id="1-界面渲染"><a href="#1-界面渲染" class="headerlink" title="1 界面渲染"></a>1 界面渲染</h1><h2 id="1-1-自定义placeholder颜色与样式"><a href="#1-1-自定义placeholder颜色与样式" class="headerlink" title="1.1 自定义placeholder颜色与样式"></a>1.1 自定义placeholder颜色与样式</h2><ul><li>详见博客：<a href="https://blog.csdn.net/august_leo/article/details/80877382">微信小程序-自定义placeholder颜色和样式</a></li></ul><p>PS：</p><ol><li>字体颜色只能通过placeholder-style设置；</li><li>字体大小只能通过placeholder-class设置</li></ol><h2 id="1-2-text组件不设置宽度，文本长度大于默认宽度时会自动换行"><a href="#1-2-text组件不设置宽度，文本长度大于默认宽度时会自动换行" class="headerlink" title="1.2 text组件不设置宽度，文本长度大于默认宽度时会自动换行"></a>1.2 text组件不设置宽度，文本长度大于默认宽度时会自动换行</h2><h2 id="1-3-margin与padding的区别"><a href="#1-3-margin与padding的区别" class="headerlink" title="1.3 margin与padding的区别"></a>1.3 margin与padding的区别</h2><ul><li>margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。（外边距）</li><li>padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离。（内边距）</li></ul><h2 id="1-4-微信小程序width-100-设置margin后宽度超过屏幕"><a href="#1-4-微信小程序width-100-设置margin后宽度超过屏幕" class="headerlink" title="1.4 微信小程序width:100%设置margin后宽度超过屏幕"></a>1.4 微信小程序width:100%设置margin后宽度超过屏幕</h2><p>这个时候宽度不能设置100%，<strong>把宽度改为width:auto</strong>即可解决超过屏幕的问题。</p><h2 id="1-5-微信小程序各种提示框"><a href="#1-5-微信小程序各种提示框" class="headerlink" title="1.5 微信小程序各种提示框"></a>1.5 微信小程序各种提示框</h2><ol><li>弹出提示框，可以选择确定或者取消。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>     <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'这是一个模态弹窗'</span><span class="token punctuation">,</span>     <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里是点击了确定以后</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户点击确定'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里是点击了取消以后</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户点击取消'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>不带确定和取消的，直接提示成功</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'成功'</span><span class="token punctuation">,</span>    <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token comment">//持续的时间</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>提示等待中…</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'等待...'</span><span class="token punctuation">,</span>     <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'loading'</span><span class="token punctuation">,</span>     <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2000</span>  <span class="token comment">//持续的时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>提示文字，没有任何图标效果，但是文字可以写的很多</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'这里面可以写很多的文字，比其他的弹窗都要多！'</span><span class="token punctuation">,</span>     <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>     <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token comment">//持续的时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>弹窗提示选择，例如选择ABCD那种</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showActionSheet</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">itemList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tapIndex<span class="token punctuation">)</span><span class="token comment">//这里是点击了那个按钮的下标</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>多用于页面提示加载中</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>loading hidden<span class="token operator">=</span><span class="token string">"&#123;&#123;hidden&#125;&#125;"</span><span class="token operator">></span>       加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>loading<span class="token operator">></span><span class="token comment">// hidden有两个值：false和true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原文链接：<a href="https://jingyan.baidu.com/article/456c463b38ca900a5831449a.html">https://jingyan.baidu.com/article/456c463b38ca900a5831449a.html</a></p><h2 id="1-6-全局变量和全局方法的使用"><a href="#1-6-全局变量和全局方法的使用" class="headerlink" title="1.6 全局变量和全局方法的使用"></a>1.6 全局变量和全局方法的使用</h2><blockquote><p>在app.js中可以定义全局变量和方法<br>在其他js文件中，可以引入 const app &#x3D; getApp（）<br>app上自带公共变量和方法 app.globalData 或 app.myMethod</p></blockquote><ul><li>app.js中可以定义全局变量</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">imgurl</span><span class="token operator">:</span><span class="token string">'/images/common/'</span>  <span class="token punctuation">&#125;</span>， <span class="token function">myMethod</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>页面中使用全局变量，页面js文件中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 引入app</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// data中使用全局变量</span>    <span class="token literal-property property">imgurl</span><span class="token operator">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>imgurl<span class="token punctuation">,</span> <span class="token comment">//全局img路径</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新全局变量</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>imgurl<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原文链接：<a href="https://blog.csdn.net/weixin_43848576/article/details/98472926">https://blog.csdn.net/weixin_43848576/article/details/98472926</a></p><h1 id="2-后端连接"><a href="#2-后端连接" class="headerlink" title="2 后端连接"></a>2 后端连接</h1><h2 id="2-1-连接M有SQL数据库"><a href="#2-1-连接M有SQL数据库" class="headerlink" title="2.1 连接M有SQL数据库"></a>2.1 连接M有SQL数据库</h2><ul><li>详见博客：<a href="https://blog.csdn.net/qq_38882327/article/details/91377526">微信小程序连接数据库</a></li></ul><blockquote><p>使用PHP接口时，要把mysql_connect等用法改成mysqli_connect,不然会报错</p></blockquote><h2 id="2-2-检查网络状态"><a href="#2-2-检查网络状态" class="headerlink" title="2.2 检查网络状态"></a>2.2 检查网络状态</h2><ul><li>详见博客：<a href="https://blog.csdn.net/mushui0633/article/details/83245269">微信小程序检测网络连接</a></li></ul><h2 id="2-3-JSON取值方式"><a href="#2-3-JSON取值方式" class="headerlink" title="2.3 JSON取值方式"></a>2.3 JSON取值方式</h2><ul><li>详见博客：<a href="https://www.jb51.net/article/121989.htm">实例详解JSON取值(key是中文或者数字)方式</a></li></ul><h1 id="3-开发工具技巧"><a href="#3-开发工具技巧" class="headerlink" title="3 开发工具技巧"></a>3 开发工具技巧</h1><h2 id="3-1-检查网络状态"><a href="#3-1-检查网络状态" class="headerlink" title="3.1 检查网络状态"></a>3.1 检查网络状态</h2>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 常见用法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
